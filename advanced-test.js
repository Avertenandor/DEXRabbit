#!/usr/bin/env node
/**
 * üîí –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * –£–≥–ª—É–±–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º —É—Ä–æ–≤–Ω–µ
 */

const https = require('https');
const fs = require('fs').promises;

class AdvancedTester {
    constructor(baseUrl = 'https://xn--80apagbbfxgmuj4j.site') {
        this.baseUrl = baseUrl;
        this.results = {
            security: { passed: 0, failed: 0, warnings: 0 },
            performance: { passed: 0, failed: 0, warnings: 0 },
            accessibility: { passed: 0, failed: 0, warnings: 0 },
            seo: { passed: 0, failed: 0, warnings: 0 },
            total: 0,
            errors: []
        };
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    async testSecurity() {
        console.log('\nüîí –†–ê–°–®–ò–†–ï–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò...\n');
        
        const pages = ['/', '/restaurants.html', '/gifts.html', '/contacts.html'];
        
        for (const page of pages) {
            console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: ${page}`);
            
            try {
                const response = await this.makeRequest(`${this.baseUrl}${page}`);
                const html = response.data;
                const headers = response.headers;
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS
                if (this.baseUrl.startsWith('https://')) {
                    this.logSuccess('üîê HTTPS –≤–∫–ª—é—á–µ–Ω');
                } else {
                    this.logError('‚ùå HTTPS –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å');
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ Content Security Policy
                if (headers['content-security-policy']) {
                    this.logSuccess('üõ°Ô∏è CSP –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                } else {
                    this.logWarning('‚ö†Ô∏è CSP –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ X-Frame-Options
                if (headers['x-frame-options']) {
                    this.logSuccess('üñºÔ∏è X-Frame-Options –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç clickjacking');
                } else {
                    this.logWarning('‚ö†Ô∏è X-Frame-Options –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ X-Content-Type-Options
                if (headers['x-content-type-options']) {
                    this.logSuccess('üìÑ X-Content-Type-Options –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç MIME sniffing');
                } else {
                    this.logWarning('‚ö†Ô∏è X-Content-Type-Options –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ XSS —É—è–∑–≤–∏–º–æ—Å—Ç–∏
                const xssPatterns = [
                    '<script>alert(',
                    'javascript:',
                    'onload=',
                    'onerror=',
                    'eval(',
                    'document.cookie'
                ];
                
                let xssFound = false;
                for (const pattern of xssPatterns) {
                    if (html.toLowerCase().includes(pattern.toLowerCase())) {
                        xssFound = true;
                        break;
                    }
                }
                
                if (!xssFound) {
                    this.logSuccess('‚úÖ XSS –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã');
                } else {
                    this.logError('‚ùå –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ XSS —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã');
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ö
                const sqlPatterns = [
                    'union select',
                    'drop table',
                    'insert into',
                    'update set',
                    'delete from',
                    '\' or 1=1',
                    '"; drop table'
                ];
                
                let sqlFound = false;
                for (const pattern of sqlPatterns) {
                    if (html.toLowerCase().includes(pattern.toLowerCase())) {
                        sqlFound = true;
                        break;
                    }
                }
                
                if (!sqlFound) {
                    this.logSuccess('‚úÖ SQL injection –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                } else {
                    this.logError('‚ùå –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ SQL injection —É—è–∑–≤–∏–º–æ—Å—Ç–∏');
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã —Ñ–æ—Ä–º
                if (html.includes('name="honeypot"')) {
                    this.logSuccess('üçØ Honeypot –∑–∞—â–∏—Ç–∞ –æ—Ç –±–æ—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω–∞');
                } else {
                    this.logWarning('‚ö†Ô∏è Honeypot –∑–∞—â–∏—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ CSRF —Ç–æ–∫–µ–Ω–æ–≤
                if (html.includes('csrf') || html.includes('token')) {
                    this.logSuccess('üõ°Ô∏è CSRF –∑–∞—â–∏—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞');
                } else {
                    this.logWarning('‚ö†Ô∏è CSRF —Ç–æ–∫–µ–Ω—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã');
                }
                
            } catch (error) {
                this.logError(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ${page}: ${error.message}`);
            }
        }
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    async testPerformance() {
        console.log('\n‚ö° –†–ê–°–®–ò–†–ï–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò...\n');
        
        const pages = [
            '/', '/restaurants.html', '/gifts.html', '/investment-model.html',
            '/development.html', '/breeding.html', '/logistics.html', '/contacts.html'
        ];
        
        const performanceResults = [];
        
        for (const page of pages) {
            console.log(`üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${page}`);
            
            try {
                // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ä—ã
                const measurements = [];
                for (let i = 0; i < 5; i++) {
                    const startTime = process.hrtime.bigint();
                    const response = await this.makeRequest(`${this.baseUrl}${page}`);
                    const endTime = process.hrtime.bigint();
                    
                    const loadTime = Number(endTime - startTime) / 1000000; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                    measurements.push({
                        loadTime,
                        size: response.data.length,
                        status: response.statusCode
                    });
                }
                
                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                const avgLoadTime = measurements.reduce((sum, m) => sum + m.loadTime, 0) / measurements.length;
                const minLoadTime = Math.min(...measurements.map(m => m.loadTime));
                const maxLoadTime = Math.max(...measurements.map(m => m.loadTime));
                const avgSize = measurements.reduce((sum, m) => sum + m.size, 0) / measurements.length;
                
                performanceResults.push({
                    page,
                    avgLoadTime: Math.round(avgLoadTime),
                    minLoadTime: Math.round(minLoadTime),
                    maxLoadTime: Math.round(maxLoadTime),
                    avgSize: Math.round(avgSize)
                });
                
                // –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if (avgLoadTime < 100) {
                    this.logSuccess(`üöÄ ${page}: –û—Ç–ª–∏—á–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (${Math.round(avgLoadTime)}–º—Å)`);
                } else if (avgLoadTime < 300) {
                    this.logSuccess(`‚úÖ ${page}: –•–æ—Ä–æ—à–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (${Math.round(avgLoadTime)}–º—Å)`);
                } else if (avgLoadTime < 1000) {
                    this.logWarning(`‚ö†Ô∏è ${page}: –ü—Ä–∏–µ–º–ª–µ–º–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (${Math.round(avgLoadTime)}–º—Å)`);
                } else {
                    this.logError(`‚ùå ${page}: –ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (${Math.round(avgLoadTime)}–º—Å)`);
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
                if (avgSize < 50000) { // 50KB
                    this.logSuccess(`üì¶ ${page}: –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (${Math.round(avgSize/1024)}KB)`);
                } else if (avgSize < 100000) { // 100KB
                    this.logWarning(`‚ö†Ô∏è ${page}: –ë–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä (${Math.round(avgSize/1024)}KB)`);
                } else {
                    this.logError(`‚ùå ${page}: –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (${Math.round(avgSize/1024)}KB)`);
                }
                
            } catch (error) {
                this.logError(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ${page}: ${error.message}`);
            }
        }
        
        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        console.log('\nüìà –°–í–û–î–ö–ê –ü–û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:');
        performanceResults.forEach(result => {
            console.log(`üìÑ ${result.page}:`);
            console.log(`   ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ: ${result.avgLoadTime}–º—Å`);
            console.log(`   ‚ö° –ú–∏–Ω/–ú–∞–∫—Å: ${result.minLoadTime}–º—Å / ${result.maxLoadTime}–º—Å`);
            console.log(`   üì¶ –†–∞–∑–º–µ—Ä: ${Math.round(result.avgSize/1024)}KB`);
        });
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (A11Y)
    async testAccessibility() {
        console.log('\n‚ôø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–û–°–¢–£–ü–ù–û–°–¢–ò (A11Y)...\n');
        
        const pages = ['/', '/restaurants.html', '/gifts.html', '/contacts.html'];
        
        for (const page of pages) {
            console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: ${page}`);
            
            try {
                const response = await this.makeRequest(`${this.baseUrl}${page}`);
                const html = response.data;
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ alt –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                const imgMatches = html.match(/<img[^>]*>/g) || [];
                let imagesWithoutAlt = 0;
                
                imgMatches.forEach(img => {
                    if (!img.includes('alt=')) {
                        imagesWithoutAlt++;
                    }
                });
                
                if (imagesWithoutAlt === 0) {
                    this.logSuccess('üñºÔ∏è –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ—é—Ç alt –∞—Ç—Ä–∏–±—É—Ç—ã');
                } else {
                    this.logError(`‚ùå ${imagesWithoutAlt} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ alt –∞—Ç—Ä–∏–±—É—Ç–æ–≤`);
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (H1-H6)
                const h1Count = (html.match(/<h1[^>]*>/g) || []).length;
                if (h1Count === 1) {
                    this.logSuccess('üìù –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–æ–¥–∏–Ω H1)');
                } else if (h1Count === 0) {
                    this.logError('‚ùå H1 –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
                } else {
                    this.logError(`‚ùå –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ H1 –∑–∞–≥–æ–ª–æ–≤–∫–∏ (${h1Count})`);
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ lang –∞—Ç—Ä–∏–±—É—Ç–∞
                if (html.includes('lang="ru"')) {
                    this.logSuccess('üåê –Ø–∑—ã–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–∫–∞–∑–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
                } else {
                    this.logError('‚ùå –Ø–∑—ã–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —É–∫–∞–∑–∞–Ω');
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ form labels
                const formMatches = html.match(/<form[^>]*>[\s\S]*?<\/form>/g) || [];
                let formsWithoutLabels = 0;
                
                formMatches.forEach(form => {
                    const inputs = form.match(/<input[^>]*>/g) || [];
                    const labels = form.match(/<label[^>]*>/g) || [];
                    
                    if (inputs.length > 0 && labels.length === 0) {
                        formsWithoutLabels++;
                    }
                });
                
                if (formsWithoutLabels === 0) {
                    this.logSuccess('üìã –í—Å–µ —Ñ–æ—Ä–º—ã –∏–º–µ—é—Ç labels –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞');
                } else {
                    this.logError(`‚ùå ${formsWithoutLabels} —Ñ–æ—Ä–º –±–µ–∑ labels`);
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–≤–µ—Ç–æ–≤—ã—Ö –∫–æ–Ω—Ç—Ä–∞—Å—Ç–æ–≤ (–±–∞–∑–æ–≤–∞—è)
                if (html.includes('color:') || html.includes('background-color:')) {
                    this.logWarning('‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç—ã');
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ skip links
                if (html.includes('skip') && html.includes('content')) {
                    this.logSuccess('‚è≠Ô∏è Skip links –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã');
                } else {
                    this.logWarning('‚ö†Ô∏è Skip links –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
                }
                
            } catch (error) {
                this.logError(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ${page}: ${error.message}`);
            }
        }
    }

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ SEO —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    async testAdvancedSEO() {
        console.log('\nüîç –†–ê–°–®–ò–†–ï–ù–ù–û–ï SEO –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï...\n');
        
        const pages = [
            { path: '/', expectedKeywords: ['–∫—Ä–æ–ª–∏–∫', '–∫—É–ø–∏—Ç—å', '—Ñ–µ—Ä–º–∞', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'] },
            { path: '/restaurants.html', expectedKeywords: ['—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ', '–º—è—Å–æ'] },
            { path: '/gifts.html', expectedKeywords: ['–ø–æ–¥–∞—Ä–æ–∫', '–∫—Ä–æ–ª–∏–∫', '–ø–æ–¥–∞—Ä–æ—á–Ω—ã–π'] },
            { path: '/contacts.html', expectedKeywords: ['–∫–æ–Ω—Ç–∞–∫—Ç', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–∞–¥—Ä–µ—Å'] }
        ];
        
        for (const page of pages) {
            console.log(`üîç SEO –∞–Ω–∞–ª–∏–∑: ${page.path}`);
            
            try {
                const response = await this.makeRequest(`${this.baseUrl}${page.path}`);
                const html = response.data;
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ title –¥–ª–∏–Ω—ã
                const titleMatch = html.match(/<title>(.*?)<\/title>/);
                if (titleMatch) {
                    const titleLength = titleMatch[1].length;
                    if (titleLength >= 30 && titleLength <= 60) {
                        this.logSuccess(`üìù –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ title (${titleLength} —Å–∏–º–≤–æ–ª–æ–≤)`);
                    } else if (titleLength < 30) {
                        this.logWarning(`‚ö†Ô∏è Title —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (${titleLength} —Å–∏–º–≤–æ–ª–æ–≤)`);
                    } else {
                        this.logWarning(`‚ö†Ô∏è Title —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (${titleLength} —Å–∏–º–≤–æ–ª–æ–≤)`);
                    }
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ meta description –¥–ª–∏–Ω—ã
                const descMatch = html.match(/<meta\s+name="description"\s+content="([^"]*)"[^>]*>/);
                if (descMatch) {
                    const descLength = descMatch[1].length;
                    if (descLength >= 120 && descLength <= 160) {
                        this.logSuccess(`üìÑ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ description (${descLength} —Å–∏–º–≤–æ–ª–æ–≤)`);
                    } else if (descLength < 120) {
                        this.logWarning(`‚ö†Ô∏è Description —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (${descLength} —Å–∏–º–≤–æ–ª–æ–≤)`);
                    } else {
                        this.logWarning(`‚ö†Ô∏è Description —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (${descLength} —Å–∏–º–≤–æ–ª–æ–≤)`);
                    }
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                const bodyText = html.replace(/<[^>]*>/g, ' ').toLowerCase();
                const foundKeywords = page.expectedKeywords.filter(keyword => 
                    bodyText.includes(keyword.toLowerCase())
                );
                
                if (foundKeywords.length === page.expectedKeywords.length) {
                    this.logSuccess(`üéØ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–∞–π–¥–µ–Ω—ã (${foundKeywords.join(', ')})`);
                } else {
                    this.logWarning(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${foundKeywords.length}/${page.expectedKeywords.length} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤`);
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenGraph
                if (html.includes('og:title') && html.includes('og:description')) {
                    this.logSuccess('üì± OpenGraph –º–µ—Ç–∞—Ç–µ–≥–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
                } else {
                    this.logWarning('‚ö†Ô∏è OpenGraph –º–µ—Ç–∞—Ç–µ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                if (html.includes('application/ld+json') || html.includes('schema.org')) {
                    this.logSuccess('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã');
                } else {
                    this.logWarning('‚ö†Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏—Ö URL
                if (html.includes('rel="canonical"')) {
                    this.logSuccess('üîó –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
                } else {
                    this.logWarning('‚ö†Ô∏è –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ URL –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
                }
                
            } catch (error) {
                this.logError(`‚ùå –û—à–∏–±–∫–∞ SEO —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ${page.path}: ${error.message}`);
            }
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫
    async testTechnicalMetrics() {
        console.log('\n‚öôÔ∏è –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–†–ò–ö–ò...\n');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ robots.txt
            const robotsResponse = await this.makeRequest(`${this.baseUrl}/robots.txt`);
            if (robotsResponse.statusCode === 200) {
                this.logSuccess('ü§ñ robots.txt –¥–æ—Å—Ç—É–ø–µ–Ω');
                
                const robotsContent = robotsResponse.data;
                if (robotsContent.includes('Sitemap:')) {
                    this.logSuccess('üó∫Ô∏è Sitemap —É–∫–∞–∑–∞–Ω –≤ robots.txt');
                } else {
                    this.logWarning('‚ö†Ô∏è Sitemap –Ω–µ —É–∫–∞–∑–∞–Ω –≤ robots.txt');
                }
            } else {
                this.logWarning('‚ö†Ô∏è robots.txt –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ sitemap.xml
            const sitemapResponse = await this.makeRequest(`${this.baseUrl}/sitemap.xml`);
            if (sitemapResponse.statusCode === 200) {
                this.logSuccess('üó∫Ô∏è sitemap.xml –¥–æ—Å—Ç—É–ø–µ–Ω');
                
                const sitemapContent = sitemapResponse.data;
                const urlCount = (sitemapContent.match(/<url>/g) || []).length;
                this.logSuccess(`üìç –í sitemap –Ω–∞–π–¥–µ–Ω–æ ${urlCount} URL`);
            } else {
                this.logWarning('‚ö†Ô∏è sitemap.xml –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ favicon
            const faviconResponse = await this.makeRequest(`${this.baseUrl}/favicon.ico`);
            if (faviconResponse.statusCode === 200) {
                this.logSuccess('üé® favicon.ico –Ω–∞–π–¥–µ–Ω');
            } else {
                this.logWarning('‚ö†Ô∏è favicon.ico –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ manifest.json –¥–ª—è PWA
            const manifestResponse = await this.makeRequest(`${this.baseUrl}/manifest.json`);
            if (manifestResponse.statusCode === 200) {
                this.logSuccess('üì± PWA manifest –Ω–∞–π–¥–µ–Ω');
            } else {
                this.logWarning('‚ö†Ô∏è PWA manifest –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            }
            
        } catch (error) {
            this.logError(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫: ${error.message}`);
        }
    }

    // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    makeRequest(url) {
        return new Promise((resolve, reject) => {
            const request = https.get(url, (response) => {
                let data = '';
                
                response.on('data', (chunk) => {
                    data += chunk;
                });
                
                response.on('end', () => {
                    resolve({
                        statusCode: response.statusCode,
                        statusMessage: response.statusMessage,
                        headers: response.headers,
                        data: data
                    });
                });
            });
            
            request.on('error', (error) => {
                reject(error);
            });
            
            request.setTimeout(10000, () => {
                request.destroy();
                reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞'));
            });
        });
    }

    logSuccess(message) {
        console.log(message);
        this.results.total++;
        const category = this.getCurrentCategory();
        this.results[category].passed++;
    }

    logError(message) {
        console.log(message);
        this.results.total++;
        this.results.errors.push(message);
        const category = this.getCurrentCategory();
        this.results[category].failed++;
    }

    logWarning(message) {
        console.log(message);
        this.results.total++;
        const category = this.getCurrentCategory();
        this.results[category].warnings++;
    }

    getCurrentCategory() {
        const stack = new Error().stack;
        if (stack.includes('testSecurity')) return 'security';
        if (stack.includes('testPerformance')) return 'performance';
        if (stack.includes('testAccessibility')) return 'accessibility';
        if (stack.includes('testAdvancedSEO')) return 'seo';
        return 'security'; // default
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    async runAdvancedTests() {
        console.log('üß™ –ó–ê–ü–£–°–ö –£–ì–õ–£–ë–õ–ï–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–ú–´–®–õ–ï–ù–ù–û–ì–û –£–†–û–í–ù–Ø');
        console.log('=' + '='.repeat(70));
        console.log(`–¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π —Å–∞–π—Ç: ${this.baseUrl}`);
        console.log('=' + '='.repeat(70));

        const startTime = Date.now();

        // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        await this.testSecurity();
        await this.testPerformance();
        await this.testAccessibility();
        await this.testAdvancedSEO();
        await this.testTechnicalMetrics();

        // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const totalTime = Date.now() - startTime;
        
        console.log('\n' + '='.repeat(70));
        console.log('üìä –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –£–ì–õ–£–ë–õ–ï–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
        console.log('=' + '='.repeat(70));
        
        console.log(`üîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:`);
        console.log(`   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.results.security.passed}`);
        console.log(`   ‚ùå –û—à–∏–±–∫–∏: ${this.results.security.failed}`);
        console.log(`   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${this.results.security.warnings}`);
        
        console.log(`‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:`);
        console.log(`   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.results.performance.passed}`);
        console.log(`   ‚ùå –û—à–∏–±–∫–∏: ${this.results.performance.failed}`);
        console.log(`   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${this.results.performance.warnings}`);
        
        console.log(`‚ôø –î–û–°–¢–£–ü–ù–û–°–¢–¨:`);
        console.log(`   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.results.accessibility.passed}`);
        console.log(`   ‚ùå –û—à–∏–±–∫–∏: ${this.results.accessibility.failed}`);
        console.log(`   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${this.results.accessibility.warnings}`);
        
        console.log(`üîç SEO:`);
        console.log(`   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.results.seo.passed}`);
        console.log(`   ‚ùå –û—à–∏–±–∫–∏: ${this.results.seo.failed}`);
        console.log(`   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${this.results.seo.warnings}`);

        const totalPassed = Object.values(this.results).reduce((sum, cat) => 
            typeof cat === 'object' && cat.passed ? sum + cat.passed : sum, 0);
        const totalFailed = Object.values(this.results).reduce((sum, cat) => 
            typeof cat === 'object' && cat.failed ? sum + cat.failed : sum, 0);
        const totalWarnings = Object.values(this.results).reduce((sum, cat) => 
            typeof cat === 'object' && cat.warnings ? sum + cat.warnings : sum, 0);

        console.log('\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
        console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${totalTime}–º—Å`);
        console.log(`üìä –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${this.results.total}`);
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${totalPassed}`);
        console.log(`‚ùå –û—à–∏–±–∫–∏: ${totalFailed}`);
        console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${totalWarnings}`);
        console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${((totalPassed / this.results.total) * 100).toFixed(1)}%`);

        if (this.results.errors.length > 0) {
            console.log('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:');
            this.results.errors.forEach((error, index) => {
                console.log(`${index + 1}. ${error}`);
            });
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
        await this.saveAdvancedReport();

        console.log('\n' + '='.repeat(70));
        if (totalFailed === 0) {
            console.log('üèÜ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
        } else {
            console.log('‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´, –¢–†–ï–ë–£–Æ–©–ò–ï –í–ù–ò–ú–ê–ù–ò–Ø');
        }
        console.log('=' + '='.repeat(70));
    }

    async saveAdvancedReport() {
        const report = {
            timestamp: new Date().toISOString(),
            baseUrl: this.baseUrl,
            testType: 'advanced_security_performance',
            results: this.results,
            summary: {
                totalChecks: this.results.total,
                criticalIssues: this.results.errors.length,
                status: this.results.errors.length === 0 ? 'EXCELLENT' : 'NEEDS_ATTENTION'
            }
        };

        try {
            await fs.writeFile('advanced-test-report.json', JSON.stringify(report, null, 2));
            console.log('\nüíæ –£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ advanced-test-report.json');
        } catch (error) {
            console.log(`\n‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞: ${error.message}`);
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
    const tester = new AdvancedTester();
    tester.runAdvancedTests().catch(console.error);
}

module.exports = AdvancedTester;