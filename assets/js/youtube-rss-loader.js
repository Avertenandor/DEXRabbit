/**
 * YouTube RSS Loader
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ RSS –ª–µ–Ω—Ç—É
 *
 * –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
 * - –ù–µ –Ω—É–∂–µ–Ω API –∫–ª—é—á
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ
 * - –ù–µ—Ç –ª–∏–º–∏—Ç–æ–≤ –∏ –∫–≤–æ—Ç
 * - –ü—Ä–µ–≤—å—é –æ—Ç YouTube
 */

(function() {
  'use strict';

  const YouTubeRSSLoader = {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config: {
      channelHandle: '@DexRabbitFarm',
      maxResults: 6,
      cacheDuration: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
    },

    cache: null,
    cacheTime: null,

    /**
     * –ü–æ–ª—É—á–∏—Ç—å Channel ID –∏–∑ handle —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
     */
    async getChannelIdFromHandle(handle) {
      try {
        // YouTube –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç @handle –Ω–∞ channel/{CHANNEL_ID}
        const cleanHandle = handle.replace('@', '');

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º RSS feed —Å handle - YouTube —Å–∞–º —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è
        // –§–æ—Ä–º–∞—Ç: https://www.youtube.com/feeds/videos.xml?channel_id=CHANNEL_ID
        // –ù–æ –º—ã –º–æ–∂–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ playlist_id –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å workaround

        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
        const searchUrl = `https://www.youtube.com/results?search_query=${cleanHandle}`;

        // –¢–∞–∫ –∫–∞–∫ –º—ã –Ω–µ –º–æ–∂–µ–º –¥–µ–ª–∞—Ç—å –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–∑-–∑–∞ CORS,
        // –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–π workaround - RSS feed –∏—â–µ—Ç –ø–æ –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞

        // –î–ª—è @DexRabbitFarm –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        console.log(`Trying to fetch videos for channel: ${handle}`);

        return null; // –í–µ—Ä–Ω–µ–º—Å—è –∫ —ç—Ç–æ–º—É –ø–æ–∑–∂–µ, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π RSS
      } catch (error) {
        console.warn('Could not determine channel ID:', error);
        return null;
      }
    },

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å RSS –ª–µ–Ω—Ç—É –∫–∞–Ω–∞–ª–∞
     */
    async fetchRSSFeed(channelId) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      if (this.cache && this.cacheTime && (Date.now() - this.cacheTime < this.config.cacheDuration)) {
        console.log('Using cached YouTube RSS data');
        return this.cache;
      }

      try {
        // RSS feed URL
        // –§–æ—Ä–º–∞—Ç: https://www.youtube.com/feeds/videos.xml?channel_id=CHANNEL_ID
        const rssUrl = `https://www.youtube.com/feeds/videos.xml?channel_id=${channelId}`;

        // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ CORS proxy –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é
        let response;

        try {
          // –ü–æ–ø—ã—Ç–∫–∞ #1: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑-–∑–∞ CORS)
          response = await fetch(rssUrl);

          if (!response.ok) {
            throw new Error(`RSS fetch failed: ${response.status}`);
          }
        } catch (corsError) {
          // –ü–æ–ø—ã—Ç–∫–∞ #2: –ò—Å–ø–æ–ª—å–∑—É–µ–º CORS proxy
          console.log('Direct fetch failed, trying CORS proxy...');
          const corsProxy = 'https://api.allorigins.win/raw?url=';
          response = await fetch(corsProxy + encodeURIComponent(rssUrl));

          if (!response.ok) {
            throw new Error(`CORS proxy fetch failed: ${response.status}`);
          }
        }

        const xmlText = await response.text();
        const videos = this.parseRSSFeed(xmlText);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        this.cache = videos;
        this.cacheTime = Date.now();

        return videos;
      } catch (error) {
        console.error('Error fetching YouTube RSS feed:', error);
        throw error;
      }
    },

    /**
     * –ü–∞—Ä—Å–∏—Ç—å XML RSS –ª–µ–Ω—Ç—É
     */
    parseRSSFeed(xmlText) {
      const parser = new DOMParser();
      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
      const parseError = xmlDoc.querySelector('parsererror');
      if (parseError) {
        throw new Error('XML parsing error');
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ (entry) –∏–∑ RSS
      const entries = xmlDoc.querySelectorAll('entry');
      const videos = [];

      entries.forEach((entry, index) => {
        if (index >= this.config.maxResults) return;

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const videoId = entry.querySelector('videoId')?.textContent;
        const title = entry.querySelector('title')?.textContent;
        const published = entry.querySelector('published')?.textContent;
        const thumbnail = entry.querySelector('thumbnail')?.getAttribute('url');

        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å video ID –∏–∑ link
        if (!videoId) {
          const link = entry.querySelector('link')?.getAttribute('href');
          const match = link?.match(/watch\?v=([^&]+)/);
          if (match) {
            videoId = match[1];
          }
        }

        if (videoId && title) {
          videos.push({
            id: videoId,
            title: title,
            publishedAt: published,
            // YouTube RSS –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç –ø—Ä–µ–≤—å—é: https://i.ytimg.com/vi/{VIDEO_ID}/hqdefault.jpg
            // –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º maxresdefault –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            thumbnail: `https://img.youtube.com/vi/${videoId}/maxresdefault.jpg`,
          });
        }
      });

      return videos;
    },

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
     */
    formatPublishDate(dateString) {
      const date = new Date(dateString);
      const now = new Date();
      const diffTime = Math.abs(now - date);
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

      if (diffDays === 0) {
        return '–°–µ–≥–æ–¥–Ω—è';
      } else if (diffDays === 1) {
        return '–í—á–µ—Ä–∞';
      } else if (diffDays < 7) {
        return `${diffDays} –¥–Ω. –Ω–∞–∑–∞–¥`;
      } else if (diffDays < 30) {
        const weeks = Math.floor(diffDays / 7);
        return `${weeks} –Ω–µ–¥. –Ω–∞–∑–∞–¥`;
      } else if (diffDays < 365) {
        const months = Math.floor(diffDays / 30);
        return `${months} –º–µ—Å. –Ω–∞–∑–∞–¥`;
      } else {
        const years = Math.floor(diffDays / 365);
        return `${years} –≥. –Ω–∞–∑–∞–¥`;
      }
    },

    /**
     * –°–æ–∑–¥–∞—Ç—å HTML –∫–∞—Ä—Ç–æ—á–∫—É –≤–∏–¥–µ–æ
     */
    createVideoCard(video) {
      const card = document.createElement('a');
      card.href = `https://www.youtube.com/watch?v=${video.id}`;
      card.target = '_blank';
      card.rel = 'noopener noreferrer';
      card.className = 'youtube-video-card';

      card.innerHTML = `
        <div class="youtube-thumbnail" style="background-image: url('${video.thumbnail}');">
          <div class="youtube-play-overlay"></div>
        </div>
        <div class="youtube-video-info">
          <h3 class="youtube-video-title">${this.escapeHtml(video.title)}</h3>
          <div class="youtube-video-meta">
            <span class="youtube-video-date">${this.formatPublishDate(video.publishedAt)}</span>
          </div>
        </div>
      `;

      return card;
    },

    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å HTML
     */
    escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    },

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –∏–∑ JSON —Ñ–∞–π–ª–∞ (fallback –º–µ—Ç–æ–¥)
     */
    async loadVideosFromJSON() {
      try {
        const response = await fetch('/assets/js/youtube-videos.json');
        if (!response.ok) {
          throw new Error(`Failed to load JSON: ${response.status}`);
        }

        const data = await response.json();

        if (!data.videos || data.videos.length === 0) {
          throw new Error('No videos in JSON');
        }

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç JSON –≤ —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ
        return data.videos.map(v => ({
          id: v.id,
          title: v.title,
          publishedAt: new Date().toISOString(), // –î–ª—è JSON —É –Ω–∞—Å –Ω–µ—Ç –¥–∞—Ç—ã
          thumbnail: `https://img.youtube.com/vi/${v.id}/maxresdefault.jpg`,
        }));
      } catch (error) {
        console.error('Error loading from JSON:', error);
        return null;
      }
    },

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤–∏–¥–µ–æ
     */
    async loadVideos() {
      const container = document.getElementById('youtube-videos-container');
      if (!container) {
        console.error('YouTube videos container not found');
        return;
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
      container.innerHTML = '<div class="youtube-loading">–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ —Å YouTube...</div>';

      let videos = null;

      // –ü–æ–ø—ã—Ç–∫–∞ #1: –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ RSS (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
      // –í–ê–ñ–ù–û: –ù–∞–π–¥–∏—Ç–µ –≤–∞—à Channel ID –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞!
      // –ö–∞–∫ –Ω–∞–π—Ç–∏: –æ—Ç–∫—Ä–æ–π—Ç–µ https://www.youtube.com/@–í–∞—à–ö–∞–Ω–∞–ª
      //            –Ω–∞–∂–º–∏—Ç–µ F12 ‚Üí Console ‚Üí –≤–≤–µ–¥–∏—Ç–µ:
      //            document.querySelector('meta[itemprop="channelId"]').content
      const channelId = ''; // ‚Üê –í–°–¢–ê–í–¨–¢–ï –°–Æ–î–ê –í–ê–® CHANNEL ID (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å UC...)

      if (channelId && channelId.startsWith('UC')) {
        console.log('üì° Trying to load videos via RSS feed...');
        try {
          videos = await this.fetchRSSFeed(channelId);
          console.log(`‚úÖ Loaded ${videos.length} videos from RSS (automatic)`);
        } catch (error) {
          console.warn('RSS feed failed, falling back to JSON:', error.message);
        }
      } else {
        console.log('‚ö†Ô∏è  Channel ID not configured, using JSON fallback');
      }

      // –ü–æ–ø—ã—Ç–∫–∞ #2: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ JSON (—Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
      if (!videos || videos.length === 0) {
        console.log('üìÑ Loading videos from JSON file...');
        videos = await this.loadVideosFromJSON();

        if (videos && videos.length > 0) {
          console.log(`‚úÖ Loaded ${videos.length} videos from JSON (manual)`);
        }
      }

      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º fallback
      if (!videos || videos.length === 0) {
        console.log('‚ùå All methods failed, showing fallback');
        this.renderFallback(container);
        return;
      }

      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∏–¥–µ–æ
      container.innerHTML = '';

      const grid = document.createElement('div');
      grid.className = 'youtube-grid';

      videos.slice(0, this.config.maxResults).forEach(video => {
        const card = this.createVideoCard(video);
        grid.appendChild(card);
      });

      container.appendChild(grid);
    },

    /**
     * Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å –ø—Ä–∏–∑—ã–≤–æ–º –ø–æ—Å–µ—Ç–∏—Ç—å –∫–∞–Ω–∞–ª
     */
    renderFallback(container) {
      container.innerHTML = `
        <div style="display: flex; justify-content: center; align-items: center; min-height: 300px;">
          <div style="text-align: center; max-width: 600px; padding: 3rem 2rem; background: linear-gradient(135deg, rgba(255, 0, 0, 0.1), rgba(255, 100, 100, 0.05)); border: 2px solid rgba(255, 0, 0, 0.3); border-radius: 20px; box-shadow: 0 10px 40px rgba(0,0,0,0.3);">
            <div style="font-size: 4rem; margin-bottom: 1.5rem; filter: drop-shadow(0 4px 8px rgba(0,0,0,0.3));">üì∫</div>
            <h3 style="font-size: 1.8rem; margin-bottom: 1rem; background: linear-gradient(135deg, #ff0000, #ff6b6b); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text;">
              –°–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—Å –Ω–∞ YouTube!
            </h3>
            <p style="color: rgba(255, 255, 255, 0.8); margin-bottom: 2rem; font-size: 1.1rem; line-height: 1.6;">
              –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª <strong>${this.config.channelHandle}</strong><br>
              —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ –æ –∂–∏–∑–Ω–∏ —Ñ–µ—Ä–º—ã!
            </p>
            <a
              href="https://www.youtube.com/${this.config.channelHandle}"
              target="_blank"
              rel="noopener noreferrer"
              style="display: inline-block; padding: 1rem 3rem; background: linear-gradient(135deg, #ff0000, #cc0000); color: white; text-decoration: none; border-radius: 50px; font-weight: bold; font-size: 1.1rem; transition: all 0.3s ease; box-shadow: 0 4px 15px rgba(255, 0, 0, 0.4);"
              onmouseover="this.style.transform='translateY(-3px)'; this.style.boxShadow='0 6px 20px rgba(255, 0, 0, 0.6)';"
              onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 4px 15px rgba(255, 0, 0, 0.4)';"
            >
              üé¨ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª
            </a>
          </div>
        </div>
      `;
    },

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
     */
    init() {
      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => this.loadVideos());
      } else {
        this.loadVideos();
      }
    }
  };

  // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
  YouTubeRSSLoader.init();

  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  window.YouTubeRSSLoader = YouTubeRSSLoader;
})();
