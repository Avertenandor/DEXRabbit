// –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏ PLEX
class PlexToken {
    constructor() {
        this.tokenInfo = {
            name: 'PLEX',
            fullName: 'Rabbit Farm Token',
            symbol: 'PLEX',
            decimals: 18,
            totalSupply: 0,
            circulatingSupply: 0,
            currentPrice: 1.0, // —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∫—É—Ä—Å 1 PLEX = 1 USDT
            priceHistory: []
        };
        
        this.userBalances = {};
        this.dailyRewards = {};
        this.transactions = [];
        
        this.rewardRates = {
            roundA: 0.0015, // 0.15% –≤ –¥–µ–Ω—å
            roundB: 0.0025, // 0.25% –≤ –¥–µ–Ω—å
            roundC: 0.0035  // 0.35% –≤ –¥–µ–Ω—å (–µ—Å–ª–∏ –±—É–¥–µ—Ç)
        };
        
        this.init();
    }

    init() {
        this.loadUserData();
        this.startDailyRewards();
        this.initPriceTracking();
        this.renderPlexWidget();
    }

    // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è PLEX
    startDailyRewards() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å, –Ω–∞—á–∏—Å–ª—è–µ–º –≤ 12:00 –ú–°–ö
        setInterval(() => {
            const now = new Date();
            const moscowTime = new Date(now.toLocaleString("en-US", {timeZone: "Europe/Moscow"}));
            
            if (moscowTime.getHours() === 12 && moscowTime.getMinutes() === 0) {
                this.processDailyRewards();
            }
        }, 60000); // –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è

        // –î–ª—è –¥–µ–º–æ - –Ω–∞—á–∏—Å–ª—è–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        if (window.location.hostname === 'localhost' || window.location.hostname.includes('127.0.0.1')) {
            setTimeout(() => this.processDailyRewards(), 3000);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
    processDailyRewards() {
        const today = new Date().toDateString();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∏—Å–ª—è–ª–∏ –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
        if (this.dailyRewards[today]) {
            console.log('PLEX rewards already processed today');
            return;
        }

        const investors = this.getActiveInvestors();
        let totalRewardsToday = 0;

        investors.forEach(investor => {
            const reward = this.calculateDailyReward(investor);
            if (reward > 0) {
                this.addToBalance(investor.id, reward);
                this.recordTransaction({
                    type: 'daily_reward',
                    userId: investor.id,
                    amount: reward,
                    description: `–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ PLEX –∑–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é`,
                    timestamp: new Date().toISOString(),
                    investmentId: investor.investmentId
                });
                
                totalRewardsToday += reward;
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        this.tokenInfo.circulatingSupply += totalRewardsToday;
        this.tokenInfo.totalSupply += totalRewardsToday;
        this.dailyRewards[today] = {
            totalAmount: totalRewardsToday,
            recipientsCount: investors.length,
            timestamp: new Date().toISOString()
        };

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        this.notifyUsersAboutRewards(totalRewardsToday);
        
        console.log(`üí∞ Daily PLEX rewards processed: ${totalRewardsToday.toFixed(4)} PLEX to ${investors.length} investors`);
    }

    // –†–∞—Å—á—ë—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞
    calculateDailyReward(investor) {
        const investmentAmount = investor.investment?.amount || 0;
        const round = investor.investment?.round || 'roundA';
        const rate = this.rewardRates[round] || this.rewardRates.roundA;
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
        let multiplier = 1.0;
        
        // –ë–æ–Ω—É—Å –∑–∞ —Å—Ä–æ–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
        const daysSinceInvestment = this.getDaysSince(investor.investment?.date);
        if (daysSinceInvestment > 30) multiplier += 0.1; // +10% –ø–æ—Å–ª–µ –º–µ—Å—è—Ü–∞
        if (daysSinceInvestment > 90) multiplier += 0.1; // +20% –ø–æ—Å–ª–µ 3 –º–µ—Å—è—Ü–µ–≤
        
        // –ë–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä—Ä–∞–ª–æ–≤
        if (investor.referrals && investor.referrals.length > 0) {
            multiplier += investor.referrals.length * 0.05; // +5% –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        }
        
        // –ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —É—á–∞—Å—Ç–∏–µ –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è—Ö)
        if (investor.activityScore > 50) {
            multiplier += 0.15; // +15% –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        }
        
        const dailyReward = investmentAmount * rate * multiplier;
        return dailyReward;
    }

    // –û–±–º–µ–Ω PLEX –Ω–∞ USDT —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –±–∏—Ä–∂—É
    exchangePlexToUsdt(userId, plexAmount) {
        const userBalance = this.getUserBalance(userId);
        
        if (userBalance < plexAmount) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ PLEX –¥–ª—è –æ–±–º–µ–Ω–∞');
        }
        
        if (plexAmount < 10) {
            throw new Error('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞: 10 PLEX');
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—É—Ä—Å —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
        const exchangeRate = this.getCurrentExchangeRate();
        const fee = plexAmount * 0.02; // 2% –∫–æ–º–∏—Å—Å–∏—è
        const plexAfterFee = plexAmount - fee;
        const usdtAmount = plexAfterFee * exchangeRate;
        
        // –ü—Ä–æ–≤–æ–¥–∏–º –æ–±–º–µ–Ω
        this.subtractFromBalance(userId, plexAmount);
        this.addUsdtBalance(userId, usdtAmount);
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        this.recordTransaction({
            type: 'exchange_plex_to_usdt',
            userId: userId,
            plexAmount: plexAmount,
            usdtAmount: usdtAmount,
            fee: fee,
            rate: exchangeRate,
            timestamp: new Date().toISOString()
        });
        
        // –í–ª–∏—è–µ–º –Ω–∞ –∫—É—Ä—Å (—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)
        this.updateTokenPrice(-0.001 * (plexAmount / 1000)); // –Ω–µ–±–æ–ª—å—à–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ
        
        return {
            plexSold: plexAmount,
            usdtReceived: usdtAmount,
            fee: fee,
            rate: exchangeRate
        };
    }

    // –ü–æ–∫—É–ø–∫–∞ PLEX –∑–∞ USDT
    buyPlexWithUsdt(userId, usdtAmount) {
        const userUsdtBalance = this.getUserUsdtBalance(userId);
        
        if (userUsdtBalance < usdtAmount) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏');
        }
        
        if (usdtAmount < 10) {
            throw new Error('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: 10 USDT');
        }
        
        const exchangeRate = this.getCurrentExchangeRate();
        const fee = usdtAmount * 0.015; // 1.5% –∫–æ–º–∏—Å—Å–∏—è –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
        const usdtAfterFee = usdtAmount - fee;
        const plexAmount = usdtAfterFee / exchangeRate;
        
        // –ü—Ä–æ–≤–æ–¥–∏–º –ø–æ–∫—É–ø–∫—É
        this.subtractUsdtBalance(userId, usdtAmount);
        this.addToBalance(userId, plexAmount);
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        this.recordTransaction({
            type: 'buy_plex_with_usdt',
            userId: userId,
            usdtAmount: usdtAmount,
            plexAmount: plexAmount,
            fee: fee,
            rate: exchangeRate,
            timestamp: new Date().toISOString()
        });
        
        // –í–ª–∏—è–µ–º –Ω–∞ –∫—É—Ä—Å (—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å–ø—Ä–æ—Å)
        this.updateTokenPrice(0.001 * (usdtAmount / 1000)); // –Ω–µ–±–æ–ª—å—à–æ–π —Ä–æ—Å—Ç –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
        
        return {
            usdtSpent: usdtAmount,
            plexReceived: plexAmount,
            fee: fee,
            rate: exchangeRate
        };
    }

    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ PLEX –¥–ª—è –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥ —Ñ–µ—Ä–º—ã
    payWithPlex(userId, amount, service) {
        const userBalance = this.getUserBalance(userId);
        
        if (userBalance < amount) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ PLEX –¥–ª—è –æ–ø–ª–∞—Ç—ã');
        }
        
        // –£—Å–ª—É–≥–∏ —Ñ–µ—Ä–º—ã —Å —Ü–µ–Ω–∞–º–∏ –≤ PLEX
        const services = {
            'visit_farm': { price: 50, name: '–ü–æ—Å–µ—â–µ–Ω–∏–µ —Ñ–µ—Ä–º—ã' },
            'premium_feed': { price: 25, name: '–ü—Ä–µ–º–∏—É–º –∫–æ—Ä–º–∞ –Ω–∞ –º–µ—Å—è—Ü' },
            'vet_checkup': { price: 30, name: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–µ—Ç–æ—Å–º–æ—Ç—Ä' },
            'photo_session': { price: 20, name: '–§–æ—Ç–æ—Å–µ—Å—Å–∏—è —Å –∫—Ä–æ–ª–∏–∫–æ–º' },
            'naming_rights': { price: 100, name: '–ü—Ä–∞–≤–æ –Ω–∞–∑–≤–∞—Ç—å –∫—Ä–æ–ª—å—á–æ–Ω–∫–∞' },
            'breeding_priority': { price: 75, name: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏–∏' }
        };
        
        const serviceInfo = services[service];
        if (!serviceInfo) {
            throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞');
        }
        
        if (amount !== serviceInfo.price) {
            throw new Error(`–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${serviceInfo.price} PLEX`);
        }
        
        // –ü—Ä–æ–≤–æ–¥–∏–º –æ–ø–ª–∞—Ç—É
        this.subtractFromBalance(userId, amount);
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        this.recordTransaction({
            type: 'service_payment',
            userId: userId,
            amount: amount,
            service: service,
            serviceName: serviceInfo.name,
            timestamp: new Date().toISOString()
        });
        
        // –°–∂–∏–≥–∞–µ–º PLEX (–¥–µ—Ñ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞)
        this.tokenInfo.circulatingSupply -= amount;
        
        console.log(`üî• Burned ${amount} PLEX for service: ${serviceInfo.name}`);
        
        return {
            service: serviceInfo.name,
            amountPaid: amount,
            newBalance: this.getUserBalance(userId)
        };
    }

    // –°–∏—Å—Ç–µ–º–∞ —Å—Ç–µ–π–∫–∏–Ω–≥–∞ PLEX
    stakePlex(userId, amount, duration = 90) {
        const userBalance = this.getUserBalance(userId);
        
        if (userBalance < amount) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ PLEX –¥–ª—è —Å—Ç–µ–π–∫–∏–Ω–≥–∞');
        }
        
        if (amount < 100) {
            throw new Error('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Å—Ç–µ–π–∫–∏–Ω–≥–∞: 100 PLEX');
        }
        
        // –°—Ç–∞–≤–∫–∏ –ø–æ —Å—Ä–æ–∫–∞–º
        const stakingRates = {
            30: 0.08,   // 8% –≥–æ–¥–æ–≤—ã—Ö
            90: 0.12,   // 12% –≥–æ–¥–æ–≤—ã—Ö
            180: 0.18,  // 18% –≥–æ–¥–æ–≤—ã—Ö
            365: 0.25   // 25% –≥–æ–¥–æ–≤—ã—Ö
        };
        
        const rate = stakingRates[duration] || stakingRates[90];
        const endDate = new Date(Date.now() + duration * 24 * 60 * 60 * 1000);
        const expectedReward = amount * rate * (duration / 365);
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º PLEX
        this.subtractFromBalance(userId, amount);
        
        // –°–æ–∑–¥–∞—ë–º —Å—Ç–µ–π–∫
        const stake = {
            id: this.generateStakeId(),
            userId: userId,
            amount: amount,
            duration: duration,
            rate: rate,
            startDate: new Date().toISOString(),
            endDate: endDate.toISOString(),
            expectedReward: expectedReward,
            status: 'active'
        };
        
        this.saveStake(stake);
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        this.recordTransaction({
            type: 'stake_plex',
            userId: userId,
            amount: amount,
            duration: duration,
            expectedReward: expectedReward,
            stakeId: stake.id,
            timestamp: new Date().toISOString()
        });
        
        return stake;
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ PLEX
    renderPlexWidget() {
        const widgetContainer = document.getElementById('plex-widget');
        if (!widgetContainer) return;
        
        const userBalance = this.getUserBalance('demo_user') || 0;
        const todayRewards = this.getTodayRewards('demo_user') || 0;
        const currentPrice = this.tokenInfo.currentPrice;
        
        widgetContainer.innerHTML = `
            <div class="plex-widget">
                <div class="plex-header">
                    <div class="plex-logo">
                        <span class="token-icon">ü™ô</span>
                        <h3>PLEX Balance</h3>
                    </div>
                    <div class="plex-price">
                        <span class="price-value">${currentPrice.toFixed(4)} USDT</span>
                        <span class="price-change ${this.getPriceChangeClass()}">
                            ${this.getPriceChange()}
                        </span>
                    </div>
                </div>
                
                <div class="plex-balance">
                    <div class="balance-main">
                        <span class="balance-amount">${userBalance.toFixed(4)}</span>
                        <span class="balance-currency">PLEX</span>
                    </div>
                    <div class="balance-usd">
                        ‚âà ${(userBalance * currentPrice).toFixed(2)} USDT
                    </div>
                </div>
                
                <div class="plex-stats">
                    <div class="stat-item">
                        <div class="stat-label">–°–µ–≥–æ–¥–Ω—è –ø–æ–ª—É—á–µ–Ω–æ</div>
                        <div class="stat-value">+${todayRewards.toFixed(4)} PLEX</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">–í—Å–µ–≥–æ –≤ –æ–±–æ—Ä–æ—Ç–µ</div>
                        <div class="stat-value">${this.tokenInfo.circulatingSupply.toFixed(0)} PLEX</div>
                    </div>
                </div>
                
                <div class="plex-actions">
                    <button onclick="plex.openExchange()" class="btn btn-primary btn-small">
                        üí± –û–±–º–µ–Ω—è—Ç—å
                    </button>
                    <button onclick="plex.openStaking()" class="btn btn-outline btn-small">
                        üìà –°—Ç–µ–π–∫–∏–Ω–≥
                    </button>
                    <button onclick="plex.openServices()" class="btn btn-outline btn-small">
                        üõçÔ∏è –£—Å–ª—É–≥–∏
                    </button>
                </div>
            </div>
        `;
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    getUserBalance(userId) {
        return this.userBalances[userId] || 0;
    }

    addToBalance(userId, amount) {
        this.userBalances[userId] = (this.userBalances[userId] || 0) + amount;
    }

    subtractFromBalance(userId, amount) {
        this.userBalances[userId] = Math.max(0, (this.userBalances[userId] || 0) - amount);
    }

    getCurrentExchangeRate() {
        return this.tokenInfo.currentPrice;
    }

    updateTokenPrice(change) {
        this.tokenInfo.currentPrice = Math.max(0.1, this.tokenInfo.currentPrice + change);
        this.tokenInfo.priceHistory.push({
            price: this.tokenInfo.currentPrice,
            timestamp: new Date().toISOString(),
            change: change
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
        if (this.tokenInfo.priceHistory.length > 100) {
            this.tokenInfo.priceHistory = this.tokenInfo.priceHistory.slice(-100);
        }
    }

    recordTransaction(transaction) {
        this.transactions.push({
            id: this.generateTransactionId(),
            ...transaction
        });
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if (window.analytics) {
            window.analytics.trackEvent('plex_transaction', {
                event_category: 'token',
                transaction_type: transaction.type,
                amount: transaction.amount || transaction.plexAmount,
                user_id: transaction.userId
            });
        }
    }

    getActiveInvestors() {
        // –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤
        return [
            {
                id: 'demo_user',
                investment: {
                    amount: 1000,
                    round: 'roundA',
                    date: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString() // 10 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
                },
                referrals: [],
                activityScore: 75
            }
        ];
    }

    getDaysSince(dateString) {
        const date = new Date(dateString);
        const now = new Date();
        return Math.floor((now - date) / (24 * 60 * 60 * 1000));
    }

    getTodayRewards(userId) {
        const today = new Date().toDateString();
        return this.dailyRewards[today]?.totalAmount || 0;
    }

    getPriceChange() {
        if (this.tokenInfo.priceHistory.length < 2) return '+0.00%';
        
        const current = this.tokenInfo.priceHistory[this.tokenInfo.priceHistory.length - 1];
        const previous = this.tokenInfo.priceHistory[this.tokenInfo.priceHistory.length - 2];
        
        const change = ((current.price - previous.price) / previous.price) * 100;
        return (change >= 0 ? '+' : '') + change.toFixed(2) + '%';
    }

    getPriceChangeClass() {
        const change = this.getPriceChange();
        return change.startsWith('+') ? 'price-up' : change.startsWith('-') ? 'price-down' : 'price-neutral';
    }

    generateStakeId() {
        return 'stake_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }

    generateTransactionId() {
        return 'tx_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }

    loadUserData() {
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.userBalances['demo_user'] = 234.5678; // –¥–µ–º–æ-–±–∞–ª–∞–Ω—Å
    }

    initPriceTracking() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω—ã
        this.tokenInfo.priceHistory.push({
            price: this.tokenInfo.currentPrice,
            timestamp: new Date().toISOString(),
            change: 0
        });
    }

    notifyUsersAboutRewards(totalAmount) {
        console.log(`üì¢ Notifying users about ${totalAmount} PLEX rewards distributed`);
    }

    openExchange() {
        console.log('Opening PLEX exchange interface...');
        // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±–º–µ–Ω–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ
    }

    openStaking() {
        console.log('Opening PLEX staking interface...');
        // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç–µ–π–∫–∏–Ω–≥–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ
    }

    openServices() {
        console.log('Opening farm services interface...');
        // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Å–ª—É–≥ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ
    }

    saveStake(stake) {
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–µ–π–∫–µ
        console.log('Stake saved:', stake);
    }

    getUserUsdtBalance(userId) {
        // –í –¥–µ–º–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å USDT
        return 500;
    }

    addUsdtBalance(userId, amount) {
        console.log(`Adding ${amount} USDT to user ${userId}`);
    }

    subtractUsdtBalance(userId, amount) {
        console.log(`Subtracting ${amount} USDT from user ${userId}`);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω —Å–∏—Å—Ç–µ–º—ã
window.plex = new PlexToken();

console.log('ü™ô PLEX Token system loaded');