// –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞—à–±–æ—Ä–¥–æ–≤ –∏ –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏
class AnalyticsDashboard {
    constructor() {
        this.charts = {};
        this.reportTypes = {
            'farm_performance': '–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ñ–µ—Ä–º—ã',
            'investor_analytics': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤', 
            'breeding_cycles': '–¶–∏–∫–ª—ã —Ä–∞–∑–≤–µ–¥–µ–Ω–∏—è',
            'financial_reports': '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á—ë—Ç—ã',
            'plex_economy': '–≠–∫–æ–Ω–æ–º–∏–∫–∞ PLEX',
            'partner_stats': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤'
        };
        
        this.kpis = {
            totalInvestments: { value: 1250000, change: 15.2 },
            activeRabbits: { value: 387, change: 8.5 },
            completedCycles: { value: 156, change: 22.1 },
            plexInCirculation: { value: 2847561, change: 12.3 },
            monthlyRevenue: { value: 187500, change: 28.7 },
            partnerCommissions: { value: 47250, change: 31.4 }
        };
        
        this.init();
    }

    init() {
        this.initializeCharts();
        this.loadAnalyticsData();
        this.renderDashboard();
        this.startRealTimeUpdates();
        console.log('üìä Analytics Dashboard initialized');
    }

    renderDashboard() {
        const container = document.getElementById('analytics-dashboard');
        if (!container) return;

        container.innerHTML = `
            <div class="analytics-dashboard">
                <div class="dashboard-header">
                    <h1>üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥</h1>
                    <div class="time-filters">
                        <button class="time-filter active" data-period="24h">24—á</button>
                        <button class="time-filter" data-period="7d">7–¥</button>
                        <button class="time-filter" data-period="30d">30–¥</button>
                        <button class="time-filter" data-period="90d">90–¥</button>
                    </div>
                </div>

                <div class="kpi-grid">
                    ${Object.entries(this.kpis).map(([key, data]) => `
                        <div class="kpi-card">
                            <div class="kpi-header">
                                <h3>${this.getKpiTitle(key)}</h3>
                                <span class="kpi-change ${data.change > 0 ? 'positive' : 'negative'}">
                                    ${data.change > 0 ? '+' : ''}${data.change}%
                                </span>
                            </div>
                            <div class="kpi-value">${this.formatKpiValue(key, data.value)}</div>
                        </div>
                    `).join('')}
                </div>

                <div class="charts-grid">
                    <div class="chart-card large">
                        <h3>üí∞ –î–∏–Ω–∞–º–∏–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π</h3>
                        <canvas id="investments-chart"></canvas>
                    </div>
                    
                    <div class="chart-card">
                        <h3>üê∞ –°—Ç–∞—Ç—É—Å –∫—Ä–æ–ª–∏–∫–æ–≤</h3>
                        <canvas id="rabbits-status-chart"></canvas>
                    </div>

                    <div class="chart-card">
                        <h3>ü™ô PLEX —ç–∫–æ–Ω–æ–º–∏–∫–∞</h3>
                        <canvas id="plex-chart"></canvas>
                    </div>

                    <div class="chart-card large">
                        <h3>üìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ –∫—Ä—É–≥–∞–º</h3>
                        <canvas id="rounds-performance-chart"></canvas>
                    </div>
                </div>

                <div class="reports-section">
                    <h2>üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã</h2>
                    <div class="reports-grid">
                        ${Object.entries(this.reportTypes).map(([key, title]) => `
                            <div class="report-card" onclick="generateReport('${key}')">
                                <div class="report-icon">${this.getReportIcon(key)}</div>
                                <h4>${title}</h4>
                                <p>${this.getReportDescription(key)}</p>
                                <div class="report-actions">
                                    <button class="btn btn-outline btn-small">–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å</button>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            </div>
        `;

        this.initializeChartElements();
    }

    getKpiTitle(key) {
        const titles = {
            totalInvestments: 'üí∞ –û–±—â–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏',
            activeRabbits: 'üê∞ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫—Ä–æ–ª–∏–∫–∏', 
            completedCycles: 'üîÑ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã',
            plexInCirculation: 'ü™ô PLEX –≤ –æ–±–æ—Ä–æ—Ç–µ',
            monthlyRevenue: 'üìä –ú–µ—Å—è—á–Ω–∞—è –≤—ã—Ä—É—á–∫–∞',
            partnerCommissions: 'ü§ù –ö–æ–º–∏—Å—Å–∏–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤'
        };
        return titles[key] || key;
    }

    formatKpiValue(key, value) {
        switch(key) {
            case 'totalInvestments':
            case 'monthlyRevenue': 
            case 'partnerCommissions':
                return '$' + value.toLocaleString();
            case 'plexInCirculation':
                return value.toLocaleString() + ' PLEX';
            default:
                return value.toLocaleString();
        }
    }

    getReportIcon(type) {
        const icons = {
            'farm_performance': 'üè°',
            'investor_analytics': 'üë•',
            'breeding_cycles': 'üîÑ', 
            'financial_reports': 'üí∞',
            'plex_economy': 'ü™ô',
            'partner_stats': 'ü§ù'
        };
        return icons[type] || 'üìä';
    }

    getReportDescription(type) {
        const descriptions = {
            'farm_performance': '–ó–¥–æ—Ä–æ–≤—å–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö, –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –∑–∞—Ç—Ä–∞—Ç—ã',
            'investor_analytics': '–ü–æ–≤–µ–¥–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤, –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å, —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è',
            'breeding_cycles': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏–∫–ª–æ–≤, –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–º—Å—Ç–≤–∞',
            'financial_reports': 'P&L, –¥–µ–Ω–µ–∂–Ω—ã–µ –ø–æ—Ç–æ–∫–∏, –ø—Ä–æ–≥–Ω–æ–∑—ã',
            'plex_economy': '–¢–æ–∫–µ–Ω–æ–º–∏–∫–∞, –æ–±–º–µ–Ω—ã, —Å–∂–∏–≥–∞–Ω–∏–µ',
            'partner_stats': '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤, –∫–æ–º–∏—Å—Å–∏–∏'
        };
        return descriptions[type] || '–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑';
    }

    initializeChartElements() {
        // –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        this.createInvestmentsChart();
        
        // –°—Ç–∞—Ç—É—Å –∫—Ä–æ–ª–∏–∫–æ–≤ (–ø–æ–Ω—á–∏–∫)
        this.createRabbitsStatusChart();
        
        // PLEX —ç–∫–æ–Ω–æ–º–∏–∫–∞
        this.createPlexChart();
        
        // –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ –∫—Ä—É–≥–∞–º
        this.createRoundsChart();
    }

    createInvestmentsChart() {
        const ctx = document.getElementById('investments-chart');
        if (!ctx) return;

        // –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        const data = {
            labels: ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω'],
            datasets: [{
                label: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ (USDT)',
                data: [125000, 189000, 267000, 345000, 412000, 567000],
                borderColor: '#10b981',
                backgroundColor: 'rgba(16, 185, 129, 0.1)',
                fill: true,
                tension: 0.4
            }]
        };

        console.log('üìä Investments chart data:', data);
    }

    createRabbitsStatusChart() {
        const data = {
            labels: ['–ê–∫—Ç–∏–≤–Ω—ã–µ', '–í —Ä–∞–∑–≤–µ–¥–µ–Ω–∏–∏', '–û—Ç–¥—ã—Ö–∞—é—Ç', '–ú–æ–ª–æ–¥–Ω—è–∫'],
            datasets: [{
                data: [156, 89, 67, 75],
                backgroundColor: ['#10b981', '#f59e0b', '#8b5cf6', '#06b6d4']
            }]
        };

        console.log('üê∞ Rabbits status chart:', data);
    }

    createPlexChart() {
        const data = {
            labels: ['–ù–∞—á–∏—Å–ª–µ–Ω–æ', '–í —Å—Ç–µ–π–∫–∏–Ω–≥–µ', '–û–±–º–µ–Ω–µ–Ω–æ', '–°–æ–∂–∂–µ–Ω–æ'],
            datasets: [{
                data: [2847561, 450000, 890000, 156000],
                backgroundColor: ['#10b981', '#f59e0b', '#ef4444', '#6b7280']
            }]
        };

        console.log('ü™ô PLEX chart data:', data);
    }

    createRoundsChart() {
        const data = {
            labels: ['–ö—Ä—É–≥ –ê', '–ö—Ä—É–≥ –ë'],
            datasets: [
                {
                    label: '–°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)',
                    data: [24.5, 31.8],
                    backgroundColor: ['#3b82f6', '#8b5cf6']
                },
                {
                    label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤',
                    data: [234, 67],
                    backgroundColor: ['#06b6d4', '#f59e0b']
                }
            ]
        };

        console.log('üìà Rounds performance:', data);
    }

    generateReport(type) {
        console.log(`Generating ${type} report...`);
        
        const reportData = this.getReportData(type);
        const reportHtml = this.formatReport(type, reportData);
        
        // –°–æ–∑–¥–∞—ë–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –æ—Ç—á—ë—Ç–æ–º
        this.showReportModal(type, reportHtml);
        
        // –¢—Ä–µ–∫–∏–Ω–≥
        if (window.analytics) {
            window.analytics.trackEvent('report_generated', {
                event_category: 'analytics',
                report_type: type
            });
        }
    }

    getReportData(type) {
        // –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–∞
        const mockData = {
            'farm_performance': {
                healthScore: 94.2,
                productivityIndex: 87.5,
                operatingCosts: 45000,
                veterinaryCosts: 8500,
                feedEfficiency: 92.1
            },
            'investor_analytics': {
                totalInvestors: 301,
                averageInvestment: 4150,
                retentionRate: 89.3,
                profitabilitySegments: {
                    high: 67,
                    medium: 156,
                    low: 78
                }
            }
        };
        
        return mockData[type] || {};
    }

    formatReport(type, data) {
        const title = this.reportTypes[type];
        
        return `
            <div class="report-content">
                <div class="report-header">
                    <h2>${this.getReportIcon(type)} ${title}</h2>
                    <div class="report-meta">
                        <span>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${new Date().toLocaleString('ru-RU')}</span>
                    </div>
                </div>
                
                <div class="report-summary">
                    <h3>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</h3>
                    ${Object.entries(data).map(([key, value]) => `
                        <div class="metric-row">
                            <span class="metric-label">${this.formatMetricLabel(key)}</span>
                            <span class="metric-value">${this.formatMetricValue(key, value)}</span>
                        </div>
                    `).join('')}
                </div>
                
                <div class="report-actions">
                    <button onclick="downloadReport('${type}')" class="btn btn-primary">
                        üìÑ –°–∫–∞—á–∞—Ç—å PDF
                    </button>
                    <button onclick="emailReport('${type}')" class="btn btn-outline">
                        üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ email
                    </button>
                </div>
            </div>
        `;
    }

    showReportModal(type, content) {
        // –°–æ–∑–¥–∞—ë–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'report-modal';
        modal.innerHTML = `
            <div class="modal-overlay" onclick="closeReportModal()"></div>
            <div class="modal-content">
                <button class="modal-close" onclick="closeReportModal()">√ó</button>
                ${content}
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        window.closeReportModal = () => {
            modal.remove();
            delete window.closeReportModal;
        };
    }

    formatMetricLabel(key) {
        const labels = {
            healthScore: '–ò–Ω–¥–µ–∫—Å –∑–¥–æ—Ä–æ–≤—å—è',
            productivityIndex: '–ò–Ω–¥–µ–∫—Å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
            operatingCosts: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
            veterinaryCosts: '–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
            feedEfficiency: '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ—Ä–º–æ–≤',
            totalInvestors: '–í—Å–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤',
            averageInvestment: '–°—Ä–µ–¥–Ω—è—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è',
            retentionRate: '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–¥–µ—Ä–∂–∞–Ω–∏—è'
        };
        return labels[key] || key;
    }

    formatMetricValue(key, value) {
        if (key.includes('Rate') || key.includes('Score') || key.includes('Index') || key.includes('Efficiency')) {
            return value + '%';
        }
        if (key.includes('Cost') || key.includes('Investment')) {
            return '$' + value.toLocaleString();
        }
        return value.toLocaleString();
    }

    startRealTimeUpdates() {
        setInterval(() => {
            this.updateKPIs();
        }, 30000); // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    }

    updateKPIs() {
        // –°–∏–º—É–ª—è—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è KPI
        Object.keys(this.kpis).forEach(key => {
            const randomChange = (Math.random() - 0.5) * 2; // ¬±1%
            this.kpis[key].value *= (1 + randomChange / 100);
            this.kpis[key].change = randomChange;
        });
        
        console.log('üìä KPIs updated');
    }

    initializeCharts() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        console.log('Initializing chart library...');
    }

    loadAnalyticsData() {
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        console.log('Loading analytics data...');
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞
window.generateReport = (type) => {
    window.analyticsDashboard.generateReport(type);
};

window.downloadReport = (type) => {
    console.log(`Downloading ${type} report as PDF...`);
    alert('–û—Ç—á—ë—Ç –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.');
};

window.emailReport = (type) => {
    const email = prompt('–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞:');
    if (email) {
        console.log(`Emailing ${type} report to ${email}...`);
        alert(`–û—Ç—á—ë—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${email} –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.`);
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
window.analyticsDashboard = new AnalyticsDashboard();

console.log('üìä Analytics Dashboard loaded');