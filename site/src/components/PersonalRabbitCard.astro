---
export interface Props {
  name: string;
  gender: 'male' | 'female';
  breed: string;
  status: 'feeding' | 'breeding' | 'resting' | 'observation';
  price: number;
  owner: string;
  offspring: number;
}

const { name, gender, breed, status, price, owner, offspring } = Astro.props;

const genderIcon = gender === 'male' ? '' : '';
const genderText = gender === 'male' ? 'Самец' : 'Самка';
const statusEmoji = {
  feeding: '',
  breeding: '', 
  resting: '',
  observation: ''
};
const priceMultiplier = gender === 'male' ? 1.2 : 1.0; // Самцы дороже
const finalPrice = Math.round(price * priceMultiplier);
---

<div class="personal-rabbit-card">
  <div class="rabbit-header">
    <h3 class="rabbit-name">{name} {genderIcon}</h3>
    <div class="rabbit-breed">{breed}</div>
  </div>
  
  <div class="rabbit-status">
    <span class="status-icon">{statusEmoji[status]}</span>
    <span class="status-text">
      {status === 'feeding' && 'Кормление'}
      {status === 'breeding' && 'Размножение'}
      {status === 'resting' && 'Отдых'}
      {status === 'observation' && 'Наблюдение'}
    </span>
  </div>
  
  <div class="rabbit-info">
    <div class="info-row">
      <span>Владелец:</span>
      <span>{owner}</span>
    </div>
    <div class="info-row">
      <span>Потомство:</span>
      <span>{offspring} раз</span>
    </div>
    <div class="info-row">
      <span>Цена:</span>
      <span class="price">{finalPrice.toLocaleString('ru-RU')} ₽</span>
    </div>
  </div>
  
  <div class="rabbit-actions">
    <button class="btn btn-sm btn-outline rabbit-action" data-action="visit">
       Проведать
    </button>
    <button class="btn btn-sm btn-outline rabbit-action" data-action="treat">
       Угостить
    </button>
    <button class="btn btn-sm btn-primary rabbit-action" data-action="talk">
       Поговорить
    </button>
  </div>
</div>

<style>
.personal-rabbit-card {
  background: white;
  border-radius: 16px;
  padding: 1.5rem;
  box-shadow: 0 4px 16px rgba(0,0,0,0.1);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.personal-rabbit-card:hover {
  transform: translateY(-4px);
  box-shadow: 0 8px 24px rgba(0,0,0,0.15);
}

.rabbit-header {
  text-align: center;
  margin-bottom: 1rem;
}

.rabbit-name {
  font-size: 1.25rem;
  font-weight: 600;
  margin-bottom: 0.25rem;
}

.rabbit-breed {
  color: #666;
  font-size: 0.9rem;
}

.rabbit-status {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  margin-bottom: 1rem;
  padding: 0.5rem;
  background: #f8f9fa;
  border-radius: 8px;
}

.status-icon {
  font-size: 1.2rem;
}

.rabbit-info {
  margin-bottom: 1rem;
}

.info-row {
  display: flex;
  justify-content: space-between;
  margin-bottom: 0.5rem;
}

.price {
  font-weight: 600;
  color: var(--color-primary);
}

.rabbit-actions {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  gap: 0.5rem;
}

.rabbit-action {
  font-size: 0.8rem;
  padding: 0.5rem 0.25rem;
}
</style>

<script>
document.addEventListener('click', (e) => {
  if (e.target.matches('.rabbit-action')) {
    const action = e.target.dataset.action;
    const rabbitName = e.target.closest('.personal-rabbit-card').querySelector('.rabbit-name').textContent.split(' ')[0];
    
    // Пока заглушки - в будущем будут реальные функции
    const messages = {
      visit:  Вы проведали ! Кролик выглядит здоровым и активным.,
      treat:  Вы угостили  морковкой! Кролик очень рад.,
      talk:  Вы поговорили с . Кролик внимательно слушал и отвечал носиком.
    };
    
    if (window.showToast) {
      window.showToast(messages[action], 'success');
    } else {
      alert(messages[action]);
    }
    
    // Трекинг
    if (window.analytics) {
      window.analytics.trackEvent('rabbit_interaction', {
        action: action,
        rabbit: rabbitName
      });
    }
  }
});
</script>
