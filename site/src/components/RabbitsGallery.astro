---
// Rabbits Gallery component with lazy loading and lightbox
import { promises as fs } from 'fs';
import path from 'path';

interface Rabbit {
  src: string;
  w: number;
  h: number;
  tags: string[];
  title: string;
  date: string;
}

let rabbits: Rabbit[] = [];

try {
  const jsonPath = path.join(process.cwd(), 'public/data/rabbits.json');
  const jsonContent = await fs.readFile(jsonPath, 'utf-8');
  rabbits = JSON.parse(jsonContent);
} catch (error) {
  console.error('Error loading rabbits data:', error);
  // Fallback data
  rabbits = [
    {
      src: "/images/photo_2025-09-15_13-17-50.jpg",
      w: 1200,
      h: 800,
      tags: ["самец", "серебристый"],
      title: "Silver",
      date: "2025-09-15"
    }
  ];
}
---

<section id="rabbits-gallery" class="section bg-[var(--bg-secondary)]">
  <div class="container mx-auto px-6">
    <div class="max-w-6xl mx-auto">
      <!-- Section header -->
      <div class="text-center mb-16">
        <h2 class="text-4xl md:text-5xl font-bold mb-6">
          Наши кролики
        </h2>
        <p class="text-xl text-[var(--text-secondary)] max-w-3xl mx-auto">
          Познакомьтесь с нашими племенными кроликами разных пород
        </p>
      </div>

          <!-- Gallery Grid -->
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {rabbits.map((rabbit, index) => (
              <div class="group cursor-pointer" onclick={`openLightbox(${index})`}>
                <div class="aspect-[4/3] overflow-hidden rounded-lg bg-[var(--bg-tertiary)] mb-3">
                  <picture>
                    <source srcset={`${rabbit.src}@480.webp 480w, ${rabbit.src}@960.webp 960w, ${rabbit.src}@1440.webp 1440w`} type="image/webp" />
                    <img
                      src={rabbit.src}
                      sizes="(max-width:640px) 100vw, (max-width:1024px) 50vw, 33vw"
                      alt={`${rabbit.title}`}
                      class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300 ring-1 ring-white/5"
                      loading="lazy"
                      decoding="async"
                    />
                  </picture>
                </div>
            <div class="space-y-2">
              <div class="flex items-center justify-between">
                <h3 class="font-semibold text-[var(--text-primary)]">
                  {rabbit.title}
                </h3>
                <span class="text-xs text-[var(--text-muted)] bg-[var(--bg-tertiary)] px-2 py-1 rounded-full">
                  {rabbit.date}
                </span>
              </div>
              <div class="flex flex-wrap gap-1">
                {rabbit.tags.slice(0, 2).map(tag => (
                  <span class="px-2 py-1 bg-[var(--accent-primary)]/20 text-[var(--accent-primary)] text-xs rounded-full">
                    {tag}
                  </span>
                ))}
              </div>
              <p class="text-sm text-[var(--text-secondary)]">
                {rabbit.tags.join(' • ')}
              </p>
              <p class="text-sm text-[var(--text-muted)]">
                {rabbit.description}
              </p>
            </div>
          </div>
        ))}
      </div>

      <!-- CTA -->
      <div class="text-center mt-12">
        <p class="text-[var(--text-secondary)] mb-6">
          Хотите инвестировать в разведение кроликов?
        </p>
        <a
          href="https://t.me/your_bot"
          class="btn-primary text-lg px-8 py-4 inline-block"
          target="_blank"
          rel="noopener noreferrer"
        >
          Выбрать кролика в боте
        </a>
      </div>
    </div>
  </div>
</section>

<!-- Lightbox Modal (React Island) -->
<div id="lightbox" class="fixed inset-0 bg-black/90 z-50 hidden" onclick="closeLightbox()">
  <div class="absolute inset-0 flex items-center justify-center p-4">
    <div class="relative max-w-4xl max-h-full" onclick="event.stopPropagation()">
      <img id="lightbox-image" src="" alt="" class="max-w-full max-h-full object-contain" />

      <!-- Close button -->
      <button
        onclick="closeLightbox()"
        class="absolute top-4 right-4 text-white text-2xl hover:text-[var(--accent-primary)] transition-colors"
        aria-label="Закрыть"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>

      <!-- Navigation -->
      <button
        onclick="previousImage()"
        class="absolute left-4 top-1/2 -translate-y-1/2 text-white text-3xl hover:text-[var(--accent-primary)] transition-colors"
        aria-label="Предыдущее изображение"
      >
        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      </button>
      <button
        onclick="nextImage()"
        class="absolute right-4 top-1/2 -translate-y-1/2 text-white text-3xl hover:text-[var(--accent-primary)] transition-colors"
        aria-label="Следующее изображение"
      >
        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>

      <!-- Info panel -->
      <div class="absolute bottom-0 left-0 right-0 bg-black/80 text-white p-6">
        <div class="flex justify-between items-center">
          <div id="lightbox-info" class="text-sm"></div>
          <div class="flex gap-2">
            <span id="lightbox-counter" class="text-sm text-[var(--text-secondary)]"></span>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ rabbits }}>
  let currentImageIndex = 0;
  const rabbitsData = rabbits;

  function openLightbox(index) {
    currentImageIndex = index;
    const lightbox = document.getElementById('lightbox');
    const lightboxImage = document.getElementById('lightbox-image');
    const lightboxInfo = document.getElementById('lightbox-info');
    const lightboxCounter = document.getElementById('lightbox-counter');

    const rabbit = rabbits[currentImageIndex];
    lightboxImage.src = rabbit.src;
    lightboxImage.alt = `Кролик ${rabbit.title}`;

    lightboxInfo.innerHTML = `
      <div>
        <h3 class="font-semibold">${rabbit.title}</h3>
        <p class="text-[var(--text-secondary)]">${rabbit.date}</p>
        <div class="flex flex-wrap gap-1 mt-2">
          ${rabbit.tags.map(tag => `<span class="px-2 py-1 bg-[var(--accent-primary)]/20 text-[var(--accent-primary)] text-xs rounded-full">${tag}</span>`).join('')}
        </div>
      </div>
    `;

    lightboxCounter.textContent = `${currentImageIndex + 1} / ${rabbits.length}`;
    lightbox.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
  }

  function closeLightbox() {
    const lightbox = document.getElementById('lightbox');
    lightbox.classList.add('hidden');
    document.body.style.overflow = '';
  }

  function nextImage() {
    currentImageIndex = (currentImageIndex + 1) % rabbits.length;
    openLightbox(currentImageIndex);
  }

  function previousImage() {
    currentImageIndex = (currentImageIndex - 1 + rabbits.length) % rabbits.length;
    openLightbox(currentImageIndex);
  }

  // Keyboard navigation
  document.addEventListener('keydown', (e) => {
    if (document.getElementById('lightbox').classList.contains('hidden')) return;

    if (e.key === 'Escape') closeLightbox();
    if (e.key === 'ArrowRight') nextImage();
    if (e.key === 'ArrowLeft') previousImage();
  });

  // Respect user's motion preferences
  if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
    // Disable smooth transitions for users who prefer reduced motion
    const style = document.createElement('style');
    style.textContent = `
      .card:hover img {
        transform: none !important;
      }
    `;
    document.head.appendChild(style);
  }
</script>

<style>
  .card {
    background-color: var(--bg-tertiary);
    border-radius: var(--radius-xl);
    padding: 1.5rem;
    border: 1px solid var(--border-primary);
    transition: all 0.3s ease;
  }

  .card:hover {
    border-color: var(--border-secondary);
    transform: translateY(-4px);
    box-shadow: var(--shadow-lg);
  }

  /* Loading animation for images */
  img[loading="lazy"] {
    opacity: 0;
    transition: opacity 0.3s;
  }

  img[loading="lazy"].loaded {
    opacity: 1;
  }

  /* Accessibility */
  .card:focus {
    outline: 2px solid var(--accent-primary);
    outline-offset: 2px;
  }

  /* Modal animations */
  #lightbox {
    animation: fadeIn 0.3s ease-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
</style>
