// –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DEXRabbit –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É
console.log('üéØ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DEXRabbit –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É...');

class ProductionReadinessTest {
    constructor() {
        this.testResults = {
            critical: [],
            warnings: [],
            success: [],
            score: 0
        };
        this.startTime = performance.now();
    }

    async runCompleteTest() {
        console.log('\nüè• === –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–†–û–î–ê–ö–®–ù –ì–û–¢–û–í–ù–û–°–¢–ò ===\n');
        
        // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ç–µ—Å—Ç—ã
        await this.testCriticalIssues();
        
        // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
        await this.testFunctionality();
        
        // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        await this.testPerformance();
        
        // SEO –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        await this.testSEOAndAccessibility();
        
        // PWA –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
        await this.testPWA();
        
        // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        await this.testIntegrations();
        
        this.calculateFinalScore();
        this.generateFinalReport();
    }

    async testCriticalIssues() {
        console.log('üö® –¢–µ—Å—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º...');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ title
        const title = document.title;
        if (title && !title.includes('  ') && title.length > 10) {
            this.success('HTML', 'Title –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–µ–∑ –¥–≤–æ–π–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤');
        } else {
            this.critical('HTML', '–ü—Ä–æ–±–ª–µ–º—ã —Å title —Ç–µ–≥–æ–º');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ meta description
        const metaDesc = document.querySelector('meta[name="description"]');
        if (metaDesc && !metaDesc.content.startsWith(' ') && metaDesc.content.length > 50) {
            this.success('HTML', 'Meta description –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
        } else {
            this.critical('HTML', '–ü—Ä–æ–±–ª–µ–º—ã —Å meta description');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        const sections = document.querySelectorAll('section');
        const uniqueContent = new Set();
        let duplicates = 0;
        
        sections.forEach(section => {
            const contentHash = this.hashContent(section.innerHTML);
            if (uniqueContent.has(contentHash)) {
                duplicates++;
            } else {
                uniqueContent.add(contentHash);
            }
        });
        
        if (duplicates === 0) {
            this.success('HTML', '–ù–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
        } else {
            this.critical('HTML', `–ù–∞–π–¥–µ–Ω–æ ${duplicates} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–π`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ H1 –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        const h1Count = document.querySelectorAll('h1').length;
        if (h1Count === 1) {
            this.success('SEO', '–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π H1 –∑–∞–≥–æ–ª–æ–≤–æ–∫');
        } else {
            this.critical('SEO', `–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ H1: ${h1Count}`);
        }
    }

    async testFunctionality() {
        console.log('‚öôÔ∏è –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...');
        
        // –¢–µ—Å—Ç —Å—Å—ã–ª–æ–∫
        const links = document.querySelectorAll('a[href]');
        let workingLinks = 0;
        let brokenLinks = 0;
        
        for (const link of Array.from(links).slice(0, 5)) { // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Å—ã–ª–æ–∫
            if (link.href.startsWith('http')) {
                try {
                    // –î–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
                    if (link.href.includes('t.me') || link.href.includes('geckoterminal')) {
                        workingLinks++;
                    }
                } catch (e) {
                    brokenLinks++;
                }
            } else {
                workingLinks++;
            }
        }
        
        if (brokenLinks === 0) {
            this.success('Functionality', '–í—Å–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç');
        } else {
            this.warning('Functionality', `${brokenLinks} —Å–ª–æ–º–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫`);
        }
        
        // –¢–µ—Å—Ç —Ñ–æ—Ä–º
        const forms = document.querySelectorAll('form');
        if (forms.length > 0) {
            this.success('Functionality', `${forms.length} —Ñ–æ—Ä–º –Ω–∞–π–¥–µ–Ω–æ`);
        }
        
        // –¢–µ—Å—Ç PLEX –≤–∏–¥–∂–µ—Ç–∞
        const plexWidget = document.querySelector('#geckoterminal-embed');
        if (plexWidget && plexWidget.src.includes('geckoterminal.com')) {
            this.success('Integrations', 'PLEX –≤–∏–¥–∂–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        } else {
            this.warning('Integrations', 'PLEX –≤–∏–¥–∂–µ—Ç —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏');
        }
    }

    async testPerformance() {
        console.log('‚ö° –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
        
        // –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
        if (performance.timing) {
            const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;
            if (loadTime < 3000) {
                this.success('Performance', `–ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: ${loadTime}–º—Å`);
            } else if (loadTime < 5000) {
                this.warning('Performance', `–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏: ${loadTime}–º—Å`);
            } else {
                this.critical('Performance', `–ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: ${loadTime}–º—Å`);
            }
        }
        
        // –†–∞–∑–º–µ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤
        if (performance.getEntriesByType) {
            const resources = performance.getEntriesByType('resource');
            const totalSize = resources.reduce((sum, resource) => sum + (resource.transferSize || 0), 0);
            
            if (totalSize < 2 * 1024 * 1024) { // < 2MB
                this.success('Performance', `–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤: ${(totalSize / 1024 / 1024).toFixed(1)}MB`);
            } else if (totalSize < 5 * 1024 * 1024) { // < 5MB
                this.warning('Performance', `–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤: ${(totalSize / 1024 / 1024).toFixed(1)}MB`);
            } else {
                this.critical('Performance', `–ë–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤: ${(totalSize / 1024 / 1024).toFixed(1)}MB`);
            }
        }
    }

    async testSEOAndAccessibility() {
        console.log('üîç –¢–µ—Å—Ç SEO –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏...');
        
        // OpenGraph —Ç–µ–≥–∏
        const ogTags = ['og:title', 'og:description', 'og:type'];
        let ogCount = 0;
        
        ogTags.forEach(tag => {
            if (document.querySelector(`meta[property="${tag}"]`)) {
                ogCount++;
            }
        });
        
        if (ogCount === ogTags.length) {
            this.success('SEO', '–í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ OpenGraph —Ç–µ–≥–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        } else {
            this.warning('SEO', `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ${ogTags.length - ogCount} OpenGraph —Ç–µ–≥–æ–≤`);
        }
        
        // Alt –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        const images = document.querySelectorAll('img');
        const imagesWithoutAlt = document.querySelectorAll('img:not([alt])');
        
        if (imagesWithoutAlt.length === 0) {
            this.success('Accessibility', '–í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ—é—Ç alt –∞—Ç—Ä–∏–±—É—Ç—ã');
        } else {
            this.warning('Accessibility', `${imagesWithoutAlt.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ alt`);
        }
        
        // –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const jsonLdScripts = document.querySelectorAll('script[type="application/ld+json"]');
        if (jsonLdScripts.length > 0) {
            this.success('SEO', '–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        } else {
            this.warning('SEO', '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        }
    }

    async testPWA() {
        console.log('üì± –¢–µ—Å—Ç PWA –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏...');
        
        // –ú–∞–Ω–∏—Ñ–µ—Å—Ç
        try {
            const manifestResponse = await fetch('/manifest.webmanifest');
            if (manifestResponse.ok) {
                const manifest = await manifestResponse.json();
                if (manifest.name && manifest.icons && manifest.start_url) {
                    this.success('PWA', '–ú–∞–Ω–∏—Ñ–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
                } else {
                    this.warning('PWA', '–ú–∞–Ω–∏—Ñ–µ—Å—Ç –Ω–µ–ø–æ–ª–Ω—ã–π');
                }
            } else {
                this.critical('PWA', '–ú–∞–Ω–∏—Ñ–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
        } catch (e) {
            this.critical('PWA', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞');
        }
        
        // Service Worker
        if ('serviceWorker' in navigator) {
            try {
                const registration = await navigator.serviceWorker.getRegistration();
                if (registration) {
                    this.success('PWA', 'Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
                } else {
                    this.warning('PWA', 'Service Worker –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
                }
            } catch (e) {
                this.warning('PWA', '–ü—Ä–æ–±–ª–µ–º—ã —Å Service Worker');
            }
        }
        
        // HTTPS
        if (location.protocol === 'https:' || location.hostname === 'localhost') {
            this.success('PWA', 'HTTPS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
        } else {
            this.critical('PWA', '–¢—Ä–µ–±—É–µ—Ç—Å—è HTTPS');
        }
    }

    async testIntegrations() {
        console.log('üîå –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...');
        
        // Telegram —Å—Å—ã–ª–∫–∏
        const telegramLinks = document.querySelectorAll('a[href*="t.me"]');
        if (telegramLinks.length >= 2) {
            this.success('Integrations', `${telegramLinks.length} Telegram —Å—Å—ã–ª–æ–∫`);
        } else {
            this.warning('Integrations', '–ú–∞–ª–æ Telegram —Å—Å—ã–ª–æ–∫');
        }
        
        // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        if (window.analytics && typeof window.analytics.trackEvent === 'function') {
            this.success('Integrations', '–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–∞');
        } else {
            this.warning('Integrations', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
        }
        
        // Production Optimizer
        if (window.ProductionOptimizer || document.querySelector('script[src*="production-optimizer"]')) {
            this.success('Optimization', 'Production Optimizer –ø–æ–¥–∫–ª—é—á–µ–Ω');
        } else {
            this.warning('Optimization', 'Production Optimizer –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }
    }

    // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    critical(category, message) {
        this.testResults.critical.push({ category, message });
        console.log(`üö® –ö–†–ò–¢–ò–ß–ù–û [${category}]: ${message}`);
    }

    warning(category, message) {
        this.testResults.warnings.push({ category, message });
        console.log(`‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï [${category}]: ${message}`);
    }

    success(category, message) {
        this.testResults.success.push({ category, message });
        console.log(`‚úÖ –£–°–ü–ï–®–ù–û [${category}]: ${message}`);
    }

    calculateFinalScore() {
        const successPoints = this.testResults.success.length * 10;
        const warningPenalty = this.testResults.warnings.length * 3;
        const criticalPenalty = this.testResults.critical.length * 15;
        
        this.testResults.score = Math.max(0, Math.min(100, successPoints - warningPenalty - criticalPenalty));
    }

    generateFinalReport() {
        const endTime = performance.now();
        const testDuration = Math.round(endTime - this.startTime);
        
        console.log('\nüèÜ === –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢ –ì–û–¢–û–í–ù–û–°–¢–ò –ö –ü–†–û–î–ê–ö–®–ï–ù–£ ===\n');
        
        console.log(`‚è±Ô∏è –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${testDuration}–º—Å`);
        console.log(`üéØ –ò–¢–û–ì–û–í–´–ô –ë–ê–õ–õ: ${this.testResults.score}/100\n`);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–û–í:');
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${this.testResults.success.length}`);
        console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${this.testResults.warnings.length}`);
        console.log(`üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: ${this.testResults.critical.length}\n`);
        
        // –û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        if (this.testResults.score >= 95) {
            console.log('üéâ –ü–†–ï–í–û–°–•–û–î–ù–û! –°–∞–π—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!');
            console.log('üöÄ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫!');
        } else if (this.testResults.score >= 85) {
            console.log('‚úÖ –û–¢–õ–ò–ß–ù–û! –°–∞–π—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!');
            console.log('üí° –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è');
        } else if (this.testResults.score >= 75) {
            console.log('‚ö†Ô∏è –•–û–†–û–®–û! –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É');
            console.log('üîß –¢—Ä–µ–±—É—é—Ç—Å—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
        } else if (this.testResults.score >= 60) {
            console.log('üìù –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
            console.log('‚ö° –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã');
        } else {
            console.log('üõë –ù–ï–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! –ù–µ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É');
            console.log('üîß –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞');
        }
        
        // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        if (this.testResults.critical.length > 0) {
            console.log('\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
            this.testResults.critical.forEach((issue, index) => {
                console.log(`${index + 1}. [${issue.category}] ${issue.message}`);
            });
        }
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        if (this.testResults.warnings.length > 0) {
            console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:');
            this.testResults.warnings.slice(0, 5).forEach((warning, index) => {
                console.log(`${index + 1}. [${warning.category}] ${warning.message}`);
            });
        }
        
        console.log('\nüîó –ü–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ window.finalTestResults');
        window.finalTestResults = this.testResults;
        
        // –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
        console.log('\nüìã –§–ò–ù–ê–õ–¨–ù–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
        if (this.testResults.critical.length === 0) {
            console.log('üéØ –ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±–ª–æ–∫–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞');
            console.log('üöÄ –ü—Ä–æ–µ–∫—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É');
            console.log('‚ú® DEXRabbit –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ');
        } else {
            console.log('‚õî –ï—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –∑–∞–ø—É—Å–∫');
            console.log('üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º –≤ –ø—Ä–æ–¥–∞–∫—à–Ω');
        }
    }

    hashContent(content) {
        let hash = 0;
        const cleanContent = content.replace(/\s+/g, ' ').trim();
        for (let i = 0; i < cleanContent.length; i++) {
            const char = cleanContent.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash;
        }
        return hash;
    }
}

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
const finalTest = new ProductionReadinessTest();

if (document.readyState === 'complete') {
    finalTest.runCompleteTest();
} else {
    window.addEventListener('load', () => {
        setTimeout(() => finalTest.runCompleteTest(), 2000);
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ProductionReadinessTest;
}