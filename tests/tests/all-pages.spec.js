import { test, expect } from '@playwright/test';

const BASE_URL = 'https://xn--80apagbbfxgmuj4j.site';

const pages = [
  { url: '/', title: '–ö—É–ø–∏—Ç—å–ö—Ä–æ–ª–∏–∫–∞ ‚Äî –ñ–∏–≤—ã–µ –∫—Ä–æ–ª–∏–∫–∏ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ –†–æ—Å—Å–∏–∏', expectedElements: ['h1', '.hero-section', '.stats-section'] },
  { url: '/restaurants.html', title: '–†–µ—Å—Ç–æ—Ä–∞–Ω–∞–º ‚Äî –ö—É–ø–∏—Ç—å–ö—Ä–æ–ª–∏–∫–∞', expectedElements: ['h1', '.partnership-levels', '.pricing-table'] },
  { url: '/gifts.html', title: '–ü–æ–¥–∞—Ä–∫–∏ ‚Äî –ö—É–ø–∏—Ç—å–ö—Ä–æ–ª–∏–∫–∞', expectedElements: ['h1', '.gift-packages', '.gift-calculator'] },
  { url: '/investment-model.html', title: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å ‚Äî –ö—É–ø–∏—Ç—å–ö—Ä–æ–ª–∏–∫–∞', expectedElements: ['h1', '.investment-calculator', '.token-info'] },
  { url: '/development.html', title: '–†–∞–∑–≤–∏—Ç–∏–µ –∏ –ø–ª–∞–Ω—ã ‚Äî –ö—É–ø–∏—Ç—å–ö—Ä–æ–ª–∏–∫–∞', expectedElements: ['h1', '.roadmap', '.current-stats'] },
  { url: '/breeding.html', title: '–ü–ª–µ–º–µ–Ω–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å ‚Äî –ö—É–ø–∏—Ç—å–ö—Ä–æ–ª–∏–∫–∞', expectedElements: ['h1', '.breeds-catalog', '.breeding-programs'] },
  { url: '/logistics.html', title: '–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏ —Ä–µ–≥–∏–æ–Ω—ã ‚Äî –ö—É–ø–∏—Ç—å–ö—Ä–æ–ª–∏–∫–∞', expectedElements: ['h1', '.delivery-zones', '.delivery-calculator'] },
  { url: '/contacts.html', title: '–ö–æ–Ω—Ç–∞–∫—Ç—ã ‚Äî –ö—É–ø–∏—Ç—å–ö—Ä–æ–ª–∏–∫–∞', expectedElements: ['h1', '.contact-info', '.contact-form'] }
];

test.describe('üåê All Pages Testing', () => {
  pages.forEach(({ url, title, expectedElements }) => {
    test(`üìÑ Page: ${url}`, async ({ page }) => {
      console.log(`üß™ Testing page: ${BASE_URL}${url}`);
      
      // –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
      const response = await page.goto(`${BASE_URL}${url}`);
      expect(response.status()).toBe(200);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ title
      await expect(page).toHaveTitle(new RegExp(title.split('‚Äî')[0].trim(), 'i'));
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      for (const element of expectedElements) {
        await expect(page.locator(element).first()).toBeVisible({ timeout: 10000 });
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è JavaScript –æ—à–∏–±–æ–∫
      const errors = [];
      page.on('pageerror', error => errors.push(error.message));
      await page.waitForTimeout(2000);
      
      if (errors.length > 0) {
        console.warn(`‚ö†Ô∏è JavaScript errors on ${url}:`, errors);
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞-—Ç–µ–≥–æ–≤
      const description = await page.locator('meta[name="description"]').getAttribute('content');
      expect(description).toBeTruthy();
      expect(description.length).toBeGreaterThan(50);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏ (mobile view)
      await page.setViewportSize({ width: 375, height: 667 });
      await page.waitForTimeout(1000);
      
      const mainContent = page.locator('main, .container').first();
      await expect(mainContent).toBeVisible();
      
      // –í–æ–∑–≤—Ä–∞—Ç –∫ desktop
      await page.setViewportSize({ width: 1200, height: 800 });
      
      console.log(`‚úÖ Page ${url} passed all tests`);
    });
  });
  
  test('üîó Navigation Links', async ({ page }) => {
    await page.goto(`${BASE_URL}/`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    const navLinks = [
      { text: '–†–µ—Å—Ç–æ—Ä–∞–Ω–∞–º', href: '/restaurants' },
      { text: '–ü–æ–¥–∞—Ä–∫–∏', href: '/gifts' },
      { text: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', href: '/investment-model' },
      { text: '–ö–æ–Ω—Ç–∞–∫—Ç—ã', href: '/contacts' }
    ];
    
    for (const link of navLinks) {
      const linkElement = page.locator(`a[href*="${link.href}"], a:has-text("${link.text}")`);
      if (await linkElement.count() > 0) {
        await expect(linkElement.first()).toBeVisible();
      }
    }
    
    console.log('‚úÖ Navigation links are working');
  });
  
  test('üì± Mobile Responsiveness', async ({ page }) => {
    const mobileViewports = [
      { width: 375, height: 667, name: 'iPhone SE' },
      { width: 414, height: 896, name: 'iPhone XR' },
      { width: 360, height: 640, name: 'Android Small' }
    ];
    
    for (const viewport of mobileViewports) {
      await page.setViewportSize(viewport);
      await page.goto(`${BASE_URL}/`);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–ø–æ–ª–Ω—è–µ—Ç —ç–∫—Ä–∞–Ω
      const body = page.locator('body');
      const bodyBox = await body.boundingBox();
      
      expect(bodyBox.width).toBeLessThanOrEqual(viewport.width + 50); // –ù–µ–±–æ–ª—å—à–æ–π –¥–æ–ø—É—Å–∫
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      await expect(page.locator('header')).toBeVisible();
      await expect(page.locator('main')).toBeVisible();
      await expect(page.locator('footer')).toBeVisible();
      
      console.log(`‚úÖ Mobile responsiveness OK for ${viewport.name}`);
    }
  });
  
  test('‚ö° Performance Check', async ({ page }) => {
    await page.goto(`${BASE_URL}/`);
    
    // –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    const startTime = Date.now();
    await page.waitForLoadState('networkidle');
    const loadTime = Date.now() - startTime;
    
    console.log(`‚è±Ô∏è Page load time: ${loadTime}ms`);
    expect(loadTime).toBeLessThan(5000); // –ú–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const images = await page.locator('img').all();
    for (const img of images) {
      const src = await img.getAttribute('src');
      if (src && !src.startsWith('data:')) {
        const response = await page.request.get(src);
        const size = parseInt(response.headers()['content-length'] || '0');
        
        if (size > 500000) { // 500KB
          console.warn(`‚ö†Ô∏è Large image detected: ${src} (${Math.round(size/1024)}KB)`);
        }
      }
    }
    
    console.log('‚úÖ Performance check completed');
  });
});