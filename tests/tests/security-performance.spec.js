import { test, expect } from '@playwright/test';

const BASE_URL = 'https://xn--80apagbbfxgmuj4j.site';

test.describe('üîí Security & Performance Testing', () => {
  
  test('üõ°Ô∏è Security Headers Check', async ({ page }) => {
    const response = await page.goto(`${BASE_URL}/`);
    
    const headers = response.headers();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Content Security Policy
    if (headers['content-security-policy']) {
      console.log('‚úÖ CSP header present:', headers['content-security-policy']);
    } else {
      console.warn('‚ö†Ô∏è CSP header missing');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ X-Frame-Options
    if (headers['x-frame-options']) {
      console.log('‚úÖ X-Frame-Options present:', headers['x-frame-options']);
    } else {
      console.warn('‚ö†Ô∏è X-Frame-Options header missing');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ X-Content-Type-Options
    if (headers['x-content-type-options']) {
      console.log('‚úÖ X-Content-Type-Options present');
    } else {
      console.warn('‚ö†Ô∏è X-Content-Type-Options header missing');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS
    expect(response.url()).toContain('https://');
    console.log('‚úÖ Site uses HTTPS');
  });
  
  test('üö® XSS Protection Test', async ({ page }) => {
    await page.goto(`${BASE_URL}/contacts.html`);
    
    // –ü–æ–ø—ã—Ç–∫–∞ XSS —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–µ—Å—Ç)
    const contactForm = page.locator('#contact-form, .contact-form form').first();
    
    if (await contactForm.count() > 0) {
      const testPayload = '<script>alert("XSS")</script>';
      
      // –ü–æ–ø—ã—Ç–∫–∞ –≤–≤–µ—Å—Ç–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –∫–æ–¥
      await contactForm.locator('input[name="name"]').fill(testPayload);
      await contactForm.locator('textarea[name="message"]').fill(testPayload);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
      const nameValue = await contactForm.locator('input[name="name"]').inputValue();
      expect(nameValue).toBe(testPayload); // –î–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è –∫–∞–∫ —Ç–µ–∫—Å—Ç
      
      console.log('‚úÖ XSS protection check passed');
    }
  });
  
  test('üìä Mixed Content Check', async ({ page }) => {
    const mixedContentWarnings = [];
    const securityErrors = [];
    
    page.on('console', msg => {
      if (msg.type() === 'warning' && msg.text().includes('Mixed Content')) {
        mixedContentWarnings.push(msg.text());
      }
    });
    
    page.on('pageerror', error => {
      if (error.message.includes('Mixed Content')) {
        securityErrors.push(error.message);
      }
    });
    
    await page.goto(`${BASE_URL}/`);
    await page.waitForLoadState('networkidle');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    const resources = await page.evaluate(() => {
      const resources = performance.getEntriesByType('resource');
      return resources.map(resource => ({
        name: resource.name,
        protocol: new URL(resource.name).protocol
      }));
    });
    
    const insecureResources = resources.filter(resource => 
      resource.protocol === 'http:' && 
      !resource.name.includes('localhost') &&
      !resource.name.includes('127.0.0.1')
    );
    
    if (insecureResources.length > 0) {
      console.warn('‚ö†Ô∏è Insecure resources found:', insecureResources);
    } else {
      console.log('‚úÖ No mixed content issues found');
    }
    
    expect(mixedContentWarnings).toHaveLength(0);
    expect(securityErrors).toHaveLength(0);
  });
  
  test('‚ö° Page Load Performance', async ({ page }) => {
    const startTime = Date.now();
    
    await page.goto(`${BASE_URL}/`);
    await page.waitForLoadState('networkidle');
    
    const loadTime = Date.now() - startTime;
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const metrics = await page.evaluate(() => {
      const navigation = performance.getEntriesByType('navigation')[0];
      return {
        domContentLoaded: navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart,
        loadComplete: navigation.loadEventEnd - navigation.loadEventStart,
        firstPaint: performance.getEntriesByType('paint')[0]?.startTime || 0,
        firstContentfulPaint: performance.getEntriesByType('paint')[1]?.startTime || 0
      };
    });
    
    console.log('üìä Performance Metrics:');
    console.log(`‚è±Ô∏è Total Load Time: ${loadTime}ms`);
    console.log(`üìÑ DOM Content Loaded: ${Math.round(metrics.domContentLoaded)}ms`);
    console.log(`üé® First Paint: ${Math.round(metrics.firstPaint)}ms`);
    console.log(`üñºÔ∏è First Contentful Paint: ${Math.round(metrics.firstContentfulPaint)}ms`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–µ–º–ª–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    expect(loadTime).toBeLessThan(10000); // –ú–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥
    expect(metrics.firstContentfulPaint).toBeLessThan(3000); // FCP < 3 —Å–µ–∫—É–Ω–¥
    
    console.log('‚úÖ Performance metrics are acceptable');
  });
  
  test('üíæ Resource Size Analysis', async ({ page }) => {
    await page.goto(`${BASE_URL}/`);
    await page.waitForLoadState('networkidle');
    
    // –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤
    const resources = await page.evaluate(() => {
      return performance.getEntriesByType('resource').map(resource => ({
        name: resource.name,
        size: resource.transferSize || resource.encodedBodySize || 0,
        type: resource.initiatorType
      }));
    });
    
    const totalSize = resources.reduce((sum, resource) => sum + resource.size, 0);
    const imageResources = resources.filter(r => r.type === 'img');
    const cssResources = resources.filter(r => r.type === 'link' || r.name.includes('.css'));
    const jsResources = resources.filter(r => r.type === 'script' || r.name.includes('.js'));
    
    console.log('üì¶ Resource Analysis:');
    console.log(`üìä Total page size: ${Math.round(totalSize / 1024)}KB`);
    console.log(`üñºÔ∏è Images: ${imageResources.length} files`);
    console.log(`üé® CSS: ${cssResources.length} files`);
    console.log(`‚öôÔ∏è JavaScript: ${jsResources.length} files`);
    
    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –±–æ–ª—å—à–∏—Ö —Ä–µ—Å—É—Ä—Å–∞—Ö
    const largeResources = resources.filter(r => r.size > 500000); // > 500KB
    if (largeResources.length > 0) {
      console.warn('‚ö†Ô∏è Large resources detected:');
      largeResources.forEach(resource => {
        console.warn(`  ${resource.name}: ${Math.round(resource.size / 1024)}KB`);
      });
    }
    
    // –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB
    expect(totalSize).toBeLessThan(5000000);
    
    console.log('‚úÖ Resource size analysis completed');
  });
  
  test('üîç SEO Technical Check', async ({ page }) => {
    await page.goto(`${BASE_URL}/`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ title
    const title = await page.title();
    expect(title).toBeTruthy();
    expect(title.length).toBeGreaterThan(10);
    expect(title.length).toBeLessThan(70);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ meta description
    const description = await page.locator('meta[name="description"]').getAttribute('content');
    expect(description).toBeTruthy();
    expect(description.length).toBeGreaterThan(120);
    expect(description.length).toBeLessThan(160);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ h1
    const h1Elements = await page.locator('h1').count();
    expect(h1Elements).toBe(1); // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω H1
    
    const h1Text = await page.locator('h1').first().textContent();
    expect(h1Text).toBeTruthy();
    expect(h1Text.length).toBeGreaterThan(10);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ alt-–∞—Ç—Ä–∏–±—É—Ç–æ–≤ —É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const images = await page.locator('img').all();
    const imagesWithoutAlt = [];
    
    for (const img of images) {
      const alt = await img.getAttribute('alt');
      const src = await img.getAttribute('src');
      
      if (!alt && src && !src.startsWith('data:')) {
        imagesWithoutAlt.push(src);
      }
    }
    
    if (imagesWithoutAlt.length > 0) {
      console.warn('‚ö†Ô∏è Images without alt attributes:', imagesWithoutAlt);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ canonical URL
    const canonical = await page.locator('link[rel="canonical"]').getAttribute('href');
    if (canonical) {
      expect(canonical).toContain('https://');
      console.log('‚úÖ Canonical URL present:', canonical);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ meta robots
    const robots = await page.locator('meta[name="robots"]').getAttribute('content');
    if (robots) {
      console.log('‚úÖ Robots meta present:', robots);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Open Graph
    const ogTitle = await page.locator('meta[property="og:title"]').getAttribute('content');
    const ogDescription = await page.locator('meta[property="og:description"]').getAttribute('content');
    const ogImage = await page.locator('meta[property="og:image"]').getAttribute('content');
    
    if (ogTitle && ogDescription) {
      console.log('‚úÖ Open Graph tags present');
    } else {
      console.warn('‚ö†Ô∏è Missing Open Graph tags');
    }
    
    console.log('‚úÖ SEO technical check completed');
  });
  
  test('‚ôø Basic Accessibility Check', async ({ page }) => {
    await page.goto(`${BASE_URL}/`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è skip links
    const skipLink = page.locator('a[href="#main"], a[href="#content"]').first();
    if (await skipLink.count() > 0) {
      console.log('‚úÖ Skip link present');
    } else {
      console.warn('‚ö†Ô∏è No skip link found');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ (–±–∞–∑–æ–≤–∞—è)
    const buttons = await page.locator('button, .btn').all();
    for (const button of buttons) {
      const isVisible = await button.isVisible();
      if (isVisible) {
        const styles = await button.evaluate(el => {
          const computed = window.getComputedStyle(el);
          return {
            backgroundColor: computed.backgroundColor,
            color: computed.color,
            fontSize: computed.fontSize
          };
        });
        
        // –ö–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –∏ —Ç–µ–∫—Å—Ç–∞
        expect(styles.backgroundColor).not.toBe('rgba(0, 0, 0, 0)');
        expect(styles.color).not.toBe('rgba(0, 0, 0, 0)');
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ focus indicators
    const focusableElements = await page.locator('button, a, input, select, textarea').all();
    
    if (focusableElements.length > 0) {
      const firstElement = focusableElements[0];
      await firstElement.focus();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª —Ñ–æ–∫—É—Å
      const isFocused = await firstElement.evaluate(el => document.activeElement === el);
      expect(isFocused).toBe(true);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    const formLabels = await page.locator('label').count();
    const formInputs = await page.locator('input:not([type="hidden"]), textarea, select').count();
    
    if (formInputs > 0) {
      console.log(`üìù Form accessibility: ${formLabels} labels for ${formInputs} inputs`);
      
      // –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ label —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª–µ–π
      if (formLabels < formInputs) {
        console.warn('‚ö†Ô∏è Some form inputs may not have associated labels');
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–∏–µ—Ä–∞—Ä—Ö–∏—è)
    const headings = await page.locator('h1, h2, h3, h4, h5, h6').all();
    const headingLevels = [];
    
    for (const heading of headings) {
      const tagName = await heading.evaluate(el => el.tagName.toLowerCase());
      const level = parseInt(tagName.substring(1));
      headingLevels.push(level);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    if (headingLevels.length > 0) {
      expect(headingLevels[0]).toBe(1); // –ü–µ—Ä–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å H1
      
      for (let i = 1; i < headingLevels.length; i++) {
        const diff = headingLevels[i] - headingLevels[i-1];
        if (diff > 1) {
          console.warn(`‚ö†Ô∏è Heading level jump detected: h${headingLevels[i-1]} to h${headingLevels[i]}`);
        }
      }
    }
    
    console.log('‚úÖ Basic accessibility check completed');
  });
  
  test('üì± PWA Features Check', async ({ page }) => {
    await page.goto(`${BASE_URL}/`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ manifest.json
    const manifestLink = page.locator('link[rel="manifest"]');
    
    if (await manifestLink.count() > 0) {
      const manifestUrl = await manifestLink.getAttribute('href');
      console.log('‚úÖ Web App Manifest found:', manifestUrl);
      
      // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å manifest
      try {
        const manifestResponse = await page.request.get(manifestUrl, { baseURL: BASE_URL });
        
        if (manifestResponse.ok()) {
          const manifest = await manifestResponse.json();
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π PWA
          expect(manifest.name || manifest.short_name).toBeTruthy();
          expect(manifest.icons).toBeTruthy();
          expect(manifest.start_url).toBeTruthy();
          
          console.log('‚úÖ PWA manifest is valid');
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Could not validate manifest:', error.message);
      }
    } else {
      console.warn('‚ö†Ô∏è No PWA manifest found');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Service Worker
    const serviceWorkerRegistration = await page.evaluate(() => {
      return 'serviceWorker' in navigator;
    });
    
    expect(serviceWorkerRegistration).toBe(true);
    console.log('‚úÖ Service Worker API is available');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∫–æ–Ω–æ–∫
    const icons = await page.locator('link[rel*="icon"]').all();
    
    if (icons.length > 0) {
      console.log(`‚úÖ ${icons.length} favicon(s) found`);
      
      for (const icon of icons) {
        const href = await icon.getAttribute('href');
        const sizes = await icon.getAttribute('sizes');
        
        if (sizes) {
          console.log(`  Icon: ${href} (${sizes})`);
        }
      }
    } else {
      console.warn('‚ö†Ô∏è No favicons found');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ theme-color
    const themeColor = await page.locator('meta[name="theme-color"]').getAttribute('content');
    
    if (themeColor) {
      console.log('‚úÖ Theme color defined:', themeColor);
    } else {
      console.warn('‚ö†Ô∏è No theme color defined');
    }
    
    console.log('‚úÖ PWA features check completed');
  });
});