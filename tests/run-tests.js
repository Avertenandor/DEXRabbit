#!/usr/bin/env node

import { promises as fs } from 'fs';
import { execSync } from 'child_process';
import path from 'path';

console.log('üöÄ Starting Professional Testing Suite for –ö—É–ø–∏—Ç—å–ö—Ä–æ–ª–∏–∫–∞.site\n');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(message, color = colors.reset) {
  console.log(color + message + colors.reset);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥
function runCommand(command, description) {
  log(`\nüß™ ${description}...`, colors.cyan);
  try {
    const output = execSync(command, { encoding: 'utf-8', stdio: 'inherit' });
    log(`‚úÖ ${description} completed successfully`, colors.green);
    return { success: true, output };
  } catch (error) {
    log(`‚ùå ${description} failed: ${error.message}`, colors.red);
    return { success: false, error: error.message };
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
async function ensureReportsDirectory() {
  const reportsDir = path.join(process.cwd(), 'reports');
  try {
    await fs.mkdir(reportsDir, { recursive: true });
    log('üìÅ Reports directory created', colors.blue);
  } catch (error) {
    log(`Warning: Could not create reports directory: ${error.message}`, colors.yellow);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  await ensureReportsDirectory();
  
  const testResults = {
    quick: null,
    e2e: null,
    performance: null,
    accessibility: null,
    forms: null,
    security: null
  };
  
  log('=' * 60, colors.blue);
  log('üéØ QUICK SMOKE TESTS', colors.blue);
  log('=' * 60, colors.blue);
  
  testResults.quick = runCommand(
    'npx playwright test tests/quick.spec.js --reporter=line',
    'Quick Smoke Tests'
  );
  
  log('=' * 60, colors.blue);
  log('üåê COMPREHENSIVE E2E TESTS', colors.blue);
  log('=' * 60, colors.blue);
  
  testResults.e2e = runCommand(
    'npx playwright test tests/all-pages.spec.js --reporter=html --reporter=list',
    'E2E Page Testing'
  );
  
  log('=' * 60, colors.blue);
  log('üìù FORMS AND INTERACTIONS', colors.blue);
  log('=' * 60, colors.blue);
  
  testResults.forms = runCommand(
    'npx playwright test tests/forms.spec.js --reporter=list',
    'Forms Testing'
  );
  
  log('=' * 60, colors.blue);
  log('üîí SECURITY & PERFORMANCE', colors.blue);
  log('=' * 60, colors.blue);
  
  testResults.security = runCommand(
    'npx playwright test tests/security-performance.spec.js --reporter=list',
    'Security & Performance Testing'
  );
  
  // Lighthouse Performance Testing
  log('=' * 60, colors.blue);
  log('‚ö° LIGHTHOUSE PERFORMANCE AUDIT', colors.blue);
  log('=' * 60, colors.blue);
  
  testResults.performance = runCommand(
    'npx lighthouse-ci autorun --config=lighthouserc.js',
    'Lighthouse Performance Audit'
  );
  
  // Accessibility Testing
  log('=' * 60, colors.blue);
  log('‚ôø ACCESSIBILITY AUDIT', colors.blue);
  log('=' * 60, colors.blue);
  
  testResults.accessibility = runCommand(
    'npx pa11y-ci --config .pa11yci',
    'Pa11y Accessibility Audit'
  );
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
  await generateFinalReport(testResults);
  
  log('\n' + '=' * 60, colors.green);
  log('üèÜ TESTING COMPLETED!', colors.green);
  log('=' * 60, colors.green);
  
  // –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
  const successCount = Object.values(testResults).filter(result => result?.success).length;
  const totalCount = Object.keys(testResults).length;
  
  if (successCount === totalCount) {
    log(`üéâ ALL ${totalCount} TEST SUITES PASSED!`, colors.green);
  } else {
    log(`‚ö†Ô∏è  ${successCount}/${totalCount} test suites passed`, colors.yellow);
  }
  
  log('\nüìä View detailed reports:', colors.cyan);
  log('  ‚Ä¢ Playwright: ./reports/playwright-report/index.html', colors.blue);
  log('  ‚Ä¢ Final Report: ./reports/final-test-report.html', colors.blue);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
async function generateFinalReport(testResults) {
  const timestamp = new Date().toISOString();
  const reportPath = path.join(process.cwd(), 'reports', 'final-test-report.html');
  
  const successCount = Object.values(testResults).filter(result => result?.success).length;
  const totalCount = Object.keys(testResults).length;
  const successRate = Math.round((successCount / totalCount) * 100);
  
  const reportHtml = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ö—É–ø–∏—Ç—å–ö—Ä–æ–ª–∏–∫–∞.site - –û—Ç—á–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif; margin: 40px; background: #f5f7fa; }
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 10px; margin-bottom: 30px; }
        .status-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px; }
        .status-card { background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .status-success { border-left: 5px solid #10b981; }
        .status-failed { border-left: 5px solid #ef4444; }
        .status-warning { border-left: 5px solid #f59e0b; }
        .summary { background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .metric { display: flex; justify-content: space-between; margin-bottom: 15px; padding-bottom: 15px; border-bottom: 1px solid #e5e7eb; }
        .metric:last-child { border-bottom: none; margin-bottom: 0; }
        .success-rate { font-size: 48px; font-weight: bold; color: ${successRate >= 80 ? '#10b981' : successRate >= 60 ? '#f59e0b' : '#ef4444'}; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üèÜ –ö—É–ø–∏—Ç—å–ö—Ä–æ–ª–∏–∫–∞.site - –û—Ç—á–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h1>
        <p>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –Ω–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º —É—Ä–æ–≤–Ω–µ</p>
        <p><strong>–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</strong> ${new Date(timestamp).toLocaleString('ru-RU')}</p>
    </div>
    
    <div class="summary">
        <h2>üìä –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</h2>
        <div style="text-align: center; margin: 30px 0;">
            <div class="success-rate">${successRate}%</div>
            <p style="font-size: 18px; color: #6b7280;">–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏</p>
        </div>
        
        <div class="metric">
            <span><strong>–£—Å–ø–µ—à–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ —Ç–µ—Å—Ç–æ–≤:</strong></span>
            <span style="color: #10b981; font-weight: bold;">${successCount} –∏–∑ ${totalCount}</span>
        </div>
        
        <div class="metric">
            <span><strong>URL —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</strong></span>
            <span><a href="https://xn--80apagbbfxgmuj4j.site" target="_blank">https://xn--80apagbbfxgmuj4j.site</a></span>
        </div>
        
        <div class="metric">
            <span><strong>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</strong></span>
            <span>Playwright + Lighthouse + Pa11y</span>
        </div>
    </div>
    
    <div class="status-grid">
        ${Object.entries(testResults).map(([testName, result]) => `
            <div class="status-card ${result?.success ? 'status-success' : 'status-failed'}">
                <h3>${getTestDisplayName(testName)}</h3>
                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${result?.success ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∏'}</p>
                <p>${getTestDescription(testName)}</p>
            </div>
        `).join('')}
    </div>
    
    <div class="summary">
        <h2>üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h2>
        ${successRate >= 90 ? `
            <p>üéâ <strong>–û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!</strong> –°–∞–π—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω—É.</p>
        ` : successRate >= 70 ? `
            <p>‚ö†Ô∏è <strong>–•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</strong> —Å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏.</p>
            <p>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.</p>
        ` : `
            <p>üö® <strong>–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.</strong> –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.</p>
            <p>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º.</p>
        `}
        
        <h3>üìã –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã:</h3>
        <ul>
            <li>‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü</li>
            <li>‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏ –º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è</li>
            <li>‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏</li>
            <li>‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –ª—é–¥–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏</li>
            <li>‚úÖ SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è</li>
            <li>‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∑–∞—â–∏—Ç–∞</li>
            <li>‚úÖ –§–æ—Ä–º—ã –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã</li>
            <li>‚úÖ PWA —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å</li>
        </ul>
    </div>
</body>
</html>`;
  
  try {
    await fs.writeFile(reportPath, reportHtml);
    log('üìä Final test report generated', colors.green);
  } catch (error) {
    log(`Warning: Could not generate final report: ${error.message}`, colors.yellow);
  }
}

function getTestDisplayName(testName) {
  const names = {
    quick: '‚ö° –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã',
    e2e: 'üåê E2E —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
    forms: 'üìù –¢–µ—Å—Ç—ã —Ñ–æ—Ä–º',
    security: 'üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
    performance: '‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
    accessibility: '‚ôø –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å'
  };
  return names[testName] || testName;
}

function getTestDescription(testName) {
  const descriptions = {
    quick: '–ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏',
    e2e: '–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü —Å–∞–π—Ç–∞',
    forms: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Ñ–æ—Ä–º –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
    security: '–ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
    performance: 'Lighthouse –∞—É–¥–∏—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
    accessibility: 'Pa11y –∞—É–¥–∏—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏'
  };
  return descriptions[testName] || '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∞–π—Ç–∞';
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
runTests().catch(error => {
  log(`üí• Testing failed: ${error.message}`, colors.red);
  process.exit(1);
});