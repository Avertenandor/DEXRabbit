const sharp = require('sharp');
const fs = require('fs');
const path = require('path');
const glob = require('glob');

async function addImageDimensions() {
  console.log('üìè –î–æ–±–∞–≤–ª–µ–Ω–∏–µ width/height –∞—Ç—Ä–∏–±—É—Ç–æ–≤...\n');
  
  // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const imagePaths = glob.sync('{assets,gallery}/**/*.{jpg,jpeg,png}', {
    ignore: ['**/originals/**']
  });
  
  const dimensions = {};
  
  console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n');
  
  for (const imgPath of imagePaths) {
    try {
      const metadata = await sharp(imgPath).metadata();
      dimensions[imgPath] = {
        width: metadata.width,
        height: metadata.height
      };
      console.log(`‚úÖ ${imgPath}: ${metadata.width}x${metadata.height}`);
    } catch (e) {
      console.log(`‚ö†Ô∏è  ${imgPath}: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è`);
    }
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º mapping
  fs.writeFileSync('image-dimensions.json', JSON.stringify(dimensions, null, 2));
  console.log('\nüìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: image-dimensions.json\n');
  
  // –û–±–Ω–æ–≤–ª—è–µ–º HTML —Ñ–∞–π–ª—ã
  const htmlFiles = glob.sync('**/*.html', {
    ignore: ['node_modules/**', 'archive/**', 'templates/**']
  });
  
  let totalUpdated = 0;
  
  htmlFiles.forEach(file => {
    let content = fs.readFileSync(file, 'utf8');
    let modified = false;
    
    // –î–æ–±–∞–≤–ª—è–µ–º width/height –∫ img –±–µ–∑ —ç—Ç–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    content = content.replace(
      /<img([^>]*?)src=["']([^"']+)["']([^>]*?)>/gi,
      (match, before, src, after) => {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å width –∏ height
        if (match.includes('width=') && match.includes('height=')) {
          return match;
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        const imgPath = src.replace(/^(\.\.\/)+/, '').replace(/^\//, '');
        
        // –ò—â–µ–º —Ä–∞–∑–º–µ—Ä—ã
        for (const [path, dims] of Object.entries(dimensions)) {
          if (path.includes(imgPath) || imgPath.includes(path.split('/').pop())) {
            modified = true;
            totalUpdated++;
            return `<img${before}src="${src}" width="${dims.width}" height="${dims.height}"${after}>`;
          }
        }
        
        return match;
      }
    );
    
    if (modified) {
      fs.writeFileSync(file, content, 'utf8');
      console.log(`‚úÖ ${file}`);
    }
  });
  
  console.log(`\nüìä –ò–¢–û–ì–û: width/height –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ ${totalUpdated} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º`);
}

addImageDimensions();