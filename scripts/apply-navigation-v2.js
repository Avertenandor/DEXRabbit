const fs = require('fs');
const path = require('path');

// CSS –∏ JS –¥–ª—è –Ω–æ–≤–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
const NAV_CSS = `    <!-- Navigation V2 - Apple/Amazon Style -->
    <link rel="stylesheet" href="/assets/css/navigation-v2.css?v=20251001-v2" />`;

const NAV_JS = `    <!-- Navigation V2 Script -->
    <script defer src="/assets/js/navigation-v2.js?v=20251001-v2"></script>`;

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ HTML —Ñ–∞–π–ª—ã
function findHTMLFiles(dir, fileList = []) {
  const files = fs.readdirSync(dir);
  
  files.forEach((file) => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat.isDirectory()) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏
      if (!['archive', 'templates', 'node_modules', '.git'].includes(file)) {
        findHTMLFiles(filePath, fileList);
      }
    } else if (file.endsWith('.html')) {
      fileList.push(filePath);
    }
  });
  
  return fileList;
}

console.log('üöÄ –ü—Ä–∏–º–µ–Ω—è—é Navigation V2 –Ω–∞ –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...\n');

const htmlFiles = findHTMLFiles(process.cwd());
let appliedCount = 0;

htmlFiles.forEach((filePath) => {
  const relativePath = path.relative(process.cwd(), filePath);
  let content = fs.readFileSync(filePath, 'utf8');
  const originalContent = content;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–æ–≤–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
  if (content.includes('navigation-v2.css')) {
    console.log(`‚ö™ ${relativePath} - Navigation V2 —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–≥ <head>
  if (!content.includes('<head>') || !content.includes('</head>')) {
    console.log(`‚ö†Ô∏è  ${relativePath} - –Ω–µ—Ç —Ç–µ–≥–∞ <head>, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
    return;
  }
  
  // –í—Å—Ç–∞–≤–ª—è–µ–º CSS –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –Ω–∞–π–¥–µ–Ω–Ω—ã–º <link> –∏–ª–∏ <style>
  const cssInsertPoint = content.search(/<link[^>]*rel="stylesheet"/i);
  if (cssInsertPoint !== -1) {
    const beforeCSS = content.substring(0, cssInsertPoint);
    const afterCSS = content.substring(cssInsertPoint);
    content = beforeCSS + NAV_CSS + '\n' + afterCSS;
  } else {
    // –ï—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö CSS, –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ </head>
    content = content.replace('</head>', NAV_CSS + '\n  </head>');
  }
  
  // –í—Å—Ç–∞–≤–ª—è–µ–º JS –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –Ω–∞–π–¥–µ–Ω–Ω—ã–º <script> –∏–ª–∏ –ø–µ—Ä–µ–¥ </head>
  const jsInsertPoint = content.search(/<script[^>]*>/i);
  if (jsInsertPoint !== -1) {
    const beforeJS = content.substring(0, jsInsertPoint);
    const afterJS = content.substring(jsInsertPoint);
    content = beforeJS + NAV_JS + '\n' + afterJS;
  } else {
    // –ï—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤, –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ </head>
    content = content.replace('</head>', NAV_JS + '\n  </head>');
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
  if (originalContent !== content) {
    fs.writeFileSync(filePath, content, 'utf8');
    appliedCount++;
    console.log(`‚úÖ ${relativePath} - Navigation V2 –ø—Ä–∏–º–µ–Ω–µ–Ω–∞`);
  }
});

console.log(`\nüìä –ò–¢–û–ì–û:`);
console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${htmlFiles.length}`);
console.log(`   –ü—Ä–∏–º–µ–Ω–µ–Ω–æ Navigation V2: ${appliedCount}`);
console.log(`   –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${htmlFiles.length - appliedCount}`);

console.log('\n‚úÖ –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∞–π—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è —Ç–µ—Å—Ç–∞ –Ω–æ–≤–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.');

