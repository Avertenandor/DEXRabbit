const fs = require('fs');
const path = require('path');
const glob = require('glob');

function integrateWebP() {
  console.log('üñºÔ∏è  –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è WebP —á–µ—Ä–µ–∑ <picture> —ç–ª–µ–º–µ–Ω—Ç—ã...\n');
  
  const htmlFiles = glob.sync('**/*.html', {
    ignore: ['node_modules/**', 'archive/**', 'templates/**']
  });
  
  let totalFiles = 0;
  let totalPictures = 0;
  
  htmlFiles.forEach(file => {
    let content = fs.readFileSync(file, 'utf8');
    let modified = false;
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ <img> —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ WebP –≤–µ—Ä—Å–∏—è–º–∏
    content = content.replace(
      /<img([^>]*?)src=["']([^"']*?\.(jpg|jpeg|png))["']([^>]*?)>/gi,
      (match, before, imgPath, ext, after) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ WebP –≤–µ—Ä—Å–∏–∏
        const webpPath = imgPath.replace(/\.(jpg|jpeg|png)$/i, '.webp');
        const fullWebpPath = path.join(path.dirname(file), webpPath);
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –≤ <picture>
        if (match.includes('picture')) return match;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ WebP —Ñ–∞–π–ª–∞
        try {
          if (fs.existsSync(fullWebpPath)) {
            modified = true;
            totalPictures++;
            
            // –°–æ–∑–¥–∞–µ–º <picture> —ç–ª–µ–º–µ–Ω—Ç
            return `<picture>
  <source type="image/webp" srcset="${webpPath}">
  <img${before}src="${imgPath}"${after}>
</picture>`;
          }
        } catch (e) {
          // –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        }
        
        return match;
      }
    );
    
    if (modified) {
      fs.writeFileSync(file, content, 'utf8');
      totalFiles++;
      console.log(`‚úÖ ${file}`);
    }
  });
  
  console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log(`   HTML —Ñ–∞–π–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${totalFiles}`);
  console.log(`   <picture> —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: ${totalPictures}`);
  console.log('\n‚ú® WebP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

integrateWebP();