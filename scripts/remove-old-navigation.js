const fs = require('fs');
const path = require('path');

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
const NAV_PATTERNS = [
  // Navigation container
  /<nav\s+class="navbar"[^>]*>[\s\S]*?<\/nav>/gi,
  
  // CSS imports —Å—Ç–∞—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  /<link[^>]*href="\/assets\/css\/navigation\.css[^>]*>/gi,
  /<link[^>]*href="\/assets\/css\/mega-menu\.css[^>]*>/gi,
  /<link[^>]*href="\/assets\/css\/nav-refactor\.css[^>]*>/gi,
  /<link[^>]*href="\/assets\/css\/mega-menu-click-only\.css[^>]*>/gi,
  
  // JS imports —Å—Ç–∞—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  /<script[^>]*src="\/assets\/js\/navigation-data\.js[^>]*>[\s\S]*?<\/script>/gi,
  /<script[^>]*src="\/assets\/js\/mega-menu-click-only\.js[^>]*>[\s\S]*?<\/script>/gi,
  /<script[^>]*src="\/assets\/js\/nav\.js[^>]*>[\s\S]*?<\/script>/gi,
  
  // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å—Ç–∞—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  /<!--\s*Navigation.*?-->/gi,
  /<!--\s*Unified Navigation.*?-->/gi,
  /<!--\s*Click-Only Navigation.*?-->/gi,
  /<!--\s*Mobile Navigation.*?-->/gi,
  /<!--\s*Mega Menu.*?-->/gi,
];

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ HTML —Ñ–∞–π–ª—ã
function findHTMLFiles(dir, fileList = []) {
  const files = fs.readdirSync(dir);
  
  files.forEach((file) => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat.isDirectory()) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏
      if (!['archive', 'templates', 'node_modules', '.git'].includes(file)) {
        findHTMLFiles(filePath, fileList);
      }
    } else if (file.endsWith('.html')) {
      fileList.push(filePath);
    }
  });
  
  return fileList;
}

console.log('üóëÔ∏è  –£–¥–∞–ª—è—é —Å—Ç–∞—Ä—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü...\n');

// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ HTML —Ñ–∞–π–ª—ã
const htmlFiles = findHTMLFiles(process.cwd());

let removedCount = 0;
const report = [];

htmlFiles.forEach((filePath) => {
  const relativePath = path.relative(process.cwd(), filePath);
  let content = fs.readFileSync(filePath, 'utf8');
  const originalContent = content;
  
  let changes = 0;
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
  NAV_PATTERNS.forEach((pattern) => {
    const matches = content.match(pattern);
    if (matches) {
      changes += matches.length;
      content = content.replace(pattern, '');
    }
  });
  
  // –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
  content = content.replace(/\n{3,}/g, '\n\n');
  
  if (originalContent !== content) {
    fs.writeFileSync(filePath, content, 'utf8');
    removedCount++;
    report.push({
      file: relativePath,
      changes,
    });
    console.log(`‚úÖ ${relativePath} - —É–¥–∞–ª–µ–Ω–æ ${changes} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏`);
  } else {
    console.log(`‚ö™ ${relativePath} - –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
  }
});

console.log(`\nüìä –ò–¢–û–ì–û:`);
console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${htmlFiles.length}`);
console.log(`   –ò–∑–º–µ–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${removedCount}`);
console.log(`   –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${htmlFiles.length - removedCount}`);

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
const reportPath = path.resolve('reports', 'navigation-removal-report.json');
fs.writeFileSync(reportPath, JSON.stringify(report, null, 2), 'utf8');
console.log(`\nüìÅ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${reportPath}`);

console.log('\n‚úÖ –£–î–ê–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');

