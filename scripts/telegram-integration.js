// –ú–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram-–±–æ—Ç–æ–º –∏ –∫–∞–Ω–∞–ª–æ–º
class TelegramIntegration {
    constructor() {
        this.botToken = process.env.TELEGRAM_BOT_TOKEN || 'demo_token';
        this.channelId = '@kupitkrolika';
        this.botUsername = '@kupitkrolika_bot';
        this.vipGroupId = '-1001234567890'; // VIP-–≥—Ä—É–ø–ø–∞ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –ö—Ä—É–≥–∞ –ë
        
        this.commands = {
            '/start': this.handleStart.bind(this),
            '/balance': this.handleBalance.bind(this),
            '/invest': this.handleInvest.bind(this),
            '/catalog': this.handleCatalog.bind(this),
            '/my_rabbits': this.handleMyRabbits.bind(this),
            '/reports': this.handleReports.bind(this),
            '/exchange': this.handleExchange.bind(this),
            '/referral': this.handleReferral.bind(this),
            '/support': this.handleSupport.bind(this),
            '/help': this.handleHelp.bind(this)
        };
        
        this.userSessions = {};
        this.notificationQueue = [];
        
        this.init();
    }

    init() {
        this.setupWebhook();
        this.startNotificationService();
        this.initializeChannelIntegration();
        console.log('ü§ñ Telegram integration initialized');
    }

    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    async handleStart(userId, messageText, chatId) {
        const user = await this.getOrCreateUser(userId);
        
        const welcomeMessage = `
üê∞ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö—É–ø–∏—Ç—å–ö—Ä–æ–ª–∏–∫–∞!*

–ü–µ—Ä–≤–∞—è —Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫—Ä–æ–ª–∏—á—å—è —Ñ–µ—Ä–º–∞ –≤ –†–æ—Å—Å–∏–∏

*üéØ –ß—Ç–æ —è —É–º–µ—é:*
/balance - –í–∞—à PLEX –±–∞–ª–∞–Ω—Å
/invest - –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∫—Ä–æ–ª–∏–∫–æ–≤  
/catalog - –ö–∞—Ç–∞–ª–æ–≥ –∫—Ä–æ–ª–∏–∫–æ–≤
/my_rabbits - –ú–æ–∏ –∫—Ä–æ–ª–∏–∫–∏
/reports - –í–∏–¥–µ–æ-–æ—Ç—á—ë—Ç—ã —Ñ–µ—Ä–º—ã
/exchange - –û–±–º–µ–Ω PLEX ‚Üî USDT
/referral - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
/support - –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞

*üí∞ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:*
1. –ò–∑—É—á–∏—Ç–µ /catalog –∫—Ä–æ–ª–∏–∫–æ–≤
2. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é –æ—Ç 100 USDT
3. –ü–æ–ª—É—á–∞–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ PLEX-–±–æ–Ω—É—Å—ã
4. –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –ø—Ä–æ–¥–∞–∂–∏ –ø–æ—Ç–æ–º—Å—Ç–≤–∞

*üéÅ –ë–æ–Ω—É—Å –Ω–æ–≤–∏—á–∫–∞–º:* 10 PLEX –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏!

üëâ /invest - –ù–∞—á–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
        `;

        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'invest_start' },
                    { text: 'üìã –ö–∞—Ç–∞–ª–æ–≥', callback_data: 'catalog_view' }
                ],
                [
                    { text: 'ü™ô –ú–æ–π –±–∞–ª–∞–Ω—Å', callback_data: 'balance_check' },
                    { text: 'üì∫ –û—Ç—á—ë—Ç—ã', callback_data: 'reports_latest' }
                ],
                [
                    { text: 'üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç', url: 'https://xn--80apagbbfxgmuj4j.site' }
                ]
            ]
        };

        return {
            text: welcomeMessage,
            parse_mode: 'Markdown',
            reply_markup: keyboard
        };
    }

    async handleBalance(userId) {
        const user = await this.getUserData(userId);
        const plexBalance = user.plexBalance || 0;
        const usdtBalance = user.usdtBalance || 0;
        const totalInvested = user.totalInvested || 0;
        const todayRewards = await this.getTodayRewards(userId);
        
        const balanceMessage = `
üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å*

ü™ô *PLEX:* ${plexBalance.toFixed(4)}
üíµ *USDT:* ${usdtBalance.toFixed(2)}

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –í—Å–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${totalInvested} USDT
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: +${todayRewards.toFixed(4)} PLEX
‚Ä¢ –ö—É—Ä—Å PLEX: 1.0000 USDT

*üìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:*
‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: +${(todayRewards * 1.0).toFixed(2)} USDT
‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: +${(todayRewards * 30).toFixed(2)} USDT
‚Ä¢ –ì–æ–¥–æ–≤–∞—è: ~${((todayRewards * 365 / totalInvested) * 100).toFixed(2)}%

*üí± –î–µ–π—Å—Ç–≤–∏—è:*
/exchange - –û–±–º–µ–Ω—è—Ç—å PLEX ‚Üí USDT
/invest - –£–≤–µ–ª–∏—á–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é
        `;

        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üí± –û–±–º–µ–Ω—è—Ç—å', callback_data: 'exchange_plex' },
                    { text: 'üìà –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'invest_more' }
                ],
                [
                    { text: 'üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats_detailed' }
                ]
            ]
        };

        return {
            text: balanceMessage,
            parse_mode: 'Markdown',
            reply_markup: keyboard
        };
    }

    async handleCatalog(userId) {
        const featuredRabbits = await this.getFeaturedRabbits();
        
        let catalogMessage = 'üê∞ *–ö–∞—Ç–∞–ª–æ–≥ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –∫—Ä–æ–ª–∏–∫–æ–≤*\n\n';
        
        featuredRabbits.forEach((rabbit, index) => {
            const statusEmoji = rabbit.status === 'available' ? '‚úÖ' : '‚ùå';
            const genderEmoji = rabbit.gender === 'male' ? '‚ôÇÔ∏è' : '‚ôÄÔ∏è';
            const investPrice = Math.round(rabbit.price * (rabbit.gender === 'male' ? 2.2 : 1.8));
            
            catalogMessage += `*${index + 1}. ${rabbit.name}* ${genderEmoji}\n`;
            catalogMessage += `üè∑Ô∏è ${rabbit.breed}\n`;
            catalogMessage += `‚öñÔ∏è ${rabbit.weight} –∫–≥ ‚Ä¢ üìÖ ${rabbit.age} –º–µ—Å\n`;
            catalogMessage += `üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è: ${investPrice} USDT ${statusEmoji}\n\n`;
        });
        
        catalogMessage += `*üì± –î–µ–π—Å—Ç–≤–∏—è:*
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–æ–ª–∏–∫–∞ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ
‚Ä¢ –ò–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –Ω–∞ —Å–∞–π—Ç–µ
        `;

        const keyboard = {
            inline_keyboard: [
                ...featuredRabbits.slice(0, 3).map((rabbit, index) => [
                    { text: `${index + 1}. ${rabbit.name} (${rabbit.gender === 'male' ? '‚ôÇÔ∏è' : '‚ôÄÔ∏è'})`, callback_data: `rabbit_${rabbit.id}` }
                ]),
                [
                    { text: 'üåê –ü–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥', url: 'https://xn--80apagbbfxgmuj4j.site/catalog' },
                    { text: 'üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'invest_start' }
                ]
            ]
        };

        return {
            text: catalogMessage,
            parse_mode: 'Markdown',
            reply_markup: keyboard
        };
    }

    async handleMyRabbits(userId) {
        const userInvestments = await this.getUserInvestments(userId);
        
        if (userInvestments.length === 0) {
            return {
                text: `
üê∞ *–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—Ä–æ–ª–∏–∫–æ–≤*

–ù–∞—á–Ω–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –∫—Ä–æ–ª–∏–∫–∞!

/invest - –í—ã–±—Ä–∞—Ç—å –∫—Ä–æ–ª–∏–∫–∞
/catalog - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥
                `,
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'invest_start' }]
                    ]
                }
            };
        }

        let myRabbitsMessage = 'üê∞ *–í–∞—à–∏ –∫—Ä–æ–ª–∏–∫–∏:*\n\n';
        
        userInvestments.forEach((investment, index) => {
            const rabbit = investment.rabbit;
            const cycle = investment.currentCycle || { status: 'preparing', cycleNumber: 1 };
            
            myRabbitsMessage += `*${index + 1}. ${rabbit.name}* ${rabbit.gender === 'male' ? '‚ôÇÔ∏è' : '‚ôÄÔ∏è'}\n`;
            myRabbitsMessage += `üè∑Ô∏è ${rabbit.breed} ‚Ä¢ ‚öñÔ∏è ${rabbit.weight} –∫–≥\n`;
            myRabbitsMessage += `üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${investment.amount} USDT\n`;
            myRabbitsMessage += `üîÑ –°—Ç–∞—Ç—É—Å: ${this.getCycleStatusText(cycle.status)}\n`;
            myRabbitsMessage += `üìä –¶–∏–∫–ª: ${cycle.cycleNumber}/2\n\n`;
        });

        myRabbitsMessage += `*üì± –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*
/reports - –í–∏–¥–µ–æ-–æ—Ç—á—ë—Ç—ã
/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å PLEX
        `;

        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üì∫ –í–∏–¥–µ–æ-–æ—Ç—á—ë—Ç—ã', callback_data: 'reports_latest' },
                    { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats_detailed' }
                ],
                [
                    { text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ', url: 'https://xn--80apagbbfxgmuj4j.site/dashboard' }
                ]
            ]
        };

        return {
            text: myRabbitsMessage,
            parse_mode: 'Markdown',
            reply_markup: keyboard
        };
    }

    async handleReports(userId) {
        const latestReports = await this.getLatestReports();
        
        let reportsMessage = 'üì∫ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∏–¥–µ–æ-–æ—Ç—á—ë—Ç—ã —Ñ–µ—Ä–º—ã*\n\n';
        
        latestReports.forEach((report, index) => {
            const timeAgo = this.getTimeAgo(report.timestamp);
            reportsMessage += `*${index + 1}. ${report.title}*\n`;
            reportsMessage += `üìÖ ${timeAgo}\n`;
            reportsMessage += `üëÄ ${report.views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n\n`;
        });

        reportsMessage += `*üì± –ù–æ–≤—ã–µ –æ—Ç—á—ë—Ç—ã:*
‚Ä¢ –£—Ç—Ä–æ–º –≤ 10:00 –ú–°–ö
‚Ä¢ –í–µ—á–µ—Ä–æ–º –≤ 18:00 –ú–°–ö
‚Ä¢ –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

üîî –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!
        `;

        const keyboard = {
            inline_keyboard: [
                [
                    { text: '‚ñ∂Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á—ë—Ç', url: latestReports[0]?.url || '#' },
                    { text: 'üì∫ –í—Å–µ –æ—Ç—á—ë—Ç—ã', url: 'https://xn--80apagbbfxgmuj4j.site/reports' }
                ],
                [
                    { text: 'üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'notifications_setup' }
                ]
            ]
        };

        return {
            text: reportsMessage,
            parse_mode: 'Markdown',
            reply_markup: keyboard
        };
    }

    async handleReferral(userId) {
        const user = await this.getUserData(userId);
        const referralCode = user.referralCode || this.generateReferralCode(userId);
        const referralStats = await this.getReferralStats(userId);
        
        const referralMessage = `
ü§ù *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞*

*–í–∞—à –∫–æ–¥:* \`${referralCode}\`
*–°—Å—ã–ª–∫–∞:* https://xn--80apagbbfxgmuj4j.site?ref=${referralCode}

*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${referralStats.invited} —á–µ–ª–æ–≤–µ–∫
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${referralStats.active} –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤
‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${referralStats.earned.toFixed(2)} USDT

*üí∞ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:*
1Ô∏è‚É£ –î–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏
2Ô∏è‚É£ –û–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É—é—Ç
3Ô∏è‚É£ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 5% —Å –∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
4Ô∏è‚É£ + 5% —Å –∏—Ö –ø—Ä–∏–±—ã–ª–∏ –Ω–∞–≤—Å–µ–≥–¥–∞!

*üéÅ –ë–æ–Ω—É—Å—ã:*
‚Ä¢ 10+ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: +0.05% –∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º PLEX
‚Ä¢ 50+ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö
‚Ä¢ 100+ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
        `;

        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π', switch_inline_query: `–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π –≤ –∫—Ä–æ–ª–∏–∫–æ–≤! –ü–æ–ª—É—á–∞–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ PLEX. –ú–æ–π –∫–æ–¥: ${referralCode}` }
                ],
                [
                    { text: 'üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'referral_stats' },
                    { text: 'üí∏ –í—ã–≤–µ—Å—Ç–∏', callback_data: 'referral_withdraw' }
                ]
            ]
        };

        return {
            text: referralMessage,
            parse_mode: 'Markdown',
            reply_markup: keyboard
        };
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    async sendDailyRewardNotification(userId, amount) {
        const message = `
üéâ *–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ PLEX*

üí∞ –ü–æ–ª—É—á–µ–Ω–æ: +${amount.toFixed(4)} PLEX
üïê –í—Ä–µ–º—è: ${new Date().toLocaleTimeString('ru-RU', {timeZone: 'Europe/Moscow'})} –ú–°–ö

*üí° –ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å PLEX:*
‚Ä¢ –û–±–º–µ–Ω—è—Ç—å –Ω–∞ USDT —á–µ—Ä–µ–∑ /exchange
‚Ä¢ –û–ø–ª–∞—Ç–∏—Ç—å –≤–∏–∑–∏—Ç –Ω–∞ —Ñ–µ—Ä–º—É (50 PLEX)
‚Ä¢ –ó–∞–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—é —Å –∫—Ä–æ–ª–∏–∫–æ–º (20 PLEX)

/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
        `;

        await this.sendMessage(userId, message, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üí± –û–±–º–µ–Ω—è—Ç—å', callback_data: 'exchange_plex' },
                        { text: 'üõçÔ∏è –£—Å–ª—É–≥–∏', callback_data: 'services_farm' }
                    ]
                ]
            }
        });
    }

    async sendBreedingUpdateNotification(userId, update) {
        const statusEmojis = {
            'breeding': 'üíï',
            'pregnant': 'ü§∞',
            'birthing': 'üë∂',
            'lactating': 'üçº',
            'completed': '‚úÖ'
        };

        const message = `
${statusEmojis[update.status]} *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –≤–∞—à–∏–º –∫—Ä–æ–ª–∏–∫–∞–º*

üê∞ *–ü–∞—Ä–∞:* ${update.maleName} √ó ${update.femaleName}
üìä *–°—Ç–∞—Ç—É—Å:* ${this.getCycleStatusText(update.status)}
üîÑ *–¶–∏–∫–ª:* ${update.cycleNumber}/2

${update.details}

*üì∫ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ-–æ—Ç—á—ë—Ç:*
${update.videoUrl || '–ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è'}
        `;

        await this.sendMessage(userId, message, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üì∫ –í–∏–¥–µ–æ-–æ—Ç—á—ë—Ç', url: update.videoUrl || '#' },
                        { text: 'üê∞ –ú–æ–∏ –∫—Ä–æ–ª–∏–∫–∏', callback_data: 'my_rabbits' }
                    ]
                ]
            }
        });
    }

    // –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª–µ
    async publishToChannel(content) {
        const channelMessage = `
üê∞ *–ö—É–ø–∏—Ç—å–ö—Ä–æ–ª–∏–∫–∞ | –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–µ—Ä–º—ã*

${content.message}

${content.media ? `üì∏ ${content.media.length} —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ` : ''}

üí¨ –û–±—Å—É–∂–¥–µ–Ω–∏–µ: ${this.botUsername}
üåê –°–∞–π—Ç: https://xn--80apagbbfxgmuj4j.site
        `;

        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ Telegram Bot API
        console.log('üì¢ Publishing to channel:', channelMessage);
        
        return {
            messageId: Date.now(),
            url: `https://t.me/kupitkrolika/${Date.now()}`
        };
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ VIP-–≥—Ä—É–ø–ø–æ–π
    async inviteToVipGroup(userId, userName) {
        const inviteMessage = `
üåü *–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ VIP-–≥—Ä—É–ø–ø—É –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –ö—Ä—É–≥–∞ –ë*

–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É –∫—Ä—É–ø–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤.

*üíé –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ VIP-–≥—Ä—É–ø–ø—ã:*
‚Ä¢ –ü—Ä—è–º–æ–µ –æ–±—â–µ–Ω–∏–µ —Å —Ñ–µ—Ä–º–µ—Ä–æ–º
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –∏ —Ñ–æ—Ç–æ
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö
‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏—è—Ö
‚Ä¢ –ó–∞–∫—Ä—ã—Ç—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã –ø–ª–µ–º–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞

*üëá –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å:*
        `;

        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üåü –í–æ–π—Ç–∏ –≤ VIP-–≥—Ä—É–ø–ø—É', url: `https://t.me/kupitkrolika_vip` }
                ]
            ]
        };

        await this.sendMessage(userId, inviteMessage, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }

    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∞–π—Ç–æ–º
    async syncWithWebsite(userId, data) {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–∞–π—Ç–æ–º
        const syncData = {
            telegramId: userId,
            plexBalance: data.plexBalance,
            investments: data.investments,
            referralStats: data.referralStats,
            lastSync: new Date().toISOString()
        };

        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã API-–≤—ã–∑–æ–≤ –∫ —Å–∞–π—Ç—É
        console.log('üîÑ Syncing with website:', syncData);
        
        return syncData;
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    getCycleStatusText(status) {
        const statusMap = {
            'preparing': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–ª—É—á–∫–µ',
            'breeding': '–ü–µ—Ä–∏–æ–¥ —Å–ª—É—á–∫–∏',
            'pregnant': '–ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å',
            'birthing': '–†–æ–¥—ã',
            'lactating': '–í—ã–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏–µ',
            'completed': '–¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω'
        };
        return statusMap[status] || status;
    }

    getTimeAgo(timestamp) {
        const now = new Date();
        const time = new Date(timestamp);
        const diff = now - time;
        
        const minutes = Math.floor(diff / 60000);
        const hours = Math.floor(diff / 3600000);
        const days = Math.floor(diff / 86400000);
        
        if (minutes < 60) return `${minutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
        if (hours < 24) return `${hours} —á –Ω–∞–∑–∞–¥`;
        return `${days} –¥–Ω–µ–π –Ω–∞–∑–∞–¥`;
    }

    generateReferralCode(userId) {
        return 'REF' + userId.toString().slice(-6) + Math.random().toString(36).substr(2, 3).toUpperCase();
    }

    async getOrCreateUser(userId) {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return {
            id: userId,
            plexBalance: 0,
            usdtBalance: 0,
            totalInvested: 0,
            joinDate: new Date().toISOString(),
            referralCode: this.generateReferralCode(userId)
        };
    }

    async getUserData(userId) {
        return {
            plexBalance: 234.5678,
            usdtBalance: 150.00,
            totalInvested: 1000,
            referralCode: 'REF123ABC'
        };
    }

    async getTodayRewards(userId) {
        return 1.5; // 1.5 PLEX –∑–∞ –¥–µ–Ω—å
    }

    async getFeaturedRabbits() {
        return [
            { id: 1, name: '–ë–µ–ª–æ—Å–Ω–µ–∂–∫–∞', breed: '–ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏–π—Å–∫–∏–π', gender: 'female', age: 6, weight: 2.8, price: 150, status: 'available' },
            { id: 2, name: '–ì—Ä–∞—Ñ', breed: '–ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏–π—Å–∫–∏–π', gender: 'male', age: 8, weight: 3.5, price: 250, status: 'available' },
            { id: 3, name: '–°–µ—Ä—ã–π', breed: '–°–µ—Ä—ã–π –≤–µ–ª–∏–∫–∞–Ω', gender: 'male', age: 12, weight: 4.2, price: 300, status: 'reserved' }
        ];
    }

    async getUserInvestments(userId) {
        return [
            {
                rabbit: { id: 1, name: '–ë–µ–ª–æ—Å–Ω–µ–∂–∫–∞', breed: '–ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏–π—Å–∫–∏–π', gender: 'female', weight: 2.8 },
                amount: 500,
                currentCycle: { status: 'breeding', cycleNumber: 1 }
            }
        ];
    }

    async getLatestReports() {
        return [
            {
                title: '–£—Ç—Ä–µ–Ω–Ω–∏–π –æ–±—Ö–æ–¥ —Ñ–µ—Ä–º—ã',
                timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
                views: 156,
                url: 'https://example.com/video1'
            }
        ];
    }

    async getReferralStats(userId) {
        return {
            invited: 5,
            active: 3,
            earned: 125.50
        };
    }

    async sendMessage(userId, text, options = {}) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ Telegram Bot API
        console.log(`üí¨ Sending to ${userId}:`, text);
        return { message_id: Date.now() };
    }

    setupWebhook() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        console.log('üîó Webhook configured');
    }

    startNotificationService() {
        // –°–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        setInterval(() => {
            this.processNotificationQueue();
        }, 30000); // –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    }

    processNotificationQueue() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (this.notificationQueue.length > 0) {
            console.log(`üì§ Processing ${this.notificationQueue.length} notifications`);
            this.notificationQueue = [];
        }
    }

    initializeChannelIntegration() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫–∞–Ω–∞–ª–æ–º
        console.log('üì∫ Channel integration ready');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
window.telegramBot = new TelegramIntegration();

console.log('ü§ñ Telegram Bot integration loaded');