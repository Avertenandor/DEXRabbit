// –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏ –∫—Ä–æ–ª–∏–∫–æ–≤
class RabbitPairs {
    constructor() {
        this.pairs = [];
        this.cycles = [];
        this.pairRules = {
            minAge: 6, // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –≤ –º–µ—Å—è—Ü–∞—Ö
            maxAge: 36, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –≤ –º–µ—Å—è—Ü–∞—Ö
            gestation: 31, // –ø–µ—Ä–∏–æ–¥ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –¥–Ω—è—Ö
            lactation: 35, // –ø–µ—Ä–∏–æ–¥ –ª–∞–∫—Ç–∞—Ü–∏–∏ –≤ –¥–Ω—è—Ö
            recovery: 7, // –ø–µ—Ä–∏–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –¥–Ω—è—Ö
        };
        this.init();
    }

    init() {
        this.loadPairs();
        this.renderPairsInterface();
        this.startCycleMonitoring();
    }

    // –ü—Ä–∞–≤–∏–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—ã
    canFormPair(male, female) {
        const reasons = [];
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–∞
        if (male.gender !== 'male' || female.gender !== 'female') {
            reasons.push('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –ø–æ–ª–æ–≤');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
        if (male.age < this.pairRules.minAge) {
            reasons.push('–°–∞–º–µ—Ü —Å–ª–∏—à–∫–æ–º –º–æ–ª–æ–¥ (–º–∏–Ω. 6 –º–µ—Å)');
        }
        if (female.age < this.pairRules.minAge) {
            reasons.push('–°–∞–º–∫–∞ —Å–ª–∏—à–∫–æ–º –º–æ–ª–æ–¥–∞ (–º–∏–Ω. 6 –º–µ—Å)');
        }
        if (male.age > this.pairRules.maxAge) {
            reasons.push('–°–∞–º–µ—Ü —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä (–º–∞–∫—Å. 36 –º–µ—Å)');
        }
        if (female.age > this.pairRules.maxAge) {
            reasons.push('–°–∞–º–∫–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞ (–º–∞–∫—Å. 36 –º–µ—Å)');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        if (male.health !== 'excellent' || female.health !== 'excellent') {
            reasons.push('–¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ª–∏—á–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –æ–±–µ–∏—Ö –æ—Å–æ–±–µ–π');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        if (male.status !== 'available' || female.status !== 'available') {
            reasons.push('–û–¥–∏–Ω –∏–∑ –∫—Ä–æ–ª–∏–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–¥—ã (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ)
        if (male.breed !== female.breed) {
            reasons.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è –ø–æ—Ä–æ–¥–∞');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –≤ –ø–∞—Ä–µ
        if (this.isInActivePair(male.id) || this.isInActivePair(female.id)) {
            reasons.push('–û–¥–∏–Ω –∏–∑ –∫—Ä–æ–ª–∏–∫–æ–≤ —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞—Ä–µ');
        }
        
        return {
            canForm: reasons.length === 0,
            reasons: reasons
        };
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–∞—Ä—ã
    createPair(maleId, femaleId, investorId) {
        const male = this.getRabbitById(maleId);
        const female = this.getRabbitById(femaleId);
        
        if (!male || !female) {
            throw new Error('–ö—Ä–æ–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        const validation = this.canFormPair(male, female);
        if (!validation.canForm) {
            throw new Error('–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É: ' + validation.reasons.join(', '));
        }
        
        const pair = {
            id: this.generatePairId(),
            male: maleId,
            female: femaleId,
            investor: investorId,
            status: 'forming', // forming -> active -> cycle1 -> cycle2 -> completed
            createdAt: new Date().toISOString(),
            cycles: [],
            expectedCycles: 2,
            completedCycles: 0
        };
        
        this.pairs.push(pair);
        this.updateRabbitStatus([maleId, femaleId], 'paired');
        
        // –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —Ü–∏–∫–ª
        this.scheduleCycle(pair.id, 1);
        
        // –¢—Ä–µ–∫–∏–Ω–≥ —Å–æ–±—ã—Ç–∏—è
        if (window.analytics) {
            window.analytics.trackEvent('pair_created', {
                event_category: 'breeding',
                pair_id: pair.id,
                investor: investorId,
                breeds: `${male.breed}_${female.breed}`
            });
        }
        
        return pair;
    }

    // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏—è
    scheduleCycle(pairId, cycleNumber) {
        const pair = this.pairs.find(p => p.id === pairId);
        if (!pair) return;
        
        const now = new Date();
        const cycle = {
            id: `${pairId}_cycle_${cycleNumber}`,
            pairId: pairId,
            cycleNumber: cycleNumber,
            status: 'planned', // planned -> breeding -> pregnant -> birthing -> lactating -> completed
            stages: {
                breeding: {
                    startDate: now,
                    endDate: new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000), // 7 –¥–Ω–µ–π –Ω–∞ —Å–ª—É—á–∫—É
                    status: 'pending'
                },
                pregnancy: {
                    startDate: null,
                    endDate: null,
                    expectedDuration: this.pairRules.gestation,
                    status: 'pending'
                },
                birthing: {
                    startDate: null,
                    endDate: null,
                    expectedOffspring: 6, // —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–æ–ª—å—á–∞—Ç
                    actualOffspring: 0,
                    status: 'pending'
                },
                lactation: {
                    startDate: null,
                    endDate: null,
                    duration: this.pairRules.lactation,
                    status: 'pending'
                }
            },
            timeline: this.calculateCycleTimeline(now),
            expectedCompletion: new Date(now.getTime() + (this.pairRules.gestation + this.pairRules.lactation + 14) * 24 * 60 * 60 * 1000)
        };
        
        pair.cycles.push(cycle);
        this.cycles.push(cycle);
        
        return cycle;
    }

    // –†–∞—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏ —Ü–∏–∫–ª–∞
    calculateCycleTimeline(startDate) {
        const timeline = [];
        let currentDate = new Date(startDate);
        
        // –§–∞–∑–∞ —Å–ª—É—á–∫–∏ (7 –¥–Ω–µ–π)
        timeline.push({
            phase: 'breeding',
            startDate: new Date(currentDate),
            endDate: new Date(currentDate.getTime() + 7 * 24 * 60 * 60 * 1000),
            description: '–ü–µ—Ä–∏–æ–¥ —Å–ª—É—á–∫–∏'
        });
        
        currentDate = new Date(currentDate.getTime() + 7 * 24 * 60 * 60 * 1000);
        
        // –§–∞–∑–∞ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ (31 –¥–µ–Ω—å)
        timeline.push({
            phase: 'pregnancy',
            startDate: new Date(currentDate),
            endDate: new Date(currentDate.getTime() + this.pairRules.gestation * 24 * 60 * 60 * 1000),
            description: '–ü–µ—Ä–∏–æ–¥ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏'
        });
        
        currentDate = new Date(currentDate.getTime() + this.pairRules.gestation * 24 * 60 * 60 * 1000);
        
        // –§–∞–∑–∞ —Ä–æ–¥–æ–≤ –∏ –ª–∞–∫—Ç–∞—Ü–∏–∏ (35 –¥–Ω–µ–π)
        timeline.push({
            phase: 'lactation',
            startDate: new Date(currentDate),
            endDate: new Date(currentDate.getTime() + this.pairRules.lactation * 24 * 60 * 60 * 1000),
            description: '–ü–µ—Ä–∏–æ–¥ –ª–∞–∫—Ç–∞—Ü–∏–∏ –∏ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è'
        });
        
        currentDate = new Date(currentDate.getTime() + this.pairRules.lactation * 24 * 60 * 60 * 1000);
        
        // –§–∞–∑–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (7 –¥–Ω–µ–π)
        timeline.push({
            phase: 'recovery',
            startDate: new Date(currentDate),
            endDate: new Date(currentDate.getTime() + this.pairRules.recovery * 24 * 60 * 60 * 1000),
            description: '–ü–µ—Ä–∏–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è'
        });
        
        return timeline;
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—ã –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
    getPairStatusBadge(pair) {
        const statusConfig = {
            forming: { text: '–§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è', class: 'status-forming', icon: '‚è≥' },
            active: { text: '–ê–∫—Ç–∏–≤–Ω–∞—è', class: 'status-active', icon: 'üíï' },
            cycle1: { text: '–¶–∏–∫–ª 1', class: 'status-cycle1', icon: 'üê∞' },
            cycle2: { text: '–¶–∏–∫–ª 2', class: 'status-cycle2', icon: 'üê∞üê∞' },
            completed: { text: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ', class: 'status-completed', icon: '‚úÖ' },
            returning: { text: '–í–æ–∑–≤—Ä–∞—Ç —Ñ–µ—Ä–º–µ—Ä—É', class: 'status-returning', icon: 'üîÑ' }
        };
        
        const config = statusConfig[pair.status] || statusConfig.forming;
        
        return `
            <div class="pair-status-badge ${config.class}">
                <span class="status-icon">${config.icon}</span>
                <span class="status-text">${config.text}</span>
            </div>
        `;
    }

    // –ü—Ä–∞–≤–∏–ª–æ "2 —Ü–∏–∫–ª–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—Ç —Ñ–µ—Ä–º–µ—Ä—É"
    handlePairCompletion(pairId) {
        const pair = this.pairs.find(p => p.id === pairId);
        if (!pair) return;
        
        if (pair.completedCycles >= 2) {
            pair.status = 'returning';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫—Ä–æ–ª–∏–∫–æ–≤
            this.updateRabbitStatus([pair.male, pair.female], 'returning_to_farmer');
            
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞
            this.notifyInvestor(pair.investor, {
                type: 'pair_completed',
                message: `–ü–∞—Ä–∞ ${this.getPairName(pair)} –∑–∞–≤–µ—Ä—à–∏–ª–∞ 2 —Ü–∏–∫–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ñ–µ—Ä–º–µ—Ä—É`,
                pairId: pairId,
                cycles: pair.completedCycles,
                totalOffspring: this.getTotalOffspring(pair),
                expectedPayment: this.calculateFinalPayment(pair)
            });
            
            // –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã–∫—É–ø –ø–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ü–µ–Ω–µ
            this.scheduleBuyback(pair);
            
            // –¢—Ä–µ–∫–∏–Ω–≥
            if (window.analytics) {
                window.analytics.trackEvent('pair_completed', {
                    event_category: 'breeding',
                    pair_id: pairId,
                    cycles_completed: pair.completedCycles,
                    total_offspring: this.getTotalOffspring(pair)
                });
            }
        }
    }

    // –ü—Ä–∞–≤–∏–ª–æ "—Ñ–µ—Ä–º–µ—Ä –≤—ã–∫—É–ø–∞–µ—Ç –ø–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ü–µ–Ω–µ"
    scheduleBuyback(pair) {
        const male = this.getRabbitById(pair.male);
        const female = this.getRabbitById(pair.female);
        
        const buybackOffer = {
            id: this.generateBuybackId(),
            pairId: pair.id,
            investor: pair.investor,
            rabbits: [
                { id: pair.male, name: male.name, originalPrice: male.originalPrice },
                { id: pair.female, name: female.name, originalPrice: female.originalPrice }
            ],
            totalAmount: male.originalPrice + female.originalPrice,
            currency: 'USDT',
            status: 'pending',
            createdAt: new Date().toISOString(),
            deadline: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 –¥–Ω–µ–π –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ
            type: 'mandatory_buyback'
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –≤—ã–∫—É–ø–µ
        this.saveBuybackOffer(buybackOffer);
        
        return buybackOffer;
    }

    // –ü—Ä–∞–≤–∏–ª–æ —Å–µ–ª–µ–∫—Ü–∏–∏: "–∏–∑ –∫–∞–∂–¥–æ–≥–æ —ç—à–µ–ª–æ–Ω–∞ 1 –æ—Å—Ç–∞—ë—Ç—Å—è —Ñ–µ—Ä–º–µ—Ä—É"
    handleOffspringDistribution(cycleId, offspring) {
        const cycle = this.cycles.find(c => c.id === cycleId);
        if (!cycle) return;
        
        const pair = this.pairs.find(p => p.id === cycle.pairId);
        const totalOffspring = offspring.length;
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Ç–æ–º—Å—Ç–≤–æ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É (–≤–µ—Å, –∑–¥–æ—Ä–æ–≤—å–µ, —ç–∫—Å—Ç–µ—Ä—å–µ—Ä)
        const sortedOffspring = offspring.sort((a, b) => {
            const scoreA = this.calculateOffspringScore(a);
            const scoreB = this.calculateOffspringScore(b);
            return scoreB - scoreA; // –ª—É—á—à–∏–µ –ø–µ—Ä–≤—ã–º–∏
        });
        
        // –õ—É—á—à–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—Å—Ç–∞—ë—Ç—Å—è —Ñ–µ—Ä–º–µ—Ä—É –¥–ª—è —Å–µ–ª–µ–∫—Ü–∏–∏
        const forBreeding = sortedOffspring[0];
        const forSale = sortedOffspring.slice(1);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–∏–∫–ª–µ
        cycle.stages.birthing.actualOffspring = totalOffspring;
        cycle.distribution = {
            total: totalOffspring,
            forBreeding: 1,
            forSale: forSale.length,
            breedingRabbit: forBreeding,
            saleRabbits: forSale
        };
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞
        this.notifyInvestor(pair.investor, {
            type: 'offspring_born',
            message: `–†–æ–¥–∏–ª–æ—Å—å ${totalOffspring} –∫—Ä–æ–ª—å—á–∞—Ç. ${forSale.length} –ø–æ–π–¥—É—Ç –≤ –ø—Ä–æ–¥–∞–∂—É, 1 –æ—Å—Ç–∞—ë—Ç—Å—è –¥–ª—è —Å–µ–ª–µ–∫—Ü–∏–∏`,
            cycleId: cycleId,
            offspring: {
                total: totalOffspring,
                forSale: forSale.length,
                expectedRevenue: this.calculateExpectedRevenue(forSale)
            }
        });
        
        return {
            forBreeding: [forBreeding],
            forSale: forSale
        };
    }

    // –†–∞—Å—á—ë—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ—Ç–æ–º—Å—Ç–≤–∞
    calculateOffspringScore(rabbit) {
        return (
            (rabbit.weight / rabbit.age) * 10 + // –≤–µ—Å –∫ –≤–æ–∑—Ä–∞—Å—Ç—É
            rabbit.health * 2 + // –∑–¥–æ—Ä–æ–≤—å–µ
            rabbit.exterior * 1.5 + // —ç–∫—Å—Ç–µ—Ä—å–µ—Ä
            (rabbit.genetics?.parentQuality || 0) // –≥–µ–Ω–µ—Ç–∏–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–π
        );
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    generatePairId() {
        return 'pair_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }

    generateBuybackId() {
        return 'buyback_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }

    isInActivePair(rabbitId) {
        return this.pairs.some(pair => 
            (pair.male === rabbitId || pair.female === rabbitId) && 
            ['active', 'cycle1', 'cycle2'].includes(pair.status)
        );
    }

    getRabbitById(id) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ API
        return {
            id: id,
            name: `Rabbit ${id}`,
            age: 12,
            health: 'excellent',
            status: 'available',
            breed: '–ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏–π—Å–∫–∏–π',
            gender: id % 2 === 0 ? 'male' : 'female',
            originalPrice: 200
        };
    }

    updateRabbitStatus(rabbitIds, status) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫—Ä–æ–ª–∏–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        console.log(`Updating rabbits ${rabbitIds.join(', ')} status to ${status}`);
    }

    notifyInvestor(investorId, notification) {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–Ω–≤–µ—Å—Ç–æ—Ä—É
        console.log(`Notification to investor ${investorId}:`, notification);
    }

    saveBuybackOffer(offer) {
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –≤—ã–∫—É–ø–µ
        console.log('Buyback offer created:', offer);
    }

    getPairName(pair) {
        const male = this.getRabbitById(pair.male);
        const female = this.getRabbitById(pair.female);
        return `${male.name} √ó ${female.name}`;
    }

    getTotalOffspring(pair) {
        return pair.cycles.reduce((total, cycle) => {
            return total + (cycle.stages?.birthing?.actualOffspring || 0);
        }, 0);
    }

    calculateFinalPayment(pair) {
        // –†–∞—Å—á—ë—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤—ã–ø–ª–∞—Ç—ã –∏–Ω–≤–µ—Å—Ç–æ—Ä—É
        return pair.cycles.reduce((total, cycle) => {
            const revenue = this.calculateExpectedRevenue(cycle.distribution?.saleRabbits || []);
            return total + revenue * 0.7; // 70% –∏–Ω–≤–µ—Å—Ç–æ—Ä—É, 30% —Ñ–µ—Ä–º–µ
        }, 0);
    }

    calculateExpectedRevenue(rabbits) {
        return rabbits.reduce((total, rabbit) => {
            return total + (rabbit.expectedPrice || 150); // —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –∫—Ä–æ–ª—å—á–æ–Ω–∫–∞
        }, 0);
    }

    renderPairsInterface() {
        // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–¥–∞—á–∞—Ö
        console.log('Rabbit pairs system initialized');
    }

    startCycleMonitoring() {
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–∏–∫–ª–æ–≤ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏—è
        setInterval(() => {
            this.checkCycleProgress();
        }, 24 * 60 * 60 * 1000); // –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ –¥–µ–Ω—å
    }

    checkCycleProgress() {
        this.cycles.forEach(cycle => {
            if (cycle.status === 'planned') {
                // –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ü–∏–∫–ª–æ–≤
            }
        });
    }

    loadPairs() {
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ä
        this.pairs = [];
        this.cycles = [];
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä
window.rabbitPairs = new RabbitPairs();

console.log('üê∞ Rabbit Pairs system loaded');