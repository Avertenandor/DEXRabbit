const fs = require('fs');
const path = require('path');

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
const PATTERNS_TO_REMOVE = [
  // –°—Ç–∞—Ä–∞—è –∫–Ω–æ–ø–∫–∞ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
  /<!-- –ö–Ω–æ–ø–∫–∞ "–ù–∞ –≥–ª–∞–≤–Ω—É—é" -->[\s\S]*?<\/div>\s*<\/div>\s*<!-- Hero Section -->/,
  // –°—Ç–∞—Ä—ã–µ —Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–∫–∏
  /\/\* –ö–Ω–æ–ø–∫–∞ "–ù–∞ –≥–ª–∞–≤–Ω—É—é" \*\/[\s\S]*?\.btn-back-home:active \{[\s\S]*?\}/,
  // –°—Ç–∞—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è V2
  /<header class="navbar">[\s\S]*?<\/header>/,
  // –°—Ç–∞—Ä—ã–µ CSS navigation-v2
  /<!-- Navigation V2.*?-->\s*<link.*?navigation-v2\.css.*?>/g,
  // –î—É–±–ª–∏–∫–∞—Ç—ã mobile-critical-fix
  /<!-- Mobile Critical Fix -->\s*<link.*?mobile-critical-fix\.css.*?>\s*/g,
];

function findHTMLFiles(dir, fileList = []) {
  const files = fs.readdirSync(dir);
  
  files.forEach((file) => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat.isDirectory()) {
      if (!['archive', 'templates', 'node_modules', '.git'].includes(file)) {
        findHTMLFiles(filePath, fileList);
      }
    } else if (file.endsWith('.html') && file !== 'demo-megamenu.html') {
      fileList.push(filePath);
    }
  });
  
  return fileList;
}

console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –æ—Ç —Å—Ç–∞—Ä—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...\n');

const htmlFiles = findHTMLFiles(process.cwd());
let cleanedCount = 0;

htmlFiles.forEach((filePath) => {
  const relativePath = path.relative(process.cwd(), filePath);
  let content = fs.readFileSync(filePath, 'utf8');
  const originalContent = content;
  
  // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
  content = content.replace(/<!-- –ö–Ω–æ–ø–∫–∞ "–ù–∞ –≥–ª–∞–≤–Ω—É—é" -->[\s\S]*?<\/div>\s*<\/div>\s*\n\s*<!-- Hero Section -->/m, '        <!-- Hero Section -->');
  
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–∫–∏
  content = content.replace(/\/\* –ö–Ω–æ–ø–∫–∞ "–ù–∞ –≥–ª–∞–≤–Ω—É—é" \*\/[\s\S]*?\.btn-back-home:active \{[\s\S]*?\}/m, '');
  
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é header.navbar
  content = content.replace(/<header class="navbar">[\s\S]*?<\/header>\s*/m, '');
  
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ CSS links
  content = content.replace(/<!-- Navigation V2.*?-->\s*<link.*?navigation-v2\.css.*?>\s*/g, '');
  
  // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –û–î–ò–ù mobile-critical-fix (–ø–æ—Å–ª–µ–¥–Ω–∏–π)
  const mobileFixes = content.match(/<!-- Mobile Critical Fix -->\s*<link.*?mobile-critical-fix\.css.*?>\s*/g);
  if (mobileFixes && mobileFixes.length > 1) {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
    for (let i = 0; i < mobileFixes.length - 1; i++) {
      content = content.replace(mobileFixes[i], '');
    }
  }
  
  // –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
  content = content.replace(/\n{3,}/g, '\n\n');
  
  if (originalContent !== content) {
    fs.writeFileSync(filePath, content, 'utf8');
    cleanedCount++;
    console.log(`‚úÖ ${relativePath} - –æ—á–∏—â–µ–Ω–æ`);
  } else {
    console.log(`‚ö™ ${relativePath} - –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π`);
  }
});

console.log(`\nüìä –ò–¢–û–ì–û:`);
console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${htmlFiles.length}`);
console.log(`   –û—á–∏—â–µ–Ω–æ: ${cleanedCount}`);
console.log(`   –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${htmlFiles.length - cleanedCount}`);

console.log('\n‚úÖ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!');

