const fs = require('fs');
const path = require('path');

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å—Ç–∞—Ä—ã—Ö CSS/JS –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
const OLD_NAV_PATTERNS = [
  /<link[^>]*href="\/assets\/css\/navigation\.css[^>]*>/gi,
  /<link[^>]*href="\/assets\/css\/mega-menu\.css[^>]*>/gi,
  /<link[^>]*href="\/assets\/css\/nav-refactor\.css[^>]*>/gi,
  /<link[^>]*href="\/assets\/css\/nav-fix\.css[^>]*>/gi,
  /<link[^>]*href="\/assets\/css\/mega-menu-click-only\.css[^>]*>/gi,
  /<link[^>]*href="\/assets\/css\/mega-menu-stable\.css[^>]*>/gi,
  /<script[^>]*src="\/assets\/js\/navigation-data\.js[^>]*>[\s\S]*?<\/script>/gi,
  /<script[^>]*src="\/assets\/js\/mega-menu-click-only\.js[^>]*>[\s\S]*?<\/script>/gi,
  /<script[^>]*src="\/assets\/js\/mega-menu-stable\.js[^>]*>[\s\S]*?<\/script>/gi,
  /<script[^>]*src="\/assets\/js\/nav\.js[^>]*>[\s\S]*?<\/script>/gi,
];

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ HTML —Ñ–∞–π–ª—ã
function findHTMLFiles(dir, fileList = []) {
  const files = fs.readdirSync(dir);
  
  files.forEach((file) => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat.isDirectory()) {
      if (!['archive', 'templates', 'node_modules', '.git'].includes(file)) {
        findHTMLFiles(filePath, fileList);
      }
    } else if (file.endsWith('.html')) {
      fileList.push(filePath);
    }
  });
  
  return fileList;
}

console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å—Ç–∞—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...\n');

const htmlFiles = findHTMLFiles(process.cwd());
let cleanedCount = 0;

htmlFiles.forEach((filePath) => {
  const relativePath = path.relative(process.cwd(), filePath);
  let content = fs.readFileSync(filePath, 'utf8');
  const originalContent = content;
  
  let changes = 0;
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
  OLD_NAV_PATTERNS.forEach((pattern) => {
    const matches = content.match(pattern);
    if (matches) {
      changes += matches.length;
      content = content.replace(pattern, '');
    }
  });
  
  // –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
  content = content.replace(/\n{3,}/g, '\n\n');
  
  if (originalContent !== content) {
    fs.writeFileSync(filePath, content, 'utf8');
    cleanedCount++;
    console.log(`‚úÖ ${relativePath} - —É–¥–∞–ª–µ–Ω–æ ${changes} —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç–∞—Ä—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é`);
  } else {
    console.log(`‚ö™ ${relativePath} - —á–∏—Å—Ç–æ`);
  }
});

console.log(`\nüìä –ò–¢–û–ì–û:`);
console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${htmlFiles.length}`);
console.log(`   –û—á–∏—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${cleanedCount}`);
console.log(`   –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${htmlFiles.length - cleanedCount}`);

console.log('\n‚úÖ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!');

