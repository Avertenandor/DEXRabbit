#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞ DEXRabbit
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ HTML —Ñ–∞–π–ª—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
 */

const fs = require('fs').promises;
const path = require('path');

// HTML —à–∞–±–ª–æ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
const NAVIGATION_TEMPLATE = `    <!-- Navigation -->
    <nav class="navbar" role="navigation">
      <div class="container">
        <!-- Logo Section -->
        <div class="navbar-header">
          <div class="logo-wrapper">
            <a href="/" class="site-logo">
              <img src="/favicon.svg" alt="DEXRabbit" />
              <div class="logo-text">
                <span class="logo-title">DEXRabbit</span>
                <span class="logo-slogan">–¢–≤–æ–π –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –Ω–∞ –∫—Ä–æ–ª–∏–∫–∞—Ö</span>
              </div>
            </a>
          </div>
          <button class="mobile-nav-toggle burger" aria-label="–ú–µ–Ω—é" data-burger>‚ò∞</button>
        </div>

        <!-- Navigation Links -->
        <div class="navbar-inner">
          <div class="nav-links" id="nav-menu" data-menu>
            <!-- –ù–∞–≤–∏–≥–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑ navigation-data.js -->
            <!-- Primary Navigation -->
            <div class="nav-group nav-primary"></div>

            <!-- Dropdown Menu -->
            <div class="nav-group nav-dropdown">
              <button
                class="nav-dropdown-toggle"
                type="button"
                aria-haspopup="true"
                aria-expanded="false"
                aria-controls="nav-dropdown-menu"
              >
                –ï—â—ë <span class="dropdown-arrow" aria-hidden="true">‚ñæ</span>
              </button>
              <div class="nav-dropdown-content" id="nav-dropdown-menu" role="menu" hidden></div>
            </div>

            <!-- CTA Button -->
            <div class="nav-cta-wrapper"></div>
          </div>
        </div>
      </div>
    </nav>`;

// –°–∫—Ä–∏–ø—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∫–æ–Ω—Ü–µ body
const NAVIGATION_SCRIPTS = `    <!-- Navigation scripts -->
    <script defer src="/assets/js/navigation-data.js?v=2.0"></script>
    <script defer src="/assets/js/nav.js?v=20250930"></script>`;

// –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∏—Å–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã)
const pagesToUpdate = [
  'index.html',
  'therapy.html',
  'care.html',
  'breeding.html',
  'gifts.html',
  'restaurants.html',
  'rabbits-hares.html',
  'cats-rabbits.html',
  'investment-model.html',
  'partnership.html',
  'investors.html',
  'reports.html',
  'development.html',
  'logistics.html',
  'guarantees.html',
  'contacts.html',
  'careers.html',
];

async function updateNavigation(filePath) {
  try {
    console.log(`üìù –û–±–Ω–æ–≤–ª—è—é: ${filePath}`);

    let content = await fs.readFile(filePath, 'utf8');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –¥–ª—è –æ—Ç–∫–∞—Ç–∞
    const backupPath = filePath.replace('.html', '.backup.html');
    await fs.writeFile(backupPath, content);

    // –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    const navStartPattern = /<!-- Navigation -->/;
    const navEndPattern = /<\/nav>/;

    const navStartIndex = content.search(navStartPattern);
    const navEndIndex = content.indexOf('</nav>', navStartIndex);

    if (navStartIndex !== -1 && navEndIndex !== -1) {
      // –í—ã—Ä–µ–∑–∞–µ–º —Å—Ç–∞—Ä—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
      const beforeNav = content.substring(0, navStartIndex);
      const afterNav = content.substring(navEndIndex + 7); // 7 = length of '</nav>'

      content = beforeNav + NAVIGATION_TEMPLATE + afterNav;

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è navigation-data.js –∏ nav.js
      content = content.replace(/<script[^>]*navigation-data\.js[^>]*><\/script>\s*/g, '');
      content = content.replace(/<script[^>]*nav\.js[^>]*><\/script>\s*/g, '');

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º body
      const bodyCloseIndex = content.lastIndexOf('</body>');
      if (bodyCloseIndex !== -1) {
        // –ò—â–µ–º –º–µ—Å—Ç–æ –ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–∫—Ä–∏–ø—Ç–æ–º –∏–ª–∏ –ø–µ—Ä–µ–¥ </body>
        const lastScriptIndex = content.lastIndexOf('<script>', bodyCloseIndex);

        if (lastScriptIndex !== -1 && lastScriptIndex > navEndIndex) {
          // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏
          content =
            content.substring(0, lastScriptIndex) +
            NAVIGATION_SCRIPTS +
            '\n\n' +
            content.substring(lastScriptIndex);
        } else {
          // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ </body>
          content =
            content.substring(0, bodyCloseIndex) +
            '\n' +
            NAVIGATION_SCRIPTS +
            '\n  ' +
            content.substring(bodyCloseIndex);
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      await fs.writeFile(filePath, content);
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: ${filePath}`);

      return true;
    } else {
      console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –≤: ${filePath}`);
      return false;
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ${filePath}:`, error.message);
    return false;
  }
}

async function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö...\n');

  const results = {
    success: [],
    failed: [],
    skipped: [],
  };

  for (const fileName of pagesToUpdate) {
    const filePath = path.join('C:\\Users\\konfu\\Desktop\\–ö—Ä–æ–ª–∏–∫–∏', fileName);

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
      await fs.access(filePath);

      const updated = await updateNavigation(filePath);
      if (updated) {
        results.success.push(fileName);
      } else {
        results.failed.push(fileName);
      }
    } catch {
      console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω (–Ω–µ –Ω–∞–π–¥–µ–Ω): ${fileName}`);
      results.skipped.push(fileName);
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 100));
  }

  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\n' + '='.repeat(50));
  console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
  console.log('='.repeat(50));
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${results.success.length} —Ñ–∞–π–ª–æ–≤`);
  if (results.success.length > 0) {
    results.success.forEach(f => console.log(`   - ${f}`));
  }

  if (results.failed.length > 0) {
    console.log(`\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å: ${results.failed.length} —Ñ–∞–π–ª–æ–≤`);
    results.failed.forEach(f => console.log(`   - ${f}`));
  }

  if (results.skipped.length > 0) {
    console.log(`\n‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${results.skipped.length} —Ñ–∞–π–ª–æ–≤`);
    results.skipped.forEach(f => console.log(`   - ${f}`));
  }

  console.log('\nüí° –°–æ–≤–µ—Ç: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è!');
  console.log('üìù –°–æ–∑–¥–∞–Ω—ã —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ (.backup.html)');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main().catch(console.error);
