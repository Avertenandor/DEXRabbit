const fs = require('fs');
const path = require('path');

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ HTML —Ñ–∞–π–ª—ã
function findHTMLFiles(dir, fileList = []) {
  const files = fs.readdirSync(dir);
  
  files.forEach((file) => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat.isDirectory()) {
      if (!['archive', 'templates', 'node_modules', '.git'].includes(file)) {
        findHTMLFiles(filePath, fileList);
      }
    } else if (file.endsWith('.html')) {
      fileList.push(filePath);
    }
  });
  
  return fileList;
}

console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ navigation-v2.js –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö...\n');

const htmlFiles = findHTMLFiles(process.cwd());
let updatedCount = 0;

htmlFiles.forEach((filePath) => {
  const relativePath = path.relative(process.cwd(), filePath);
  let content = fs.readFileSync(filePath, 'utf8');
  const originalContent = content;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é JS
  content = content.replace(
    /navigation-v2\.js\?v=20251001-v2/g,
    'navigation-v2.js?v=20251001-hover-fix'
  );
  
  if (originalContent !== content) {
    fs.writeFileSync(filePath, content, 'utf8');
    updatedCount++;
    console.log(`‚úÖ ${relativePath} - –≤–µ—Ä—Å–∏—è JS –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
  } else {
    console.log(`‚ö™ ${relativePath} - —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–ª–∏ –Ω–µ—Ç navigation-v2.js`);
  }
});

console.log(`\nüìä –ò–¢–û–ì–û:`);
console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${htmlFiles.length}`);
console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount}`);
console.log(`   –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${htmlFiles.length - updatedCount}`);

console.log('\n‚úÖ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');

