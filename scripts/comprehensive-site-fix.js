const fs = require('fs');
const path = require('path');

console.log('üîç –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í–°–ï–• –°–¢–†–ê–ù–ò–¶ –°–ê–ô–¢–ê...\n');

// –ß–∏—Ç–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–π —Ñ—É—Ç–µ—Ä –∏–∑ index.html
const indexHTML = fs.readFileSync('index.html', 'utf8');
const footerMatch = indexHTML.match(/<footer class="footer">[\s\S]*?<\/footer>/);
const footerStylesMatch = indexHTML.match(/<!-- –°—Ç–∏–ª–∏ –¥–ª—è footer -->[\s\S]*?<\/style>/);
const referenceFooter = footerMatch ? footerMatch[0] : '';
const footerStyles = footerStylesMatch ? footerStylesMatch[0] : '';

function findHTMLFiles(dir, fileList = []) {
  const files = fs.readdirSync(dir);
  files.forEach((file) => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    if (stat.isDirectory()) {
      if (!['archive', 'templates', 'node_modules', '.git'].includes(file)) {
        findHTMLFiles(filePath, fileList);
      }
    } else if (file.endsWith('.html') && !file.includes('demo') && file !== 'index.html') {
      fileList.push(filePath);
    }
  });
  return fileList;
}

const htmlFiles = findHTMLFiles(process.cwd());
let fixedCount = 0;

htmlFiles.forEach((filePath) => {
  const relativePath = path.relative(process.cwd(), filePath);
  let content = fs.readFileSync(filePath, 'utf8');
  let changes = [];

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ base CSS
  if (!content.includes('main.css')) {
    content = content.replace(
      /<link[^>]*rel="stylesheet"[^>]*>/,
      '<link rel="stylesheet" href="/assets/css/main.css">\n    <link rel="stylesheet" href="/assets/css/variables.css">\n    $&'
    );
    changes.push('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã base CSS');
  }

  // 2. –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞—Ä—ã—Ö –Ω–∞–≤–∏–≥–∞—Ü–∏–π
  content = content.replace(/<header class="navbar"[^>]*>[\s\S]*?<\/header>/g, '');
  content = content.replace(/<header class="header">[\s\S]*?<\/header>/g, '');
  
  // 3. –ó–∞–º–µ–Ω–∞ CTA –∫–Ω–æ–ø–∫–∏ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞ –±–æ—Ç
  content = content.replace(
    /<a href="\/#investment" class="nav-beautiful__cta">/g,
    '<a href="https://t.me/dexrabbit_bot" target="_blank" class="nav-beautiful__cta">'
  );
  content = content.replace(
    /<span>–ù–∞—á–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å<\/span>/g,
    '<span>–û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç</span>'
  );

  // 4. –ó–∞–º–µ–Ω–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ—É—Ç–µ—Ä–∞ –Ω–∞ —ç—Ç–∞–ª–æ–Ω–Ω—ã–π (–µ—Å–ª–∏ –æ–Ω –Ω–µ–ø–æ–ª–Ω—ã–π)
  const hasOldFooter = content.includes('<footer') && !content.includes('footer-grid');
  if (hasOldFooter) {
    content = content.replace(/<footer[\s\S]*?<\/footer>/, referenceFooter);
    changes.push('‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω —Ñ—É—Ç–µ—Ä');
  }

  // 5. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ footer styles –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
  if (content.includes('<footer') && !content.includes('Footer Styles')) {
    content = content.replace('</footer>', '</footer>\n\n' + footerStyles);
    changes.push('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã footer styles');
  }

  // 6. –ó–∞–º–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
  const contactReplacements = {
    'kupitkrolika.ru': 'kupitkrolika@gmail.com',
    'info@kupitkrolika.ru': 'kupitkrolika@gmail.com',
    'invest@kupitkrolika.ru': 'kupitkrolika@gmail.com',
    'breeding@kupitkrolika.ru': 'kupitkrolika@gmail.com',
    'delivery@kupitkrolika.ru': 'kupitkrolika@gmail.com',
    'gifts@kupitkrolika.ru': 'kupitkrolika@gmail.com',
    'vet@kupitkrolika.ru': 'kupitkrolika@gmail.com',
    'b2b@kupitkrolika.ru': 'kupitkrolika@gmail.com',
    '@kupitkrolika': '@dexrabbit_bot',
    '–ü–æ–¥–æ–ª—å—Å–∫': '–º–µ–∂–¥—É –£–ª–∞–Ω-–£–¥—ç –∏ –æ–∑–µ—Ä–æ–º –ë–∞–π–∫–∞–ª',
    '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë—É—Ä—è—Ç–∏—è',
  };

  Object.entries(contactReplacements).forEach(([old, newVal]) => {
    if (content.includes(old)) {
      content = content.replaceAll(old, newVal);
      changes.push(`‚úÖ –ó–∞–º–µ–Ω—ë–Ω ${old}`);
    }
  });

  // 7. –£–¥–∞–ª–µ–Ω–∏–µ –±–∏—Ç—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
  content = content.replace(/<a[^>]*tel:\+7\d{10}[^>]*>.*?<\/a>/g, '');
  content = content.replace(/<a[^>]*wa\.me\/\d+[^>]*>.*?<\/a>/g, '');

  // 8. –£–¥–∞–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã (—É–¥–∞–ª—ë–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
  if (content.includes('/restaurants.html')) {
    content = content.replace(/<a[^>]*href="\/restaurants\.html"[^>]*>.*?<\/a>/g, '');
    changes.push('‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã');
  }

  // 9. –û—á–∏—Å—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
  content = content.replace(/\n{4,}/g, '\n\n\n');

  if (changes.length > 0) {
    fs.writeFileSync(filePath, content, 'utf8');
    fixedCount++;
    console.log(`‚úÖ ${relativePath}:`);
    changes.forEach(c => console.log(`   ${c}`));
  } else {
    console.log(`‚ö™ ${relativePath} - OK`);
  }
});

console.log(`\nüìä –ò–¢–û–ì–û:`);
console.log(`   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${htmlFiles.length} —Ñ–∞–π–ª–æ–≤`);
console.log(`   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${fixedCount} —Ñ–∞–π–ª–æ–≤`);
console.log(`\n‚úÖ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!`);

