const fs = require('fs');
const path = require('path');

// CSS –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ñ–∏–∫—Å–∞
const MOBILE_FIX_CSS = `    <!-- Mobile Critical Fix -->
    <link rel="stylesheet" href="/assets/css/mobile-critical-fix.css?v=20251001-mobile-fix" />`;

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ HTML —Ñ–∞–π–ª—ã
function findHTMLFiles(dir, fileList = []) {
  const files = fs.readdirSync(dir);
  
  files.forEach((file) => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat.isDirectory()) {
      if (!['archive', 'templates', 'node_modules', '.git'].includes(file)) {
        findHTMLFiles(filePath, fileList);
      }
    } else if (file.endsWith('.html')) {
      fileList.push(filePath);
    }
  });
  
  return fileList;
}

console.log('üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Mobile Critical Fix –Ω–∞ –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...\n');

const htmlFiles = findHTMLFiles(process.cwd());
let updatedCount = 0;

htmlFiles.forEach((filePath) => {
  const relativePath = path.relative(process.cwd(), filePath);
  let content = fs.readFileSync(filePath, 'utf8');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ mobile-critical-fix
  if (content.includes('mobile-critical-fix.css')) {
    console.log(`‚ö™ ${relativePath} - —É–∂–µ –µ—Å—Ç—å mobile-critical-fix`);
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ </head>
  if (!content.includes('</head>')) {
    console.log(`‚ö†Ô∏è  ${relativePath} - –Ω–µ—Ç —Ç–µ–≥–∞ </head>, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
    return;
  }
  
  // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ </head>
  content = content.replace('</head>', MOBILE_FIX_CSS + '\n  </head>');
  
  fs.writeFileSync(filePath, content, 'utf8');
  updatedCount++;
  console.log(`‚úÖ ${relativePath} - Mobile Critical Fix –¥–æ–±–∞–≤–ª–µ–Ω`);
});

console.log(`\nüìä –ò–¢–û–ì–û:`);
console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${htmlFiles.length}`);
console.log(`   –î–æ–±–∞–≤–ª–µ–Ω–æ Mobile Fix: ${updatedCount}`);
console.log(`   –£–∂–µ –±—ã–ª–æ –∏–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${htmlFiles.length - updatedCount}`);

console.log('\n‚úÖ –î–û–ë–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');

