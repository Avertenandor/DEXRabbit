const fs = require('fs');
const path = require('path');

console.log('üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ù–ê–í–ò–ì–ê–¶–ò–ò –ù–ê –í–°–ï–• –°–¢–†–ê–ù–ò–¶–ê–•...\n');

// –ß–∏—Ç–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏–∑ index.html
const indexHTML = fs.readFileSync('index.html', 'utf8');
const navMatch = indexHTML.match(/<nav class="nav-beautiful">[\s\S]*?<\/nav>/);

if (!navMatch) {
  console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –≤ index.html!');
  process.exit(1);
}

const referenceNav = navMatch[0];

function findHTMLFiles(dir, fileList = []) {
  const files = fs.readdirSync(dir);
  files.forEach((file) => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    if (stat.isDirectory()) {
      if (!['archive', 'templates', 'node_modules', '.git'].includes(file)) {
        findHTMLFiles(filePath, fileList);
      }
    } else if (file.endsWith('.html') && !file.includes('demo') && file !== 'index.html') {
      fileList.push(filePath);
    }
  });
  return fileList;
}

const htmlFiles = findHTMLFiles(process.cwd());
let updatedCount = 0;

htmlFiles.forEach((filePath) => {
  const relativePath = path.relative(process.cwd(), filePath);
  let content = fs.readFileSync(filePath, 'utf8');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ investor-cards.css
  if (!content.includes('investor-cards.css')) {
    content = content.replace(
      /<link rel="stylesheet" href="\/assets\/css\/performance\.css"/,
      '<link rel="stylesheet" href="/assets/css/performance.css" />\n    <link rel="stylesheet" href="/assets/css/investor-cards.css" />'
    );
  }
  
  // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –Ω–∞ —ç—Ç–∞–ª–æ–Ω–Ω—É—é
  const hasNav = content.includes('<nav class="nav-beautiful">');
  if (hasNav) {
    content = content.replace(
      /<nav class="nav-beautiful">[\s\S]*?<\/nav>/,
      referenceNav
    );
    updatedCount++;
    console.log(`‚úÖ ${relativePath}`);
  } else {
    console.log(`‚ö†Ô∏è  ${relativePath} - –Ω–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏`);
  }
  
  fs.writeFileSync(filePath, content, 'utf8');
});

console.log(`\nüìä –ò–¢–û–ì–û:`);
console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${htmlFiles.length}`);
console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: ${updatedCount}`);
console.log('\n‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!');

