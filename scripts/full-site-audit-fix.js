const fs = require('fs');
const path = require('path');

console.log('üîç –ü–û–õ–ù–´–ô –ê–£–î–ò–¢ –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í–°–ï–• –°–¢–†–ê–ù–ò–¶...\n');

function findHTMLFiles(dir, fileList = []) {
  const files = fs.readdirSync(dir);
  files.forEach((file) => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    if (stat.isDirectory()) {
      if (!['archive', 'templates', 'node_modules', '.git'].includes(file)) {
        findHTMLFiles(filePath, fileList);
      }
    } else if (file.endsWith('.html') && !file.includes('demo')) {
      fileList.push(filePath);
    }
  });
  return fileList;
}

const htmlFiles = findHTMLFiles(process.cwd());
const report = [];

htmlFiles.forEach((filePath) => {
  const relativePath = path.relative(process.cwd(), filePath);
  let content = fs.readFileSync(filePath, 'utf8');
  let issues = [];
  let fixed = false;

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ main.css
  if (!content.includes('main.css')) {
    content = content.replace('</head>', '    <link rel="stylesheet" href="/assets/css/main.css">\n  </head>');
    issues.push('–î–æ–±–∞–≤–ª–µ–Ω main.css');
    fixed = true;
  }

  // 2. –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (—Å—Ç–∞—Ä—ã–µ header.navbar)
  const oldNavMatches = content.match(/<header class="navbar"[\s\S]*?<\/header>/g);
  if (oldNavMatches && oldNavMatches.length > 0) {
    oldNavMatches.forEach(() => {
      content = content.replace(/<header class="navbar"[\s\S]*?<\/header>/, '');
    });
    issues.push('–£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ header.navbar');
    fixed = true;
  }

  // 3. –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ header.header
  const headerMatches = content.match(/<header class="header">[\s\S]*?<\/header>/g);
  if (headerMatches && headerMatches.length > 0) {
    headerMatches.forEach(() => {
      content = content.replace(/<header class="header">[\s\S]*?<\/header>/, '');
    });
    issues.push('–£–¥–∞–ª–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã header');
    fixed = true;
  }

  // 4. –ó–∞–º–µ–Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
  const invalidContacts = [
    { old: '@kupitkrolika', new: '@dexrabbit_bot' },
    { old: 'kupitkrolika.ru', new: 'kupitkrolika@gmail.com' },
    { old: 'info@kupitkrolika.ru', new: 'kupitkrolika@gmail.com' },
    { old: '+7 (999) 123-45-67', new: '' },
    { old: '–ü–æ–¥–æ–ª—å—Å–∫', new: '–º–µ–∂–¥—É –£–ª–∞–Ω-–£–¥—ç –∏ –æ–∑–µ—Ä–æ–º –ë–∞–π–∫–∞–ª, –†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë—É—Ä—è—Ç–∏—è' },
  ];

  invalidContacts.forEach(({ old, new: newValue }) => {
    if (content.includes(old) && newValue) {
      content = content.replaceAll(old, newValue);
      issues.push(`–ó–∞–º–µ–Ω—ë–Ω ${old}`);
      fixed = true;
    } else if (content.includes(old) && !newValue) {
      // –£–¥–∞–ª—è–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã
      content = content.replace(new RegExp(`<a[^>]*tel:.*?${old.replace(/[+()]/g, '\\$&')}.*?</a>`, 'g'), '');
      issues.push(`–£–¥–∞–ª—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω`);
      fixed = true;
    }
  });

  // 5. –ó–∞–º–µ–Ω–∞ —Å—Ç–∞—Ä–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (content.includes('0x41d9650faf3341cbf8947fd8063a1fc88dbf1889')) {
    // –≠—Ç–æ pool address, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
  }

  // 6. –û—á–∏—Å—Ç–∫–∞ –ª–∏—à–Ω–∏—Ö –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
  content = content.replace(/\n{4,}/g, '\n\n\n');

  if (fixed) {
    fs.writeFileSync(filePath, content, 'utf8');
    report.push({ file: relativePath, issues });
    console.log(`‚úÖ ${relativePath} - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${issues.join(', ')}`);
  } else {
    console.log(`‚ö™ ${relativePath} - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π`);
  }
});

console.log(`\nüìä –ò–¢–û–ì–û:`);
console.log(`   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${htmlFiles.length}`);
console.log(`   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${report.length}`);

if (report.length > 0) {
  fs.writeFileSync(
    'reports/audit-fix-report.json',
    JSON.stringify(report, null, 2),
    'utf8'
  );
  console.log(`\nüìÅ –û—Ç—á—ë—Ç: reports/audit-fix-report.json`);
}

console.log('\n‚úÖ –ê–£–î–ò–¢ –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');

