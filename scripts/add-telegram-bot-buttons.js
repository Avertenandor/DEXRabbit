const fs = require('fs');
const path = require('path');

const BOT_LINK = 'https://t.me/dexrabbit_bot';

// –ö–Ω–æ–ø–∫–∞ 1: –û—Å–Ω–æ–≤–Ω–∞—è (–¥–ª—è Hero/–≤–µ—Ä—Ö–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
const BOT_BUTTON_PRIMARY = `
            <!-- Telegram Bot CTA -->
            <div class="bot-cta-wrapper" style="display: flex; gap: 16px; justify-content: center; margin: 32px 0; flex-wrap: wrap;">
              <a href="${BOT_LINK}" target="_blank" class="bot-cta-primary" style="display: inline-flex; align-items: center; gap: 10px; padding: 16px 32px; background: linear-gradient(135deg, #7c8cff 0%, #4cc9f0 100%); border: 2px solid rgba(255, 255, 255, 0.3); border-radius: 28px; color: #fff; font-size: 16px; font-weight: 700; text-decoration: none; box-shadow: 0 8px 32px rgba(124, 140, 255, 0.5); transition: all 0.3s ease;">
                <span style="font-size: 24px;">ü§ñ</span>
                <span>–û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç DEXRabbit</span>
              </a>
            </div>`;

// –ö–Ω–æ–ø–∫–∞ 2: –í—Ç–æ—Ä–∏—á–Ω–∞—è (–¥–ª—è –Ω–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
const BOT_BUTTON_SECONDARY = `
            <!-- Telegram Bot Link -->
            <div class="bot-link-wrapper" style="text-align: center; margin: 40px 0; padding: 32px; background: linear-gradient(135deg, rgba(124, 140, 255, 0.1), rgba(76, 201, 240, 0.05)); border: 1px solid rgba(124, 140, 255, 0.3); border-radius: 20px;">
              <h3 style="margin-bottom: 16px; color: #fff; font-size: 22px;">ü§ñ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ Telegram –±–æ—Ç–µ</h3>
              <p style="margin-bottom: 24px; color: rgba(255, 255, 255, 0.8); font-size: 15px;">–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞, –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</p>
              <a href="${BOT_LINK}" target="_blank" class="bot-cta-secondary" style="display: inline-flex; align-items: center; gap: 10px; padding: 14px 28px; background: rgba(124, 140, 255, 0.15); border: 2px solid rgba(124, 140, 255, 0.5); border-radius: 28px; color: #fff; font-size: 15px; font-weight: 600; text-decoration: none; transition: all 0.3s ease;">
                <span style="font-size: 20px;">üí¨</span>
                <span>–ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç @dexrabbit_bot</span>
              </a>
            </div>`;

function findHTMLFiles(dir, fileList = []) {
  const files = fs.readdirSync(dir);
  
  files.forEach((file) => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat.isDirectory()) {
      if (!['archive', 'templates', 'node_modules', '.git'].includes(file)) {
        findHTMLFiles(filePath, fileList);
      }
    } else if (file.endsWith('.html') && file !== 'demo-megamenu.html' && file !== 'index.html') {
      fileList.push(filePath);
    }
  });
  
  return fileList;
}

console.log('ü§ñ –î–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫–∏ Telegram –±–æ—Ç–∞ –Ω–∞ –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–º–∏–Ω–∏–º—É–º 2 –Ω–∞ –∫–∞–∂–¥–æ–π)...\n');

const htmlFiles = findHTMLFiles(process.cwd());
let updatedCount = 0;

htmlFiles.forEach((filePath) => {
  const relativePath = path.relative(process.cwd(), filePath);
  let content = fs.readFileSync(filePath, 'utf8');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–Ω–æ–ø–∫–∏ –±–æ—Ç–∞
  if (content.includes('dexrabbit_bot')) {
    console.log(`‚ö™ ${relativePath} - –±–æ—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω`);
    return;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ <h1> –∏–ª–∏ <h2>
  const h1Match = content.match(/<h1[^>]*>.*?<\/h1>/);
  const h2Match = content.match(/<h2[^>]*>.*?<\/h2>/);
  
  if (h1Match) {
    content = content.replace(h1Match[0], h1Match[0] + BOT_BUTTON_PRIMARY);
  } else if (h2Match) {
    content = content.replace(h2Match[0], h2Match[0] + BOT_BUTTON_PRIMARY);
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–¥ </main> –∏–ª–∏ –ø–µ—Ä–µ–¥ footer
  const footerMatch = content.match(/<footer/);
  const mainEndMatch = content.match(/<\/main>/);
  
  if (mainEndMatch) {
    content = content.replace('</main>', BOT_BUTTON_SECONDARY + '\n    </main>');
  } else if (footerMatch) {
    content = content.replace('<footer', BOT_BUTTON_SECONDARY + '\n\n    <footer');
  }
  
  fs.writeFileSync(filePath, content, 'utf8');
  updatedCount++;
  console.log(`‚úÖ ${relativePath} - 2 –∫–Ω–æ–ø–∫–∏ –±–æ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã`);
});

console.log(`\nüìä –ò–¢–û–ì–û:`);
console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${htmlFiles.length}`);
console.log(`   –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏: ${updatedCount} —Å—Ç—Ä–∞–Ω–∏—Ü √ó 2 = ${updatedCount * 2} –∫–Ω–æ–ø–æ–∫`);

console.log('\n‚úÖ TELEGRAM –ë–û–¢ –î–û–ë–ê–í–õ–ï–ù –ù–ê –í–°–ï –°–¢–†–ê–ù–ò–¶–´!');

