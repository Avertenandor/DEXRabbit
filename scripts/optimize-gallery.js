const sharp = require('sharp');
const fs = require('fs');
const path = require('path');

async function optimizeGallery() {
  console.log('üñºÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é gallery...\n');
  
  const galleryDir = 'gallery';
  const files = fs.readdirSync(galleryDir)
    .filter(file => /\.(jpg|jpeg|png)$/i.test(file));
  
  console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${files.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n`);
  
  let totalOriginal = 0;
  let totalOptimized = 0;
  let processedCount = 0;
  
  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤
  const backupDir = path.join(galleryDir, 'originals');
  if (!fs.existsSync(backupDir)) {
    fs.mkdirSync(backupDir, { recursive: true });
  }
  
  for (const file of files) {
    const inputPath = path.join(galleryDir, file);
    const outputPath = path.join(galleryDir, `optimized-${file}`);
    const webpPath = path.join(galleryDir, file.replace(/\.(jpg|jpeg|png)$/i, '.webp'));
    const backupPath = path.join(backupDir, file);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä
      const originalSize = fs.statSync(inputPath).size;
      totalOriginal += originalSize;
      
      // –ö–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –≤ –±—ç–∫–∞–ø
      fs.copyFileSync(inputPath, backupPath);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç
      const isJpeg = /\.(jpg|jpeg)$/i.test(file);
      const isPng = /\.png$/i.test(file);
      
      // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º
      if (isJpeg) {
        await sharp(inputPath)
          .resize(800, 600, { fit: 'inside', withoutEnlargement: true })
          .jpeg({ quality: 75, progressive: true })
          .toFile(outputPath);
      } else if (isPng) {
        await sharp(inputPath)
          .resize(800, 600, { fit: 'inside', withoutEnlargement: true })
          .png({ quality: 75, compressionLevel: 9 })
          .toFile(outputPath);
      }
      
      // –°–æ–∑–¥–∞–µ–º WebP
      await sharp(inputPath)
        .resize(800, 600, { fit: 'inside', withoutEnlargement: true })
        .webp({ quality: 75 })
        .toFile(webpPath);
      
      // –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
      const optimizedSize = fs.statSync(outputPath).size;
      const webpSize = fs.statSync(webpPath).size;
      totalOptimized += optimizedSize;
      
      fs.renameSync(outputPath, inputPath);
      
      processedCount++;
      const savings = ((1 - optimizedSize/originalSize) * 100).toFixed(0);
      console.log(`‚úÖ ${processedCount}/${files.length} ${file}`);
      console.log(`   ${(originalSize/1024).toFixed(0)}KB ‚Üí ${(optimizedSize/1024).toFixed(0)}KB (-${savings}%) | WebP: ${(webpSize/1024).toFixed(0)}KB`);
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${file}:`, error.message);
    }
  }
  
  console.log('\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${processedCount}/${files.length}`);
  console.log(`   –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${(totalOriginal/1024/1024).toFixed(1)}MB`);
  console.log(`   –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: ${(totalOptimized/1024/1024).toFixed(1)}MB`);
  console.log(`   –≠–∫–æ–Ω–æ–º–∏—è: ${(totalOriginal/1024/1024 - totalOptimized/1024/1024).toFixed(1)}MB (-${((1-totalOptimized/totalOriginal)*100).toFixed(0)}%)`);
  console.log('\n‚ú® –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è gallery –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log('üíæ –û—Ä–∏–≥–∏–Ω–∞–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ gallery/originals/');
}

optimizeGallery();