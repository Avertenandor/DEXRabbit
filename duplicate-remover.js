// –§–∏–Ω–∞–ª—å–Ω–æ–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ DEXRabbit
console.log('üßπ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...');

class DuplicateContentRemover {
    constructor() {
        this.removedCount = 0;
        this.processedSections = new Map();
    }

    removeDuplicates() {
        console.log('üîç –ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–π...');
        
        const sections = document.querySelectorAll('section');
        const seenContent = new Set();
        const duplicatesToRemove = [];

        sections.forEach((section, index) => {
            // –°–æ–∑–¥–∞–µ–º —Ö–µ—à –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–µ–∫—Ü–∏–∏
            const contentText = section.textContent.replace(/\s+/g, ' ').trim();
            const contentHash = this.hashString(contentText);
            
            console.log(`–°–µ–∫—Ü–∏—è ${index + 1}: "${contentText.substring(0, 50)}..." Hash: ${contentHash}`);
            
            if (seenContent.has(contentHash) && contentText.length > 50) {
                // –≠—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç
                duplicatesToRemove.push(section);
                console.log(`‚ùå –î—É–±–ª–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω: —Å–µ–∫—Ü–∏—è ${index + 1}`);
            } else {
                seenContent.add(contentHash);
                console.log(`‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è ${index + 1}`);
            }
        });
        
        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        duplicatesToRemove.forEach((section, index) => {
            section.style.display = 'none';
            section.setAttribute('data-duplicate', 'true');
            this.removedCount++;
            console.log(`üóëÔ∏è –°–∫—Ä—ã—Ç –¥—É–±–ª–∏–∫–∞—Ç ${index + 1}`);
        });
        
        if (this.removedCount > 0) {
            console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${this.removedCount} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–π`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showNotification(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–¥–∞–ª–µ–Ω–æ ${this.removedCount} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–π`);
        } else {
            console.log('‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        return this.removedCount;
    }

    hashString(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            const char = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash; // Convert to 32-bit integer
        }
        return Math.abs(hash);
    }

    showNotification(message) {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: #4caf50;
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 16px rgba(0,0,0,0.2);
            z-index: 10000;
            font-weight: 500;
            max-width: 300px;
        `;
        notification.textContent = `üßπ ${message}`;
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.opacity = '0';
            notification.style.transition = 'opacity 0.3s ease';
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    fixCommonIssues() {
        console.log('üõ†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—â–∏—Ö –ø—Ä–æ–±–ª–µ–º...');
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ feature-icon
        const emptyIcons = document.querySelectorAll('.feature-icon:empty');
        const icons = ['üí∞', 'üê∞', 'ü§ù'];
        emptyIcons.forEach((icon, index) => {
            if (icons[index]) {
                icon.textContent = icons[index];
                console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞: ${icons[index]}`);
            }
        });
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º title –∏ meta –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (document.title.includes('  ')) {
            document.title = document.title.replace(/\s+/g, ' ').trim();
            console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω title —Å –¥–≤–æ–π–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏');
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º alt –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑ –Ω–µ–≥–æ
        const imagesWithoutAlt = document.querySelectorAll('img:not([alt])');
        imagesWithoutAlt.forEach((img, index) => {
            img.alt = `DEXRabbit –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${index + 1}`;
            console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω alt: ${img.alt}`);
        });
        
        return true;
    }
}

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        setTimeout(() => {
            const remover = new DuplicateContentRemover();
            remover.removeDuplicates();
            remover.fixCommonIssues();
        }, 1000);
    });
} else {
    setTimeout(() => {
        const remover = new DuplicateContentRemover();
        remover.removeDuplicates();
        remover.fixCommonIssues();
    }, 1000);
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
    module.exports = DuplicateContentRemover;
}