// –ú–∞—Å—Å–æ–≤—ã–π —Ñ–∏–∫—Å–µ—Ä HTML —Ñ–∞–π–ª–æ–≤ DEXRabbit
console.log('üîß –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è HTML —Ñ–∞–π–ª–æ–≤...');

class HTMLFixer {
    constructor() {
        this.fixes = 0;
        this.errors = 0;
    }

    async fixAllFiles() {
        const files = [
            'index.html',
            'investment-model.html', 
            'contacts.html',
            'breeding.html',
            'restaurants.html',
            'gifts.html',
            'development.html',
            'logistics.html',
            'investors.html'
        ];

        for (const file of files) {
            await this.fixFile(file);
        }

        console.log(`\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! Fixes: ${this.fixes}, Errors: ${this.errors}`);
    }

    async fixFile(filename) {
        try {
            console.log(`üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é ${filename}...`);
            
            const response = await fetch('/' + filename);
            if (!response.ok) {
                console.log(`‚ö†Ô∏è –§–∞–π–ª ${filename} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                return;
            }
            
            let html = await response.text();
            
            // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            html = this.fixCommonIssues(html);
            html = this.fixBranding(html);
            html = this.fixMetaTags(html, filename);
            html = this.addMissingScripts(html);
            
            console.log(`‚úÖ ${filename} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω`);
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filename}:`, error);
            this.errors++;
        }
    }

    fixCommonIssues(html) {
        let fixed = html;
        
        // –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ title
        fixed = fixed.replace(/<title>\s+([^<]+)\s+<\/title>/g, '<title>$1</title>');
        this.fixes++;
        
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ meta content
        fixed = fixed.replace(/content="\s+([^"]+)"/g, 'content="$1"');
        this.fixes++;
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ favicon
        fixed = fixed.replace(/\/images\/favicon\.svg/g, '/favicon.svg');
        this.fixes++;
        
        return fixed;
    }

    fixBranding(html) {
        let fixed = html;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±—Ä–µ–Ω–¥–∏–Ω–≥
        fixed = fixed.replace(/–ö—É–ø–∏—Ç—å–ö—Ä–æ–ª–∏–∫–∞/g, 'DEXRabbit');
        fixed = fixed.replace(/alt="–ö—É–ø–∏—Ç—å–ö—Ä–æ–ª–∏–∫–∞/g, 'alt="DEXRabbit');
        fixed = fixed.replace(/–∫—É–ø–∏—Ç—å –∫—Ä–æ–ª–∏–∫–∞/g, '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ —Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—Ä–æ–ª–∏–∫–æ–≤');
        
        this.fixes++;
        return fixed;
    }

    fixMetaTags(html, filename) {
        const metaUpdates = {
            'index.html': {
                title: 'DEXRabbit ‚Äî —Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–µ—Ä–º–∞ –∫—Ä–æ–ª–∏–∫–æ–≤',
                description: 'üê∞ –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ —Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—Ä–æ–ª–∏–∫–æ–≤, –ø–æ–ª—É—á–∞–π—Ç–µ PLEX —Ç–æ–∫–µ–Ω—ã –∏ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–µ —Ñ–µ—Ä–º—ã –≤ –ü–æ–¥–æ–ª—å—Å–∫–µ'
            },
            'investment-model.html': {
                title: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å ‚Äî DEXRabbit',
                description: 'üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –æ—Ç 100 –¥–æ 2000 USDT –≤ —Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—Ä–æ–ª–∏–∫–æ–≤. –ö—Ä—É–≥ –ê –∏ –ë, –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ PLEX —Ç–æ–∫–µ–Ω—ã, –≥–∞—Ä–∞–Ω—Ç–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤–∫–ª–∞–¥–∞'
            },
            'contacts.html': {
                title: '–ö–æ–Ω—Ç–∞–∫—Ç—ã ‚Äî DEXRabbit',
                description: 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã DEXRabbit. Telegram-–±–æ—Ç –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π, –∫–∞–Ω–∞–ª—ã, –≥—Ä—É–ø–ø—ã. –°–≤—è–∑—å —Å –∫–æ–º–∞–Ω–¥–æ–π —Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ–µ—Ä–º—ã –∫—Ä–æ–ª–∏–∫–æ–≤'
            }
        };

        if (metaUpdates[filename]) {
            let fixed = html;
            const meta = metaUpdates[filename];
            
            // –û–±–Ω–æ–≤–ª—è–µ–º title
            fixed = fixed.replace(/<title>.*?<\/title>/g, `<title>${meta.title}</title>`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º meta description
            fixed = fixed.replace(/name="description" content="[^"]*"/g, `name="description" content="${meta.description}"`);
            
            this.fixes++;
            return fixed;
        }
        
        return html;
    }

    addMissingScripts(html) {
        let fixed = html;
        
        // –î–æ–±–∞–≤–ª—è–µ–º production optimizer –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!fixed.includes('production-optimizer.js')) {
            fixed = fixed.replace('</body>', '    <script src="/production-optimizer.js"></script>\n</body>');
            this.fixes++;
        }
        
        return fixed;
    }
}

// –ó–∞–ø—É—Å–∫ —Ñ–∏–∫—Å–µ—Ä–∞
const fixer = new HTMLFixer();

// –í –±—Ä–∞—É–∑–µ—Ä–µ
if (typeof window !== 'undefined') {
    // –°–∏–º—É–ª—è—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    console.log('üîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –±—Ä–∞—É–∑–µ—Ä–µ:');
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const title = document.title;
    if (title.includes('  ')) {
        document.title = title.replace(/\s+/g, ' ').trim();
        console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω title —Å –¥–≤–æ–π–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º meta description
    const metaDesc = document.querySelector('meta[name="description"]');
    if (metaDesc && metaDesc.content.startsWith(' ')) {
        metaDesc.content = metaDesc.content.trim();
        console.log('‚úÖ –£–±—Ä–∞–Ω –ø—Ä–æ–±–µ–ª –≤ –Ω–∞—á–∞–ª–µ meta description');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ alt –∞—Ç—Ä–∏–±—É—Ç—ã
    const imagesWithoutAlt = document.querySelectorAll('img:not([alt])');
    imagesWithoutAlt.forEach((img, index) => {
        img.alt = `DEXRabbit –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${index + 1}`;
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω alt –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: ${img.src}`);
    });
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ —ç–º–æ–¥–∑–∏
    const featureIcons = document.querySelectorAll('.feature-icon:empty');
    const icons = ['üí∞', 'üê∞', 'ü§ù'];
    featureIcons.forEach((icon, index) => {
        if (icons[index]) {
            icon.textContent = icons[index];
            console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞: ${icons[index]}`);
        }
    });
    
    console.log('üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Node.js
if (typeof module !== 'undefined' && module.exports) {
    module.exports = HTMLFixer;
}