// –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ DEXRabbit
console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ DEXRabbit...');

class ProjectReadinessTest {
    constructor() {
        this.results = {
            totalTests: 0,
            passedTests: 0,
            failedTests: 0,
            errors: []
        };
    }

    async runAllTests() {
        console.log('\nüìã === –¢–ï–°–¢ –ì–û–¢–û–í–ù–û–°–¢–ò –ü–†–û–ï–ö–¢–ê DEXRabbit ===\n');
        
        await this.testFiles();
        await this.testHTML();
        await this.testPWA();
        await this.testSEO();
        await this.testJavaScript();
        
        this.displayResults();
    }

    test(name, condition, errorMessage = '') {
        this.results.totalTests++;
        if (condition) {
            console.log(`‚úÖ ${name}`);
            this.results.passedTests++;
            return true;
        } else {
            console.log(`‚ùå ${name} - ${errorMessage}`);
            this.results.failedTests++;
            this.results.errors.push(`${name}: ${errorMessage}`);
            return false;
        }
    }

    async testFiles() {
        console.log('\nüìÅ –¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:');
        
        const requiredFiles = [
            'index.html',
            'investment-model.html', 
            'contacts.html',
            'manifest.webmanifest',
            'sw.js',
            'robots.txt',
            'sitemap.xml',
            'favicon.ico',
            'favicon.svg'
        ];

        let allFilesExist = true;
        for (const file of requiredFiles) {
            try {
                await fetch(file);
                this.test(`${file} exists`, true);
            } catch (e) {
                this.test(`${file} exists`, false, 'File not found');
                allFilesExist = false;
            }
        }
        
        this.test('All required files exist', allFilesExist);
    }

    async testHTML() {
        console.log('\nüåê –¢–µ—Å—Ç HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:');
        
        try {
            const response = await fetch('/');
            const html = await response.text();
            
            this.test('HTML loads correctly', response.ok);
            this.test('Contains title', html.includes('<title>'));
            this.test('Contains meta description', html.includes('meta name="description"'));
            this.test('Contains viewport meta', html.includes('viewport'));
            this.test('Contains DEXRabbit branding', html.includes('DEXRabbit') || html.includes('üê∞'));
            this.test('Contains investment info', html.includes('–∏–Ω–≤–µ—Å—Ç') || html.includes('PLEX'));
            
        } catch (error) {
            this.test('HTML structure', false, error.message);
        }
    }

    async testPWA() {
        console.log('\nüì± –¢–µ—Å—Ç PWA –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:');
        
        // –¢–µ—Å—Ç –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
        try {
            const manifestResponse = await fetch('/manifest.webmanifest');
            const manifest = await manifestResponse.json();
            
            this.test('Manifest loads', manifestResponse.ok);
            this.test('Manifest has name', !!manifest.name);
            this.test('Manifest has icons', manifest.icons && manifest.icons.length > 0);
            this.test('Manifest has start_url', !!manifest.start_url);
            this.test('Manifest has display', !!manifest.display);
            
        } catch (error) {
            this.test('PWA manifest', false, error.message);
        }

        // –¢–µ—Å—Ç Service Worker
        this.test('Service Worker registered', 'serviceWorker' in navigator);
        
        try {
            const swResponse = await fetch('/sw.js');
            this.test('Service Worker file exists', swResponse.ok);
        } catch (error) {
            this.test('Service Worker file', false, 'SW file not accessible');
        }
    }

    async testSEO() {
        console.log('\nüîç –¢–µ—Å—Ç SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
        
        try {
            // Robots.txt
            const robotsResponse = await fetch('/robots.txt');
            this.test('robots.txt exists', robotsResponse.ok);
            
            // Sitemap
            const sitemapResponse = await fetch('/sitemap.xml');
            this.test('sitemap.xml exists', sitemapResponse.ok);
            
            // Favicon
            const faviconResponse = await fetch('/favicon.ico');
            this.test('favicon.ico exists', faviconResponse.ok);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞-—Ç–µ–≥–æ–≤ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π
            const mainPageResponse = await fetch('/');
            const html = await mainPageResponse.text();
            
            this.test('OpenGraph tags present', html.includes('og:title'));
            this.test('Canonical URL present', html.includes('canonical') || html.includes('rel="canonical"'));
            
        } catch (error) {
            this.test('SEO elements', false, error.message);
        }
    }

    async testJavaScript() {
        console.log('\n‚öôÔ∏è –¢–µ—Å—Ç JavaScript —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:');
        
        // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        this.test('Console API available', typeof console !== 'undefined');
        this.test('localStorage available', typeof localStorage !== 'undefined');
        this.test('fetch API available', typeof fetch !== 'undefined');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏
        let hasConsoleErrors = false;
        const originalError = console.error;
        console.error = function(...args) {
            hasConsoleErrors = true;
            originalError.apply(console, args);
        };
        
        setTimeout(() => {
            this.test('No JavaScript errors', !hasConsoleErrors);
        }, 1000);
    }

    displayResults() {
        setTimeout(() => {
            console.log('\nüèÜ === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê ===\n');
            console.log(`üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${this.results.totalTests}`);
            console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.results.passedTests}`);
            console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.results.failedTests}`);
            
            const successRate = Math.round((this.results.passedTests / this.results.totalTests) * 100);
            console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`);
            
            if (successRate >= 90) {
                console.log('\nüéâ –ü–†–û–ï–ö–¢ –ì–û–¢–û–í –ö –ü–†–û–î–ê–ö–®–ù –î–ï–ü–õ–û–Æ! üöÄ');
                console.log('‚ú® –í—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            } else if (successRate >= 75) {
                console.log('\n‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤, –µ—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã');
            } else {
                console.log('\nüõë –ü—Ä–æ–µ–∫—Ç —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º');
            }
            
            if (this.results.errors.length > 0) {
                console.log('\nüìã –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:');
                this.results.errors.forEach(error => console.log(`  ‚Ä¢ ${error}`));
            }
            
            console.log('\nüåê DEXRabbit - –¢–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–µ—Ä–º–∞ –∫—Ä–æ–ª–∏–∫–æ–≤ –≥–æ—Ç–æ–≤–∞!');
            console.log('üîó –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/Avertenandor/DEXRabbit');
        }, 2000);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        const tester = new ProjectReadinessTest();
        tester.runAllTests();
    });
} else {
    const tester = new ProjectReadinessTest();
    tester.runAllTests();
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ProjectReadinessTest;
}