/**
 * üß™ –õ–û–ö–ê–õ–¨–ù–´–ô –¢–ï–°–¢ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ localhost
 */

import { test, expect } from '@playwright/test';

test.describe('üß™ –õ–û–ö–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô', () => {
  
  test.beforeEach(async ({ page }) => {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –õ–û–ö–ê–õ–¨–ù–£–Æ –≤–µ—Ä—Å–∏—é!
    await page.goto('http://localhost:5500');
    await page.waitForLoadState('networkidle');
    await page.waitForTimeout(1000);
    
    console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üè† –û—Ç–∫—Ä—ã—Ç –õ–û–ö–ê–õ–¨–ù–´–ô —Å–∞–π—Ç (localhost:5500)');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  });

  test('üîÑ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô: Dropdown –ó–ê–ö–†–´–í–ê–Æ–¢–°–Ø –ø–æ –≤—Ç–æ—Ä–æ–º—É –∫–ª–∏–∫—É (localhost)', async ({ page }) => {
    console.log('1Ô∏è‚É£ –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—É—Ä–≥–µ—Ä...');
    const burger = page.locator('.nav-beautiful__mobile-toggle');
    await burger.click();
    await page.waitForTimeout(800);
    
    const dropdownWrappers = page.locator('.nav-beautiful__dropdown-wrapper');
    const count = await dropdownWrappers.count();
    
    console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º ${count} dropdown —Ä–∞–∑–¥–µ–ª–æ–≤\n`);
    
    const sectionNames = ['–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–ü–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ', '–£—Å–ª—É–≥–∏', '–ü–æ—Ä–æ–¥—ã', '–û –Ω–∞—Å'];
    let failedSections = [];
    
    for (let i = 0; i < count; i++) {
      const wrapper = dropdownWrappers.nth(i);
      const button = wrapper.locator('.nav-beautiful__btn');
      const dropdown = wrapper.locator('.nav-beautiful__dropdown');
      
      console.log(`\n‚ïê‚ïê‚ïê ${sectionNames[i]} ‚ïê‚ïê‚ïê`);
      
      // –ü–ï–†–í–´–ô –ö–õ–ò–ö - –æ—Ç–∫—Ä—ã—Ç—å
      console.log('   1Ô∏è‚É£ –ü–µ—Ä–≤—ã–π –∫–ª–∏–∫...');
      await button.click({ force: true }); // FORCE –∫–ª–∏–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É—è overlap
      await page.waitForTimeout(800);
      
      const isVisibleAfterOpen = await dropdown.isVisible();
      const hasOpenClass = await wrapper.evaluate(el => 
        el.classList.contains('open') || el.classList.contains('is-open')
      );
      
      console.log(`   –í–∏–¥–∏–º: ${isVisibleAfterOpen}, –ö–ª–∞—Å—Å: ${hasOpenClass}`);
      
      if (!isVisibleAfterOpen || !hasOpenClass) {
        failedSections.push({
          section: sectionNames[i],
          issue: 'not_opening',
          visible: isVisibleAfterOpen,
          hasClass: hasOpenClass
        });
        console.log(`   ‚ùå –ù–ï –û–¢–ö–†–´–õ–°–Ø!`);
        continue;
      }
      
      console.log(`   ‚úÖ –û—Ç–∫—Ä—ã–ª—Å—è`);
      
      // –í–¢–û–†–û–ô –ö–õ–ò–ö - –∑–∞–∫—Ä—ã—Ç—å
      console.log('   2Ô∏è‚É£ –í—Ç–æ—Ä–æ–π –∫–ª–∏–∫...');
      await button.click({ force: true }); // FORCE –∫–ª–∏–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É—è overlap
      await page.waitForTimeout(800);
      
      const isVisibleAfterClose = await dropdown.isVisible();
      const hasOpenClassAfterClose = await wrapper.evaluate(el => 
        el.classList.contains('open') || el.classList.contains('is-open')
      );
      
      console.log(`   –í–∏–¥–∏–º: ${isVisibleAfterClose}, –ö–ª–∞—Å—Å: ${hasOpenClassAfterClose}`);
      
      if (isVisibleAfterClose || hasOpenClassAfterClose) {
        failedSections.push({
          section: sectionNames[i],
          issue: 'not_closing',
          visible: isVisibleAfterClose,
          hasClass: hasOpenClassAfterClose
        });
        console.log(`   ‚ùå –ù–ï –ó–ê–ö–†–´–õ–°–Ø!`);
      } else {
        console.log(`   ‚úÖ –ó–∞–∫—Ä—ã–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
      }
    }
    
    // ASSERT
    if (failedSections.length > 0) {
      console.log('\n‚ùå –ü–†–û–ë–õ–ï–ú–´ –° –†–ê–ó–î–ï–õ–ê–ú–ò:');
      failedSections.forEach(f => {
        console.log(`   ${f.section}: ${f.issue}`);
        console.log(`      visible: ${f.visible}, hasClass: ${f.hasClass}`);
      });
    }
    
    expect(failedSections.length).toBe(0);
  });

  test('üìç –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô: "–û –Ω–∞—Å" –í –ü–†–ï–î–ï–õ–ê–• —ç–∫—Ä–∞–Ω–∞ (localhost)', async ({ page }) => {
    const viewportWidth = page.viewportSize().width;
    
    console.log('\nüì± Viewport:', viewportWidth);
    console.log('1Ô∏è‚É£ –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—É—Ä–≥–µ—Ä...');
    
    const burger = page.locator('.nav-beautiful__mobile-toggle');
    await burger.click();
    await page.waitForTimeout(800);
    
    const dropdownWrappers = page.locator('.nav-beautiful__dropdown-wrapper');
    const aboutWrapper = dropdownWrappers.nth(4); // –ü–æ—Å–ª–µ–¥–Ω–∏–π = "–û –Ω–∞—Å"
    const aboutButton = aboutWrapper.locator('.nav-beautiful__btn');
    const aboutDropdown = aboutWrapper.locator('.nav-beautiful__dropdown');
    
    console.log('\n‚ïê‚ïê‚ïê –û –Ω–∞—Å ‚ïê‚ïê‚ïê');
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º "–û –Ω–∞—Å"
    await aboutButton.click();
    await page.waitForTimeout(800);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é
    const box = await aboutDropdown.boundingBox();
    
    console.log(`   x: ${box.x}`);
    console.log(`   width: ${box.width}`);
    console.log(`   right edge: ${box.x + box.width}`);
    console.log(`   viewport: ${viewportWidth}`);
    
    // ASSERT: –ª–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
    expect(box.x).toBeGreaterThanOrEqual(0);
    console.log(`   ‚úÖ –ù–µ —É–µ—Ö–∞–ª –≤–ª–µ–≤–æ`);
    
    // ASSERT: –ø—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
    const rightEdge = box.x + box.width;
    if (rightEdge > viewportWidth) {
      console.log(`   ‚ùå –£–ï–•–ê–õ –í–ü–†–ê–í–û –Ω–∞ ${rightEdge - viewportWidth}px!`);
    } else {
      console.log(`   ‚úÖ –ù–µ —É–µ—Ö–∞–ª –≤–ø—Ä–∞–≤–æ`);
    }
    
    expect(rightEdge).toBeLessThanOrEqual(viewportWidth);
  });
});
