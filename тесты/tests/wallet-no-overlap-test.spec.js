/**
 * üîç Z-Index & Overlap Prevention Test
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –ù–ï –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç—Å—è
 */

import { test, expect } from '@playwright/test';

test.describe('üõ°Ô∏è Z-Index & No Overlap Tests', () => {
  
  test('Desktop: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∏ –ù–ï –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç—Å—è –ø—Ä–∏ hover', async ({ page }) => {
    await page.setViewportSize({ width: 1920, height: 1080 });
    await page.goto('http://localhost:5500');
    await page.waitForLoadState('networkidle');
    
    console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üõ°Ô∏è  Z-INDEX TEST - No Overlap');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
    
    const walletSection = page.locator('.wallet-instructions-section');
    await walletSection.scrollIntoViewIfNeeded();
    await page.waitForTimeout(500);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –î–û hover
    const trustCard = page.locator('.trust-wallet-card');
    const safepalCard = page.locator('.safepal-card');
    
    const trustBoxBefore = await trustCard.boundingBox();
    const safepalBoxBefore = await safepalCard.boundingBox();
    
    console.log('üìê –ü–æ–∑–∏—Ü–∏–∏ –î–û hover:');
    console.log(`   Trust Wallet: x=${trustBoxBefore?.x}, y=${trustBoxBefore?.y}, w=${trustBoxBefore?.width}, h=${trustBoxBefore?.height}`);
    console.log(`   SafePal: x=${safepalBoxBefore?.x}, y=${safepalBoxBefore?.y}, w=${safepalBoxBefore?.width}, h=${safepalBoxBefore?.height}`);
    
    // –í—ã—á–∏—Å–ª—è–µ–º gap –º–µ–∂–¥—É –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
    const gapX = safepalBoxBefore.x - (trustBoxBefore.x + trustBoxBefore.width);
    console.log(`\nüìè Gap –º–µ–∂–¥—É –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏: ${gapX}px`);
    
    // Hover –Ω–∞ Trust Wallet
    await trustCard.hover();
    await page.waitForTimeout(500);
    
    const trustBoxHover = await trustCard.boundingBox();
    console.log('\nüéØ Trust Wallet –ø—Ä–∏ hover:');
    console.log(`   y=${trustBoxHover?.y} (—Å–¥–≤–∏–≥: ${(trustBoxBefore.y - trustBoxHover.y).toFixed(2)}px –≤–≤–µ—Ä—Ö)`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∏ –ù–ï –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç—Å—è
    const overlap = checkOverlap(trustBoxHover, safepalBoxBefore);
    console.log(`\n‚úÖ –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ: ${overlap ? '‚ùå –ï–°–¢–¨!' : '‚úÖ –ù–ï–¢'}`);
    expect(overlap).toBe(false);
    
    // Hover –Ω–∞ SafePal
    await safepalCard.hover();
    await page.waitForTimeout(500);
    
    const safepalBoxHover = await safepalCard.boundingBox();
    console.log('\nüéØ SafePal –ø—Ä–∏ hover:');
    console.log(`   y=${safepalBoxHover?.y} (—Å–¥–≤–∏–≥: ${(safepalBoxBefore.y - safepalBoxHover.y).toFixed(2)}px –≤–≤–µ—Ä—Ö)`);
    
    // Screenshot
    await walletSection.screenshot({ 
      path: '—Ç–µ—Å—Ç—ã/screenshots/wallet-no-overlap-test.png'
    });
    console.log('\nüì∏ Screenshot: wallet-no-overlap-test.png');
  });
  
  test('Z-Index Hierarchy: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏', async ({ page }) => {
    await page.setViewportSize({ width: 1920, height: 1080 });
    await page.goto('http://localhost:5500');
    await page.waitForLoadState('networkidle');
    
    console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üî¢ Z-INDEX HIERARCHY TEST');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
    
    const walletSection = page.locator('.wallet-instructions-section');
    await walletSection.scrollIntoViewIfNeeded();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º z-index –∑–Ω–∞—á–µ–Ω–∏—è
    const sectionZIndex = await walletSection.evaluate(el => {
      return window.getComputedStyle(el).zIndex;
    });
    
    const cardZIndex = await page.locator('.wallet-card').first().evaluate(el => {
      return window.getComputedStyle(el).zIndex;
    });
    
    const headerZIndex = await page.locator('.wallet-card-header').first().evaluate(el => {
      return window.getComputedStyle(el).zIndex;
    });
    
    const copyBtnZIndex = await page.locator('.copy-btn-mini').first().evaluate(el => {
      return window.getComputedStyle(el).zIndex;
    });
    
    console.log('üìä Z-INDEX VALUES:');
    console.log(`   Section: ${sectionZIndex}`);
    console.log(`   Card: ${cardZIndex}`);
    console.log(`   Header: ${headerZIndex}`);
    console.log(`   Copy Button: ${copyBtnZIndex}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º isolation
    const sectionIsolation = await walletSection.evaluate(el => {
      return window.getComputedStyle(el).isolation;
    });
    
    const cardIsolation = await page.locator('.wallet-card').first().evaluate(el => {
      return window.getComputedStyle(el).isolation;
    });
    
    console.log('\nüîí ISOLATION:');
    console.log(`   Section: ${sectionIsolation}`);
    console.log(`   Card: ${cardIsolation}`);
    
    expect(sectionIsolation).toBe('isolate');
    expect(cardIsolation).toBe('isolate');
    console.log('\n‚úÖ Isolation –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
  });
  
  test('Touch Action: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è mobile', async ({ page }) => {
    await page.setViewportSize({ width: 390, height: 844 });
    await page.goto('http://localhost:5500');
    await page.waitForLoadState('networkidle');
    
    console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üì± TOUCH ACTION TEST');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
    
    const walletSection = page.locator('.wallet-instructions-section');
    await walletSection.scrollIntoViewIfNeeded();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º touch-action
    const cardTouchAction = await page.locator('.wallet-card').first().evaluate(el => {
      return window.getComputedStyle(el).touchAction;
    });
    
    const copyBtnTouchAction = await page.locator('.copy-btn-mini').first().evaluate(el => {
      return window.getComputedStyle(el).touchAction;
    });
    
    console.log('üëÜ TOUCH-ACTION VALUES:');
    console.log(`   Card: ${cardTouchAction}`);
    console.log(`   Copy Button: ${copyBtnTouchAction}`);
    
    expect(cardTouchAction).toBe('manipulation');
    expect(copyBtnTouchAction).toBe('manipulation');
    console.log('\n‚úÖ Touch optimization –∞–∫—Ç–∏–≤–Ω–∞!');
  });
  
  test('Overflow Check: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ overflow –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π', async ({ page }) => {
    await page.setViewportSize({ width: 1920, height: 1080 });
    await page.goto('http://localhost:5500');
    await page.waitForLoadState('networkidle');
    
    console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üì¶ OVERFLOW CHECK');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
    
    const walletSection = page.locator('.wallet-instructions-section');
    await walletSection.scrollIntoViewIfNeeded();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º overflow
    const sectionOverflow = await walletSection.evaluate(el => {
      return window.getComputedStyle(el).overflow;
    });
    
    const cardOverflow = await page.locator('.wallet-card').first().evaluate(el => {
      return window.getComputedStyle(el).overflow;
    });
    
    console.log('üì¶ OVERFLOW VALUES:');
    console.log(`   Section: ${sectionOverflow}`);
    console.log(`   Card: ${cardOverflow}`);
    
    // Section –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å visible –¥–ª—è hover —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    expect(sectionOverflow).toBe('visible');
    // Cards —Ç–æ–∂–µ visible –¥–ª—è shadow
    expect(cardOverflow).toBe('visible');
    console.log('\n‚úÖ Overflow –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
  });
  
  test('Console Check: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è warnings', async ({ page }) => {
    const consoleMessages = [];
    const consoleWarnings = [];
    
    page.on('console', msg => {
      const text = msg.text();
      consoleMessages.push(text);
      
      if (msg.type() === 'warning' && text.includes('passive')) {
        consoleWarnings.push(text);
      }
    });
    
    await page.setViewportSize({ width: 390, height: 844 });
    await page.goto('http://localhost:5500');
    await page.waitForLoadState('networkidle');
    
    console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üîç CONSOLE WARNINGS CHECK');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
    
    const walletSection = page.locator('.wallet-instructions-section');
    await walletSection.scrollIntoViewIfNeeded();
    await page.waitForTimeout(1000);
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º touch —Å–æ–±—ã—Ç–∏—è
    await page.locator('.wallet-card').first().tap();
    await page.waitForTimeout(500);
    
    console.log(`üìù Console messages: ${consoleMessages.length}`);
    console.log(`‚ö†Ô∏è  Passive warnings: ${consoleWarnings.length}`);
    
    if (consoleWarnings.length > 0) {
      console.log('\n‚ùå –ù–∞–π–¥–µ–Ω—ã passive warnings:');
      consoleWarnings.forEach(warning => console.log(`   - ${warning}`));
    } else {
      console.log('\n‚úÖ Passive warnings –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!');
    }
    
    expect(consoleWarnings.length).toBe(0);
  });
});

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –¥–≤—É—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
 */
function checkOverlap(box1, box2) {
  return !(
    box1.x + box1.width < box2.x ||
    box2.x + box2.width < box1.x ||
    box1.y + box1.height < box2.y ||
    box2.y + box2.height < box1.y
  );
}
