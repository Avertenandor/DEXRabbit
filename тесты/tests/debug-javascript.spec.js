/**
 * üîç DEBUG –¢–ï–°–¢ - —Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –∫–ª–∏–∫–µ
 */

import { test, expect } from '@playwright/test';

test.describe('üîç DEBUG - –ß–¢–û –ü–†–û–ò–°–•–û–î–ò–¢', () => {
  
  test('–ü—Ä–æ–≤–µ—Ä—è–µ–º JavaScript –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç', async ({ page }) => {
    await page.goto('http://localhost:5500');
    await page.waitForLoadState('networkidle');
    
    console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üîç –ü–†–û–í–ï–†–ö–ê JAVASCRIPT');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—É—Ä–≥–µ—Ä
    const burger = page.locator('.nav-beautiful__mobile-toggle');
    await burger.click();
    await page.waitForTimeout(1000);
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π dropdown wrapper
    const wrapper = page.locator('.nav-beautiful__dropdown-wrapper').first();
    const button = wrapper.locator('.nav-beautiful__btn');
    
    console.log('1Ô∏è‚É£ –î–û –ö–õ–ò–ö–ê:');
    const classListBefore = await wrapper.evaluate(el => Array.from(el.classList));
    console.log('   classList:', classListBefore);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ JS –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    const hasClickListener = await button.evaluate(el => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ event listeners
      return typeof el.onclick === 'function' || el.getAttribute('onclick') !== null;
    });
    console.log('   hasClickListener:', hasClickListener);
    
    // –ö–õ–ò–ö
    console.log('\n2Ô∏è‚É£ –ö–õ–ò–ö FORCE...');
    await button.click({ force: true });
    await page.waitForTimeout(1000);
    
    console.log('\n3Ô∏è‚É£ –ü–û–°–õ–ï –ö–õ–ò–ö–ê:');
    const classListAfter = await wrapper.evaluate(el => Array.from(el.classList));
    console.log('   classList:', classListAfter);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º console.log –∏–∑ JS
    const logs = [];
    page.on('console', msg => logs.push(msg.text()));
    
    await button.click({ force: true });
    await page.waitForTimeout(500);
    
    console.log('\n4Ô∏è‚É£ CONSOLE LOGS:');
    logs.forEach(log => console.log('   ', log));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∞—Å—Å—ã –î–û–ë–ê–í–õ–Ø–Æ–¢–°–Ø
    const hasOpenOrIsOpen = classListAfter.includes('open') || classListAfter.includes('is-open');
    console.log('\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:', hasOpenOrIsOpen ? '–†–ê–ë–û–¢–ê–ï–¢' : '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢');
    
    expect(hasOpenOrIsOpen).toBe(true);
  });
});
