/**
 * ‚úÖ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ - —Å –æ—á–∏—Å—Ç–∫–æ–π –∫—ç—à–∞
 */

import { test, expect } from '@playwright/test';

test.describe('‚úÖ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ - NO CACHE', () => {
  
  test('Dropdown –ó–ê–ö–†–´–í–ê–ï–¢–°–Ø (NO CACHE)', async ({ page, context }) => {
    // –û–ß–ò–©–ê–ï–ú –í–ï–°–¨ –ö–≠–®!
    await context.clearCookies();
    
    // –î–æ–±–∞–≤–ª—è–µ–º timestamp —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ –∫—ç—à
    const timestamp = Date.now();
    await page.goto(`http://localhost:5500?nocache=${timestamp}`);
    await page.waitForLoadState('networkidle');
    await page.waitForTimeout(2000); // –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ JS
    
    console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('‚úÖ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ - NO CACHE');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—É—Ä–≥–µ—Ä
    console.log('1Ô∏è‚É£ –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—É—Ä–≥–µ—Ä...');
    const burger = page.locator('.nav-beautiful__mobile-toggle');
    await burger.click();
    await page.waitForTimeout(1000);
    
    // –ù–∞—Ö–æ–¥–∏–º –ü–ï–†–í–´–ô dropdown
    const wrapper = page.locator('.nav-beautiful__dropdown-wrapper').first();
    const button = wrapper.locator('.nav-beautiful__btn');
    const dropdown = wrapper.locator('.nav-beautiful__dropdown');
    
    console.log('\n‚ïê‚ïê‚ïê –ü–ï–†–í–´–ô DROPDOWN (–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏) ‚ïê‚ïê‚ïê\n');
    
    // –ü–ï–†–í–´–ô –ö–õ–ò–ö - –æ—Ç–∫—Ä—ã—Ç—å
    console.log('1Ô∏è‚É£ –ü–µ—Ä–≤—ã–π –∫–ª–∏–∫ (–û–¢–ö–†–´–¢–¨)...');
    await button.click({ force: true });
    await page.waitForTimeout(1000);
    
    const isVisibleAfterOpen = await dropdown.isVisible();
    const hasOpenAfterOpen = await wrapper.evaluate(el => 
      el.classList.contains('open') || el.classList.contains('is-open')
    );
    
    console.log(`   isVisible: ${isVisibleAfterOpen}`);
    console.log(`   hasOpenClass: ${hasOpenAfterOpen}`);
    
    expect(isVisibleAfterOpen).toBe(true);
    expect(hasOpenAfterOpen).toBe(true);
    console.log('   ‚úÖ –û—Ç–∫—Ä—ã–ª—Å—è!\n');
    
    // –í–¢–û–†–û–ô –ö–õ–ò–ö - –∑–∞–∫—Ä—ã—Ç—å
    console.log('2Ô∏è‚É£ –í—Ç–æ—Ä–æ–π –∫–ª–∏–∫ (–ó–ê–ö–†–´–¢–¨)...');
    await button.click({ force: true });
    await page.waitForTimeout(1000);
    
    const isVisibleAfterClose = await dropdown.isVisible();
    const hasOpenAfterClose = await wrapper.evaluate(el => 
      el.classList.contains('open') || el.classList.contains('is-open')
    );
    
    console.log(`   isVisible: ${isVisibleAfterClose}`);
    console.log(`   hasOpenClass: ${hasOpenAfterClose}`);
    
    if (!isVisibleAfterClose && !hasOpenAfterClose) {
      console.log('   ‚úÖ –ó–ê–ö–†–´–õ–°–Ø! –í–°–Å –†–ê–ë–û–¢–ê–ï–¢! üéâ\n');
    } else {
      console.log('   ‚ùå –ù–ï –ó–ê–ö–†–´–õ–°–Ø!\n');
    }
    
    expect(isVisibleAfterClose).toBe(false);
    expect(hasOpenAfterClose).toBe(false);
  });
});
