/**
 * üîç COMPREHENSIVE MOBILE NAVIGATION TEST
 * 
 * –≠—Ç–æ—Ç —Ç–µ—Å—Ç –í–ò–î–ò–¢ —Å–∞–π—Ç –≥–ª–∞–∑–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –í–°–ï –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:
 * - –ù–∞–µ–∑–∂–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 * - –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ dropdown
 * - –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª
 * - –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
 * 
 * –¶–ï–õ–¨: –ù–∞–π—Ç–∏ –í–°–ï –ø—Ä–æ–±–ª–µ–º—ã –î–û —Ç–æ–≥–æ –∫–∞–∫ –∏—Ö —É–≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!
 */

import { test, expect } from '@playwright/test';

test.describe('üîç –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ú–û–ë–ò–õ–¨–ù–û–ô –ù–ê–í–ò–ì–ê–¶–ò–ò', () => {
  
  test.beforeEach(async ({ page }) => {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º production —Å–∞–π—Ç
    await page.goto('https://xn--80apagbbfxgmuj4j.site');
    await page.waitForLoadState('networkidle');
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
    await page.waitForTimeout(1000);
    
    console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üåê –û—Ç–∫—Ä—ã—Ç —Å–∞–π—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É...');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  });

  test('üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô: –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç" –ù–ï –Ω–∞–µ–∑–∂–∞–µ—Ç –Ω–∞ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã', async ({ page }) => {
    const viewportWidth = page.viewportSize().width;
    const viewportHeight = page.viewportSize().height;
    
    console.log('üì± Viewport:', viewportWidth, 'x', viewportHeight);
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—É—Ä–≥–µ—Ä
    console.log('\n1Ô∏è‚É£ –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é...');
    const burger = page.locator('.nav-beautiful__mobile-toggle');
    await burger.click();
    await page.waitForTimeout(800);
    
    // –î–µ–ª–∞–µ–º screenshot –°–†–ê–ó–£ –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è
    await page.screenshot({ 
      path: '—Ç–µ—Å—Ç—ã/test-results/nav-opened-initial.png',
      fullPage: false 
    });
    console.log('üì∏ Screenshot —Å–æ—Ö—Ä–∞–Ω–µ–Ω: nav-opened-initial.png');
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç"
    const openBotButton = page.locator('.nav-beautiful__cta, a[href*="t.me/dexrabbit_bot"]').first();
    const openBotBox = await openBotButton.boundingBox();
    
    console.log('\nüîç –ü–æ–∑–∏—Ü–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç":');
    console.log('   x:', openBotBox.x);
    console.log('   y:', openBotBox.y);
    console.log('   width:', openBotBox.width);
    console.log('   height:', openBotBox.height);
    console.log('   bottom:', openBotBox.y + openBotBox.height);
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ dropdown –∫–Ω–æ–ø–∫–∏
    const dropdownButtons = page.locator('.nav-beautiful__btn');
    const dropdownCount = await dropdownButtons.count();
    
    console.log(`\nüîç –ù–∞–π–¥–µ–Ω–æ ${dropdownCount} dropdown –∫–Ω–æ–ø–æ–∫`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –Ω–∞–µ–∑–∂–∞–Ω–∏–µ
    let overlaps = [];
    
    for (let i = 0; i < dropdownCount; i++) {
      const button = dropdownButtons.nth(i);
      const buttonBox = await button.boundingBox();
      const buttonText = await button.innerText();
      
      console.log(`\n   –ö–Ω–æ–ø–∫–∞ ${i + 1}: "${buttonText.trim()}"`);
      console.log(`   y: ${buttonBox.y}, bottom: ${buttonBox.y + buttonBox.height}`);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ overlap (–Ω–∞–µ–∑–∂–∞–Ω–∏–µ)
      const isOverlapping = (
        openBotBox.y < buttonBox.y + buttonBox.height &&
        openBotBox.y + openBotBox.height > buttonBox.y &&
        openBotBox.x < buttonBox.x + buttonBox.width &&
        openBotBox.x + openBotBox.width > buttonBox.x
      );
      
      if (isOverlapping) {
        overlaps.push({
          button: buttonText.trim(),
          openBotBottom: openBotBox.y + openBotBox.height,
          buttonTop: buttonBox.y,
          overlap: (openBotBox.y + openBotBox.height) - buttonBox.y
        });
        console.log(`   ‚ùå –ù–ê–ï–ó–ñ–ê–ù–ò–ï! Overlap: ${(openBotBox.y + openBotBox.height) - buttonBox.y}px`);
      } else {
        console.log(`   ‚úÖ –ù–µ –Ω–∞–µ–∑–∂–∞–µ—Ç`);
      }
    }
    
    // ASSERT: –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–µ–∑–∂–∞–Ω–∏–π
    if (overlaps.length > 0) {
      console.log('\n‚ùå –ù–ê–ô–î–ï–ù–û –ù–ê–ï–ó–ñ–ê–ù–ò–ï –≠–õ–ï–ú–ï–ù–¢–û–í:');
      overlaps.forEach(o => {
        console.log(`   - "–û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç" –Ω–∞–µ–∑–∂–∞–µ—Ç –Ω–∞ "${o.button}"`);
        console.log(`     Overlap: ${o.overlap}px`);
      });
      
      // –î–µ–ª–∞–µ–º screenshot –ø—Ä–æ–±–ª–µ–º—ã
      await page.screenshot({ 
        path: '—Ç–µ—Å—Ç—ã/test-results/PROBLEM-button-overlap.png',
        fullPage: false 
      });
    }
    
    expect(overlaps.length).toBe(0);
  });

  test('üîÑ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô: Dropdown –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è –∏ –ó–ê–ö–†–´–í–ê–Æ–¢–°–Ø –ø–æ –∫–ª–∏–∫—É', async ({ page }) => {
    console.log('\n1Ô∏è‚É£ –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—É—Ä–≥–µ—Ä...');
    const burger = page.locator('.nav-beautiful__mobile-toggle');
    await burger.click();
    await page.waitForTimeout(800);
    
    const dropdownWrappers = page.locator('.nav-beautiful__dropdown-wrapper');
    const count = await dropdownWrappers.count();
    
    console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º ${count} dropdown —Ä–∞–∑–¥–µ–ª–æ–≤\n`);
    
    const sectionNames = ['–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–ü–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ', '–£—Å–ª—É–≥–∏', '–ü–æ—Ä–æ–¥—ã', '–û –Ω–∞—Å'];
    
    for (let i = 0; i < count; i++) {
      const wrapper = dropdownWrappers.nth(i);
      const button = wrapper.locator('.nav-beautiful__btn');
      const dropdown = wrapper.locator('.nav-beautiful__dropdown');
      
      console.log(`\n‚ïê‚ïê‚ïê –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${sectionNames[i]} ‚ïê‚ïê‚ïê`);
      
      // –ü–ï–†–í–´–ô –ö–õ–ò–ö - –¥–æ–ª–∂–µ–Ω –æ—Ç–∫—Ä—ã—Ç—å
      console.log('   1Ô∏è‚É£ –ü–µ—Ä–≤—ã–π –∫–ª–∏–∫ - –û–¢–ö–†–´–í–ê–ï–ú...');
      await button.click();
      await page.waitForTimeout(800);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–∫—Ä—ã–ª—Å—è
      const isVisibleAfterOpen = await dropdown.isVisible();
      const hasOpenClass = await wrapper.evaluate(el => el.classList.contains('open'));
      
      console.log(`   –í–∏–¥–∏–º dropdown: ${isVisibleAfterOpen}`);
      console.log(`   –ö–ª–∞—Å—Å 'open': ${hasOpenClass}`);
      
      // Screenshot –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è
      await page.screenshot({ 
        path: `—Ç–µ—Å—Ç—ã/test-results/dropdown-${i}-opened.png`,
        fullPage: false 
      });
      
      expect(isVisibleAfterOpen).toBe(true);
      expect(hasOpenClass).toBe(true);
      
      // –í–¢–û–†–û–ô –ö–õ–ò–ö - –¥–æ–ª–∂–µ–Ω –∑–∞–∫—Ä—ã—Ç—å
      console.log('   2Ô∏è‚É£ –í—Ç–æ—Ä–æ–π –∫–ª–∏–∫ - –ó–ê–ö–†–´–í–ê–ï–ú...');
      await button.click();
      await page.waitForTimeout(800);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫—Ä—ã–ª—Å—è
      const isVisibleAfterClose = await dropdown.isVisible();
      const hasOpenClassAfterClose = await wrapper.evaluate(el => el.classList.contains('open'));
      
      console.log(`   –í–∏–¥–∏–º dropdown: ${isVisibleAfterClose}`);
      console.log(`   –ö–ª–∞—Å—Å 'open': ${hasOpenClassAfterClose}`);
      
      // Screenshot –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
      await page.screenshot({ 
        path: `—Ç–µ—Å—Ç—ã/test-results/dropdown-${i}-closed.png`,
        fullPage: false 
      });
      
      // ASSERT: –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç!
      if (isVisibleAfterClose || hasOpenClassAfterClose) {
        console.log(`   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: ${sectionNames[i]} –ù–ï –ó–ê–ö–†–´–õ–°–Ø!`);
        await page.screenshot({ 
          path: `—Ç–µ—Å—Ç—ã/test-results/PROBLEM-dropdown-${i}-not-closing.png`,
          fullPage: false 
        });
      }
      
      expect(isVisibleAfterClose).toBe(false);
      expect(hasOpenClassAfterClose).toBe(false);
      
      console.log(`   ‚úÖ ${sectionNames[i]} —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
    }
  });

  test('üìç –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô: –í—Å–µ dropdown –í –ü–†–ï–î–ï–õ–ê–• —ç–∫—Ä–∞–Ω–∞ (–Ω–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞)', async ({ page }) => {
    const viewportWidth = page.viewportSize().width;
    
    console.log('\nüì± Viewport width:', viewportWidth);
    console.log('\n1Ô∏è‚É£ –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—É—Ä–≥–µ—Ä...');
    
    const burger = page.locator('.nav-beautiful__mobile-toggle');
    await burger.click();
    await page.waitForTimeout(800);
    
    const dropdownWrappers = page.locator('.nav-beautiful__dropdown-wrapper');
    const count = await dropdownWrappers.count();
    
    const sectionNames = ['–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–ü–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ', '–£—Å–ª—É–≥–∏', '–ü–æ—Ä–æ–¥—ã', '–û –Ω–∞—Å'];
    let problems = [];
    
    for (let i = 0; i < count; i++) {
      const wrapper = dropdownWrappers.nth(i);
      const button = wrapper.locator('.nav-beautiful__btn');
      const dropdown = wrapper.locator('.nav-beautiful__dropdown');
      
      console.log(`\n‚ïê‚ïê‚ïê ${sectionNames[i]} ‚ïê‚ïê‚ïê`);
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º
      await button.click();
      await page.waitForTimeout(800);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é
      const box = await dropdown.boundingBox();
      
      if (box) {
        const rightEdge = box.x + box.width;
        
        console.log(`   x: ${box.x}`);
        console.log(`   width: ${box.width}`);
        console.log(`   right edge: ${rightEdge}`);
        console.log(`   viewport: ${viewportWidth}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–µ–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É
        if (box.x < 0) {
          console.log(`   ‚ùå –£–ï–•–ê–õ –í–õ–ï–í–û –Ω–∞ ${Math.abs(box.x)}px!`);
          problems.push({
            section: sectionNames[i],
            issue: 'left_overflow',
            value: box.x
          });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É
        if (rightEdge > viewportWidth) {
          console.log(`   ‚ùå –£–ï–•–ê–õ –í–ü–†–ê–í–û –Ω–∞ ${rightEdge - viewportWidth}px!`);
          problems.push({
            section: sectionNames[i],
            issue: 'right_overflow',
            value: rightEdge - viewportWidth
          });
          
          // Screenshot –ø—Ä–æ–±–ª–µ–º—ã
          await page.screenshot({ 
            path: `—Ç–µ—Å—Ç—ã/test-results/PROBLEM-${i}-horizontal-overflow.png`,
            fullPage: true 
          });
        }
        
        if (box.x >= 0 && rightEdge <= viewportWidth) {
          console.log(`   ‚úÖ –í –ø—Ä–µ–¥–µ–ª–∞—Ö —ç–∫—Ä–∞–Ω–∞`);
        }
      }
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º
      await button.click();
      await page.waitForTimeout(400);
    }
    
    // ASSERT: –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º
    if (problems.length > 0) {
      console.log('\n‚ùå –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –° OVERFLOW:');
      problems.forEach(p => {
        console.log(`   ${p.section}: ${p.issue} = ${p.value}px`);
      });
    }
    
    expect(problems.length).toBe(0);
  });

  test('üé® –í–ò–ó–£–ê–õ–¨–ù–´–ô: –ü–æ–ª–Ω—ã–π screenshot-—Ç–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏', async ({ page }) => {
    console.log('\nüì∏ –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ screenshots –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...\n');
    
    // 1. –ó–∞–∫—Ä—ã—Ç–æ–µ –º–µ–Ω—é
    await page.screenshot({ 
      path: '—Ç–µ—Å—Ç—ã/test-results/visual-01-menu-closed.png',
      fullPage: false 
    });
    console.log('‚úÖ 01: –ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ');
    
    // 2. –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—É—Ä–≥–µ—Ä
    const burger = page.locator('.nav-beautiful__mobile-toggle');
    await burger.click();
    await page.waitForTimeout(800);
    
    await page.screenshot({ 
      path: '—Ç–µ—Å—Ç—ã/test-results/visual-02-menu-opened.png',
      fullPage: true 
    });
    console.log('‚úÖ 02: –ú–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ');
    
    // 3-7. –ö–∞–∂–¥—ã–π dropdown
    const dropdownWrappers = page.locator('.nav-beautiful__dropdown-wrapper');
    const count = await dropdownWrappers.count();
    const sections = ['–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–ü–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ', '–£—Å–ª—É–≥–∏', '–ü–æ—Ä–æ–¥—ã', '–û –Ω–∞—Å'];
    
    for (let i = 0; i < count; i++) {
      const wrapper = dropdownWrappers.nth(i);
      const button = wrapper.locator('.nav-beautiful__btn');
      
      await button.click();
      await page.waitForTimeout(800);
      
      await page.screenshot({ 
        path: `—Ç–µ—Å—Ç—ã/test-results/visual-0${3 + i}-${sections[i]}.png`,
        fullPage: true 
      });
      console.log(`‚úÖ 0${3 + i}: ${sections[i]} –æ—Ç–∫—Ä—ã—Ç`);
      
      // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º - –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ screenshot
    }
    
    console.log('\nüìÅ –í—Å–µ screenshots —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–µ—Å—Ç—ã/test-results/');
    console.log('   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è!');
  });

  test('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ Z-INDEX –∏ –Ω–∞–ª–æ–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤', async ({ page }) => {
    console.log('\n1Ô∏è‚É£ –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—É—Ä–≥–µ—Ä...');
    const burger = page.locator('.nav-beautiful__mobile-toggle');
    await burger.click();
    await page.waitForTimeout(800);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const elements = {
      '–û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç': '.nav-beautiful__cta, a[href*="t.me"]',
      '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏': '.nav-beautiful__dropdown-wrapper:nth-child(1) .nav-beautiful__btn',
      '–ü–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ': '.nav-beautiful__dropdown-wrapper:nth-child(2) .nav-beautiful__btn',
      '–£—Å–ª—É–≥–∏': '.nav-beautiful__dropdown-wrapper:nth-child(3) .nav-beautiful__btn',
      '–ü–æ—Ä–æ–¥—ã': '.nav-beautiful__dropdown-wrapper:nth-child(4) .nav-beautiful__btn',
      '–û –Ω–∞—Å': '.nav-beautiful__dropdown-wrapper:nth-child(5) .nav-beautiful__btn'
    };
    
    console.log('\nüìä Z-INDEX –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:\n');
    
    for (const [name, selector] of Object.entries(elements)) {
      const element = page.locator(selector).first();
      
      const zIndex = await element.evaluate(el => {
        return window.getComputedStyle(el).zIndex;
      });
      
      const position = await element.evaluate(el => {
        return window.getComputedStyle(el).position;
      });
      
      const box = await element.boundingBox();
      
      console.log(`${name}:`);
      console.log(`   z-index: ${zIndex}`);
      console.log(`   position: ${position}`);
      console.log(`   y: ${box?.y.toFixed(1)}`);
      console.log(`   height: ${box?.height.toFixed(1)}`);
      console.log(``);
    }
  });
});
