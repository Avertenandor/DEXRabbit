/**
 * üî¨ MINIMAL DEBUG - —Å–º–æ—Ç—Ä–∏–º –ø–æ—Ä—è–¥–æ–∫ events
 */

import { test, expect } from '@playwright/test';

test.describe('üî¨ MINIMAL DEBUG', () => {
  
  test('–ü–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è event handlers', async ({ page }) => {
    // –°–ª—É—à–∞–µ–º –í–°–ï console logs
    const logs = [];
    page.on('console', msg => {
      const text = msg.text();
      if (text.includes('DEBUG')) {
        logs.push(text);
        console.log('   ', text);
      }
    });
    
    await page.goto('http://localhost:5500');
    await page.waitForLoadState('networkidle');
    await page.waitForTimeout(1000);
    
    console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üî¨ –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –¢–ï–°–¢');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—É—Ä–≥–µ—Ä
    console.log('1Ô∏è‚É£ –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—É—Ä–≥–µ—Ä...');
    const burger = page.locator('.nav-beautiful__mobile-toggle');
    await burger.click();
    await page.waitForTimeout(1000);
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π dropdown
    const wrapper = page.locator('.nav-beautiful__dropdown-wrapper').first();
    const button = wrapper.locator('.nav-beautiful__btn');
    
    console.log('\n2Ô∏è‚É£ –ö–ª–∏–∫–∞–µ–º –Ω–∞ dropdown...');
    console.log('   (–°–º–æ—Ç—Ä–∏–º console logs)\n');
    
    // –ö–õ–ò–ö
    await button.click({ force: true });
    await page.waitForTimeout(2000); // –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –≤—Å–µ handlers
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï –≤—Å–µ—Ö handlers
    console.log('\n3Ô∏è‚É£ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï –≤—Å–µ—Ö handlers:');
    const classList = await wrapper.evaluate(el => Array.from(el.classList));
    console.log('   classList:', classList);
    
    const hasOpen = classList.includes('open') || classList.includes('is-open');
    console.log('   hasOpenClass:', hasOpen);
    
    // SUMMARY
    console.log('\n4Ô∏è‚É£ SUMMARY:');
    console.log('   Console logs count:', logs.length);
    if (logs.length === 0) {
      console.log('   ‚ùå JavaScript –ù–ï –∑–∞–≥—Ä—É–∂–µ–Ω –∏–ª–∏ –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    }
    
    // Assert
    expect(hasOpen).toBe(true);
  });
});
